{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"UPGRADE_INTERFACE_VERSION","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"_getPythPriceExternal","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"batchGetPrices","inputs":[{"name":"tokens","type":"address[]","internalType":"address[]"}],"outputs":[{"name":"prices","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getPrice","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"price","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPythContract","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getVersion","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"initialize","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"pythContract_","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isPriceFresh","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"maxConfidenceRatio","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxPriceAge","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"oracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"priceFeeds","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"proxiableUUID","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"pythContract","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"removePriceFeed","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxConfidenceRatio","inputs":[{"name":"bps","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setMaxPriceAge","inputs":[{"name":"seconds_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setPriceFeed","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"feedId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setStablecoin","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"isStablecoin","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"stablecoins","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeToAndCall","inputs":[{"name":"newImplementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"MaxConfidenceRatioUpdated","inputs":[{"name":"oldValue","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newValue","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MaxPriceAgeUpdated","inputs":[{"name":"oldValue","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newValue","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PriceFeedRemoved","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PriceFeedSet","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"feedId","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"ConfidenceTooLow","inputs":[{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"price","type":"uint64","internalType":"uint64"},{"name":"ratio","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"ERC1967InvalidImplementation","inputs":[{"name":"implementation","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967NonPayable","inputs":[]},{"type":"error","name":"FailedCall","inputs":[]},{"type":"error","name":"InvalidInitialization","inputs":[]},{"type":"error","name":"InvalidPrice","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"price","type":"int64","internalType":"int64"}]},{"type":"error","name":"NoFeedConfigured","inputs":[{"name":"token","type":"address","internalType":"address"}]},{"type":"error","name":"NotInitializing","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"PriceCalculationOverflow","inputs":[]},{"type":"error","name":"PriceScaleOverflow","inputs":[]},{"type":"error","name":"PriceScaleUnderflow","inputs":[]},{"type":"error","name":"UUPSUnauthorizedCallContext","inputs":[]},{"type":"error","name":"UUPSUnsupportedProxiableUUID","inputs":[{"name":"slot","type":"bytes32","internalType":"bytes32"}]}],"bytecode":{"object":"0x60a080604052346100cc57306080527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c166100bd57506001600160401b036002600160401b031982821601610078575b6040516117dc90816100d18239608051818181610a890152610b670152f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f8080610059565b63f92ee8a960e01b8152600490fd5b5f80fdfe60406080815260049081361015610014575f80fd5b5f3560e01c80630af1a39f146110f45780630d8e6e2c14610a4e5780631584410a146110d65780631ccbf9081461107a5780633669999414610f5657806341976e0914610f2a578063485cc95514610d435780634f1ef28614610aed57806352d1902d14610a7657806354fd4d5014610a4e57806356447ce8146109af5780636d1fdf6f14610925578063715018a6146109485780637d13ae2b1461092a5780637dc0d1d0146109255780638a32ada0146109255780638add9bee1461069f5780638da5cb5b1461066b5780639dcb511a146106345780639ed9f5fb14610549578063ad3cb1cc14610509578063adcb085a14610242578063f2fde38b14610217578063fa847836146101dd5763fceb00241461012f575f80fd5b346101d95760203660031901126101d957610148611122565b610150611613565b6001600160a01b03165f818152600360205282902054909290156101a257505f9082825260036020528120557ffd58461c4683df397133c7e91fe2aa71559919b405f9e09c9c3af7e875f54e3b5f80a2005b6020606492519162461bcd60e51b83528201526012602482015271139bc8199959590818dbdb999a59dd5c995960721b6044820152fd5b5f80fd5b50346101d95760203660031901126101d9576020916001600160a01b03610202611122565b165f52825260ff815f20541690519015158152f35b346101d95760203660031901126101d957610240610233611122565b61023b611613565b6115a2565b005b5090346101d957816003193601126101d95761025c611122565b9160249283359061026b611613565b6001600160a01b039081169061028282151561133a565b82156104d55760806044915f541685519283809263052571af60e51b8252878a830152610e108b8301525afa5f91816104a4575b506102fd57835162461bcd60e51b81526020818701526019818801527f466565642049442076616c69646174696f6e206661696c6564000000000000006044820152606490fd5b8486825f87945160070b1315610462579085939291855f5260209060038252845f205461035a575b50505050825f5260036020525f20557f65e4ba705db6091cf209ad98e61b9b8203308a9bb349e9add9809174481dbd625f80a3005b84516341976e0960e01b81528481018890529082828581305afa5f9281610430575b50610388575b50610325565b6103979192939495965061164b565b818181111561042257906103aa91611563565b606481029080820460641490151715610410576032916103c991611584565b116103d8578080879594610382565b90601591606494519362461bcd60e51b85528401528201527450726963652064696666657273206279203e35302560581b6044820152fd5b83601186634e487b7160e01b5f52525ffd5b61042b91611563565b6103aa565b975091508287813d811161045b575b61044981836111cb565b810103126101d957889651918a61037c565b503d61043f565b506019906020606494519362461bcd60e51b85528401528201527f496e76616c69642066656564202d207a65726f207072696365000000000000006044820152fd5b6104c791925060803d6080116104ce575b6104bf81836111cb565b810190611251565b905f6102b6565b503d6104b5565b835162461bcd60e51b8152602081870152600f818801526e125b9d985b1a590819995959081251608a1b6044820152606490fd5b50346101d9575f3660031901126101d957805161054591610529826111af565b60058252640352e302e360dc1b60208301525191829182611138565b0390f35b50346101d95760203660031901126101d9578135610565611613565b600a81106105f1576103e881116105ae577f5ee7c2a38f81f8ccde48d19f8aa8904f2c0f5e5ef5890632822f3d12b439544e9250600254908060025582519182526020820152a1005b815162461bcd60e51b8152602081850152601960248201527f436f6e666964656e636520726174696f20746f6f2068696768000000000000006044820152606490fd5b815162461bcd60e51b8152602081850152601860248201527f436f6e666964656e636520726174696f20746f6f206c6f7700000000000000006044820152606490fd5b50346101d95760203660031901126101d9576020906001600160a01b03610659611122565b165f5260038252805f20549051908152f35b50346101d9575f3660031901126101d9575f805160206117878339815191525490516001600160a01b039091168152602090f35b5090346101d9576020806003193601126101d95767ffffffffffffffff9082358281116101d957366023820112156101d95780840135938385116101d957602490818301928236918860051b0101116101d9576106fe869597966114ff565b9661070b875198896111cb565b858852610717866114ff565b8886019690601f19013688375f5b81811061076e5750505050505082519384938285019183865251809252840192915f5b82811061075757505050500390f35b835185528695509381019392810192600101610748565b6107856107808284899d9b9c9d611517565b61153b565b8a51630d9a666560e21b81526001600160a01b0391821686820152608080828981305afa9182915f93610906575b50506108255750806107c961078084868b611517565b165f5284885260ff8b5f2054165f146107ff575080670de0b6b3a76400006107f36001938b61154f565b525b0198979698610725565b925061078090610811928b9697611517565b9251633f41fc6560e11b8152921690820152fd5b905061083561078083858a611517565b505f815160070b13156108cb5787810184815116612710908181029181830414901517156108b95761086b908684511690611584565b9060025482116108935750509061088360019261164b565b61088d828b61154f565b526107f5565b5191518c51637d4e629360e01b8152928616838801528516828801526044820152606490fd5b87601188634e487b7160e01b5f52525ffd5b8a5162461bcd60e51b8152808601899052601681880152755072696365206d75737420626520706f73697469766560501b6044820152606490fd5b61091d929350803d106104ce576104bf81836111cb565b905f806107b3565b61122a565b50346101d9575f3660031901126101d9576020906002549051908152f35b346101d9575f3660031901126101d957610960611613565b5f8051602061178783398151915280546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b50346101d95760203660031901126101d95781356109cb611613565b80151580610a42575b15610a11577f23d7699acdcc135096fefb30738c302da5792f78f39d038c1e7d74fd9c646cb29250600154908060015582519182526020820152a1005b815162461bcd60e51b8152602081850152600b60248201526a496e76616c69642061676560a81b6044820152606490fd5b50610e108111156109d4565b50346101d9575f3660031901126101d95761054590610a6b611209565b905191829182611138565b50346101d9575f3660031901126101d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610ae057602090517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b5163703e46dd60e11b8152fd5b5090816003193601126101d957610b02611122565b602492833567ffffffffffffffff81116101d957366023820112156101d95780840135610b2e816111ed565b93610b3b845195866111cb565b81855260209182860193368983830101116101d957815f928a8693018737870101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115610d15575b50610d0557610ba0611613565b81169484516352d1902d60e01b8152838189818a5afa5f9181610cd6575b50610bd95750505050505191634c9c8ce360e01b8352820152fd5b9087878794938b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91828103610cc15750853b15610cad575080546001600160a01b031916821790558451907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2825115610c935750505f6102409581925190845af4913d15610c89573d610c7b610c72826111ed565b925192836111cb565b81525f81943d92013e611723565b5060609250611723565b9450945050505034610ca157005b63b398979f60e01b8152fd5b8651634c9c8ce360e01b8152808501849052fd5b8751632a87526960e21b815280860191909152fd5b9091508481813d8311610cfe575b610cee81836111cb565b810103126101d95751905f610bbe565b503d610ce4565b845163703e46dd60e11b81528790fd5b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614155f610b93565b5090346101d957816003193601126101d957610d5d611122565b6001600160a01b039060243582811691908290036101d9577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549360ff85881c16159467ffffffffffffffff811680159081610f22575b6001149081610f18575b159081610f0f575b50610eff5767ffffffffffffffff198116600117875585610ee0575b50821615610ead578215610e725750610e0790610dff6116e2565b61023b6116e2565b610e0f6116e2565b6bffffffffffffffffffffffff60a01b5f5416175f55603c6001556064600255610e3557005b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b606490602087519162461bcd60e51b83528201526015602482015274125b9d985b1a5908141e5d1a0818dbdb9d1c9858dd605a1b6044820152fd5b606490602087519162461bcd60e51b8352820152600d60248201526c24b73b30b634b21037bbb732b960991b6044820152fd5b68ffffffffffffffffff1916680100000000000000011786555f610de4565b875163f92ee8a960e01b81528390fd5b9050155f610dc8565b303b159150610dc0565b879150610db6565b50346101d95760203660031901126101d957602090610f4f610f4a611122565b61139a565b9051908152f35b50346101d95760203660031901126101d957610f70611122565b91610f79611376565b50610f82611376565b506001600160a01b039283165f818152600360205283902054938415611065575f54600154855163052571af60e51b815285810197909752602487015260809186916044918391165afa93841561105b575f9461103a575b50835160070b905f82131561102157608084606087825192815160070b845267ffffffffffffffff60208301511660208501528082015160030b9084015201516060820152f35b6044935192634b5543d560e01b84528301526024820152fd5b61105491945060803d6080116104ce576104bf81836111cb565b925f610fda565b83513d5f823e3d90fd5b506024925191633f41fc6560e11b8352820152fd5b50346101d957806003193601126101d957611093611122565b91602435928315158094036101d9576110aa611613565b6001600160a01b03166110be81151561133a565b5f526020525f209060ff801983541691161790555f80f35b50346101d9575f3660031901126101d9576020906001549051908152f35b50346101d95760203660031901126101d957602090611119611114611122565b6112b4565b90519015158152f35b600435906001600160a01b03821682036101d957565b602080825282518183018190529093925f5b82811061116b57505060409293505f838284010152601f8019910116010190565b81810186015184820160400152850161114a565b6080810190811067ffffffffffffffff82111761119b57604052565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761119b57604052565b90601f8019910116810190811067ffffffffffffffff82111761119b57604052565b67ffffffffffffffff811161119b57601f01601f191660200190565b60405190611216826111af565b60058252640312e302e360dc1b6020830152565b346101d9575f3660031901126101d9575f546040516001600160a01b039091168152602090f35b908160809103126101d957604051906112698261117f565b80518060070b81036101d9578252602081015167ffffffffffffffff811681036101d95760208301526040810151908160030b82036101d95760609160408401520151606082015290565b6001600160a01b039081165f90815260036020526040902054908115611334575f5460015460405163052571af60e51b81526004810194909452602484015260809183916044918391165afa9081611315575b50611310575f90565b600190565b61132d9060803d6080116104ce576104bf81836111cb565b505f611307565b50505f90565b1561134157565b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606490fd5b604051906113838261117f565b5f6060838281528260208201528260408201520152565b604051630d9a666560e21b81526001600160a01b03909116600480830182905291608081602481305afa5f91816114de575b5061140a5750805f528160205260ff60405f2054166113fc57604051633f41fc6560e11b81529182015260249150fd5b5050670de0b6b3a764000090565b9190505f825160070b13156114a1576020820167ffffffffffffffff808251166127109081810291818304149015171561148e5761144c908286511690611584565b91600254831161146657505050506114639061164b565b90565b9381606495511690519060405194637d4e629360e01b86528501521660248301526044820152fd5b601184634e487b7160e01b5f525260245ffd5b60649060206040519162461bcd60e51b835282015260166024820152755072696365206d75737420626520706f73697469766560501b6044820152fd5b6114f891925060803d6080116104ce576104bf81836111cb565b905f6113cc565b67ffffffffffffffff811161119b5760051b60200190565b91908110156115275760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b03811681036101d95790565b80518210156115275760209160051b010190565b9190820391821161157057565b634e487b7160e01b5f52601160045260245ffd5b811561158e570490565b634e487b7160e01b5f52601260045260245ffd5b6001600160a01b039081169081156115fb575f8051602061178783398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80516020611787833981519152546001600160a01b0316330361163357565b60405163118cdaa760e01b8152336004820152602490fd5b604081015160030b9081601201918212600116611570575f82126116d057601e82136116be575167ffffffffffffffff1690604d811161157057600a0a90811561158e57815f190481116116ac578181029181830414901517156115705790565b60405163eb54e4d360e01b8152600490fd5b60405163190a65ed60e31b8152600490fd5b6040516373abd2a360e11b8152600490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561171157565b604051631afcd79f60e31b8152600490fd5b9061174a575080511561173857602081519101fd5b60405163d6bda27560e01b8152600490fd5b8151158061177d575b61175b575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561175356fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300a264697066735822122078c8a020aa585584a743ba426bbcc5b7df57c3430cc8b8ae9d481118c038d37b64736f6c63430008170033","sourceMap":"854:13248:78:-:0;;;;;;;1171:4:34;1163:13;;3147:66:33;854:13248:78;;;;;;;;;7894:76:33;;-1:-1:-1;;;;;;;;;;;;854:13248:78;;;7983:34:33;7979:146;;-1:-1:-1;854:13248:78;;;;;;;;1163:13:34;854:13248:78;;;;;;;;;;;7979:146:33;-1:-1:-1;;;;;;854:13248:78;;;;;;;;;;;;;8085:29:33;;854:13248:78;;8085:29:33;7979:146;;;;;7894:76;-1:-1:-1;;;7936:23:33;;;;;854:13248:78;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60406080815260049081361015610014575f80fd5b5f3560e01c80630af1a39f146110f45780630d8e6e2c14610a4e5780631584410a146110d65780631ccbf9081461107a5780633669999414610f5657806341976e0914610f2a578063485cc95514610d435780634f1ef28614610aed57806352d1902d14610a7657806354fd4d5014610a4e57806356447ce8146109af5780636d1fdf6f14610925578063715018a6146109485780637d13ae2b1461092a5780637dc0d1d0146109255780638a32ada0146109255780638add9bee1461069f5780638da5cb5b1461066b5780639dcb511a146106345780639ed9f5fb14610549578063ad3cb1cc14610509578063adcb085a14610242578063f2fde38b14610217578063fa847836146101dd5763fceb00241461012f575f80fd5b346101d95760203660031901126101d957610148611122565b610150611613565b6001600160a01b03165f818152600360205282902054909290156101a257505f9082825260036020528120557ffd58461c4683df397133c7e91fe2aa71559919b405f9e09c9c3af7e875f54e3b5f80a2005b6020606492519162461bcd60e51b83528201526012602482015271139bc8199959590818dbdb999a59dd5c995960721b6044820152fd5b5f80fd5b50346101d95760203660031901126101d9576020916001600160a01b03610202611122565b165f52825260ff815f20541690519015158152f35b346101d95760203660031901126101d957610240610233611122565b61023b611613565b6115a2565b005b5090346101d957816003193601126101d95761025c611122565b9160249283359061026b611613565b6001600160a01b039081169061028282151561133a565b82156104d55760806044915f541685519283809263052571af60e51b8252878a830152610e108b8301525afa5f91816104a4575b506102fd57835162461bcd60e51b81526020818701526019818801527f466565642049442076616c69646174696f6e206661696c6564000000000000006044820152606490fd5b8486825f87945160070b1315610462579085939291855f5260209060038252845f205461035a575b50505050825f5260036020525f20557f65e4ba705db6091cf209ad98e61b9b8203308a9bb349e9add9809174481dbd625f80a3005b84516341976e0960e01b81528481018890529082828581305afa5f9281610430575b50610388575b50610325565b6103979192939495965061164b565b818181111561042257906103aa91611563565b606481029080820460641490151715610410576032916103c991611584565b116103d8578080879594610382565b90601591606494519362461bcd60e51b85528401528201527450726963652064696666657273206279203e35302560581b6044820152fd5b83601186634e487b7160e01b5f52525ffd5b61042b91611563565b6103aa565b975091508287813d811161045b575b61044981836111cb565b810103126101d957889651918a61037c565b503d61043f565b506019906020606494519362461bcd60e51b85528401528201527f496e76616c69642066656564202d207a65726f207072696365000000000000006044820152fd5b6104c791925060803d6080116104ce575b6104bf81836111cb565b810190611251565b905f6102b6565b503d6104b5565b835162461bcd60e51b8152602081870152600f818801526e125b9d985b1a590819995959081251608a1b6044820152606490fd5b50346101d9575f3660031901126101d957805161054591610529826111af565b60058252640352e302e360dc1b60208301525191829182611138565b0390f35b50346101d95760203660031901126101d9578135610565611613565b600a81106105f1576103e881116105ae577f5ee7c2a38f81f8ccde48d19f8aa8904f2c0f5e5ef5890632822f3d12b439544e9250600254908060025582519182526020820152a1005b815162461bcd60e51b8152602081850152601960248201527f436f6e666964656e636520726174696f20746f6f2068696768000000000000006044820152606490fd5b815162461bcd60e51b8152602081850152601860248201527f436f6e666964656e636520726174696f20746f6f206c6f7700000000000000006044820152606490fd5b50346101d95760203660031901126101d9576020906001600160a01b03610659611122565b165f5260038252805f20549051908152f35b50346101d9575f3660031901126101d9575f805160206117878339815191525490516001600160a01b039091168152602090f35b5090346101d9576020806003193601126101d95767ffffffffffffffff9082358281116101d957366023820112156101d95780840135938385116101d957602490818301928236918860051b0101116101d9576106fe869597966114ff565b9661070b875198896111cb565b858852610717866114ff565b8886019690601f19013688375f5b81811061076e5750505050505082519384938285019183865251809252840192915f5b82811061075757505050500390f35b835185528695509381019392810192600101610748565b6107856107808284899d9b9c9d611517565b61153b565b8a51630d9a666560e21b81526001600160a01b0391821686820152608080828981305afa9182915f93610906575b50506108255750806107c961078084868b611517565b165f5284885260ff8b5f2054165f146107ff575080670de0b6b3a76400006107f36001938b61154f565b525b0198979698610725565b925061078090610811928b9697611517565b9251633f41fc6560e11b8152921690820152fd5b905061083561078083858a611517565b505f815160070b13156108cb5787810184815116612710908181029181830414901517156108b95761086b908684511690611584565b9060025482116108935750509061088360019261164b565b61088d828b61154f565b526107f5565b5191518c51637d4e629360e01b8152928616838801528516828801526044820152606490fd5b87601188634e487b7160e01b5f52525ffd5b8a5162461bcd60e51b8152808601899052601681880152755072696365206d75737420626520706f73697469766560501b6044820152606490fd5b61091d929350803d106104ce576104bf81836111cb565b905f806107b3565b61122a565b50346101d9575f3660031901126101d9576020906002549051908152f35b346101d9575f3660031901126101d957610960611613565b5f8051602061178783398151915280546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b50346101d95760203660031901126101d95781356109cb611613565b80151580610a42575b15610a11577f23d7699acdcc135096fefb30738c302da5792f78f39d038c1e7d74fd9c646cb29250600154908060015582519182526020820152a1005b815162461bcd60e51b8152602081850152600b60248201526a496e76616c69642061676560a81b6044820152606490fd5b50610e108111156109d4565b50346101d9575f3660031901126101d95761054590610a6b611209565b905191829182611138565b50346101d9575f3660031901126101d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610ae057602090517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b5163703e46dd60e11b8152fd5b5090816003193601126101d957610b02611122565b602492833567ffffffffffffffff81116101d957366023820112156101d95780840135610b2e816111ed565b93610b3b845195866111cb565b81855260209182860193368983830101116101d957815f928a8693018737870101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115610d15575b50610d0557610ba0611613565b81169484516352d1902d60e01b8152838189818a5afa5f9181610cd6575b50610bd95750505050505191634c9c8ce360e01b8352820152fd5b9087878794938b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91828103610cc15750853b15610cad575080546001600160a01b031916821790558451907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2825115610c935750505f6102409581925190845af4913d15610c89573d610c7b610c72826111ed565b925192836111cb565b81525f81943d92013e611723565b5060609250611723565b9450945050505034610ca157005b63b398979f60e01b8152fd5b8651634c9c8ce360e01b8152808501849052fd5b8751632a87526960e21b815280860191909152fd5b9091508481813d8311610cfe575b610cee81836111cb565b810103126101d95751905f610bbe565b503d610ce4565b845163703e46dd60e11b81528790fd5b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614155f610b93565b5090346101d957816003193601126101d957610d5d611122565b6001600160a01b039060243582811691908290036101d9577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009384549360ff85881c16159467ffffffffffffffff811680159081610f22575b6001149081610f18575b159081610f0f575b50610eff5767ffffffffffffffff198116600117875585610ee0575b50821615610ead578215610e725750610e0790610dff6116e2565b61023b6116e2565b610e0f6116e2565b6bffffffffffffffffffffffff60a01b5f5416175f55603c6001556064600255610e3557005b805468ff00000000000000001916905551600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b606490602087519162461bcd60e51b83528201526015602482015274125b9d985b1a5908141e5d1a0818dbdb9d1c9858dd605a1b6044820152fd5b606490602087519162461bcd60e51b8352820152600d60248201526c24b73b30b634b21037bbb732b960991b6044820152fd5b68ffffffffffffffffff1916680100000000000000011786555f610de4565b875163f92ee8a960e01b81528390fd5b9050155f610dc8565b303b159150610dc0565b879150610db6565b50346101d95760203660031901126101d957602090610f4f610f4a611122565b61139a565b9051908152f35b50346101d95760203660031901126101d957610f70611122565b91610f79611376565b50610f82611376565b506001600160a01b039283165f818152600360205283902054938415611065575f54600154855163052571af60e51b815285810197909752602487015260809186916044918391165afa93841561105b575f9461103a575b50835160070b905f82131561102157608084606087825192815160070b845267ffffffffffffffff60208301511660208501528082015160030b9084015201516060820152f35b6044935192634b5543d560e01b84528301526024820152fd5b61105491945060803d6080116104ce576104bf81836111cb565b925f610fda565b83513d5f823e3d90fd5b506024925191633f41fc6560e11b8352820152fd5b50346101d957806003193601126101d957611093611122565b91602435928315158094036101d9576110aa611613565b6001600160a01b03166110be81151561133a565b5f526020525f209060ff801983541691161790555f80f35b50346101d9575f3660031901126101d9576020906001549051908152f35b50346101d95760203660031901126101d957602090611119611114611122565b6112b4565b90519015158152f35b600435906001600160a01b03821682036101d957565b602080825282518183018190529093925f5b82811061116b57505060409293505f838284010152601f8019910116010190565b81810186015184820160400152850161114a565b6080810190811067ffffffffffffffff82111761119b57604052565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761119b57604052565b90601f8019910116810190811067ffffffffffffffff82111761119b57604052565b67ffffffffffffffff811161119b57601f01601f191660200190565b60405190611216826111af565b60058252640312e302e360dc1b6020830152565b346101d9575f3660031901126101d9575f546040516001600160a01b039091168152602090f35b908160809103126101d957604051906112698261117f565b80518060070b81036101d9578252602081015167ffffffffffffffff811681036101d95760208301526040810151908160030b82036101d95760609160408401520151606082015290565b6001600160a01b039081165f90815260036020526040902054908115611334575f5460015460405163052571af60e51b81526004810194909452602484015260809183916044918391165afa9081611315575b50611310575f90565b600190565b61132d9060803d6080116104ce576104bf81836111cb565b505f611307565b50505f90565b1561134157565b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606490fd5b604051906113838261117f565b5f6060838281528260208201528260408201520152565b604051630d9a666560e21b81526001600160a01b03909116600480830182905291608081602481305afa5f91816114de575b5061140a5750805f528160205260ff60405f2054166113fc57604051633f41fc6560e11b81529182015260249150fd5b5050670de0b6b3a764000090565b9190505f825160070b13156114a1576020820167ffffffffffffffff808251166127109081810291818304149015171561148e5761144c908286511690611584565b91600254831161146657505050506114639061164b565b90565b9381606495511690519060405194637d4e629360e01b86528501521660248301526044820152fd5b601184634e487b7160e01b5f525260245ffd5b60649060206040519162461bcd60e51b835282015260166024820152755072696365206d75737420626520706f73697469766560501b6044820152fd5b6114f891925060803d6080116104ce576104bf81836111cb565b905f6113cc565b67ffffffffffffffff811161119b5760051b60200190565b91908110156115275760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b03811681036101d95790565b80518210156115275760209160051b010190565b9190820391821161157057565b634e487b7160e01b5f52601160045260245ffd5b811561158e570490565b634e487b7160e01b5f52601260045260245ffd5b6001600160a01b039081169081156115fb575f8051602061178783398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80516020611787833981519152546001600160a01b0316330361163357565b60405163118cdaa760e01b8152336004820152602490fd5b604081015160030b9081601201918212600116611570575f82126116d057601e82136116be575167ffffffffffffffff1690604d811161157057600a0a90811561158e57815f190481116116ac578181029181830414901517156115705790565b60405163eb54e4d360e01b8152600490fd5b60405163190a65ed60e31b8152600490fd5b6040516373abd2a360e11b8152600490fd5b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561171157565b604051631afcd79f60e31b8152600490fd5b9061174a575080511561173857602081519101fd5b60405163d6bda27560e01b8152600490fd5b8151158061177d575b61175b575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561175356fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300a264697066735822122078c8a020aa585584a743ba426bbcc5b7df57c3430cc8b8ae9d481118c038d37b64736f6c63430008170033","sourceMap":"854:13248:78:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10747:54;854:13248;10747:54;;;854:13248;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;:::i;:::-;2303:62:32;;:::i;:::-;-1:-1:-1;;;;;854:13248:78;;;;;5409:10;854:13248;;;;;;;;;5409:31;854:13248;;;;;;;;5409:10;854:13248;;;;;5513:23;854:13248;5513:23;;854:13248;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;-1:-1:-1;;;;;854:13248:78;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;2357:1:32;854:13248:78;;:::i;:::-;2303:62:32;;:::i;:::-;2357:1;:::i;:::-;854:13248:78;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;2303:62:32;;;:::i;:::-;-1:-1:-1;;;;;854:13248:78;;;;3661:45;3669:19;;;3661:45;:::i;:::-;3724:20;;854:13248;;3937:47;854:13248;;;;;;;;;;;;;;3937:47;;;;;;854:13248;3979:4;854:13248;;;;3937:47;;854:13248;;3937:47;;;854:13248;-1:-1:-1;3933:1198:78;;854:13248;;-1:-1:-1;;;5085:35:78;;854:13248;5085:35;;;854:13248;;;;;;;;;;;;;5085:35;3933:1198;854:13248;;;;;;;;;4048:15;854:13248;;;;;;;;;;;;;4191:10;854:13248;;;;;;4187:867;;3933:1198;;;;;854:13248;;;5141:10;854:13248;;;;;5182:27;854:13248;5182:27;;854:13248;4187:867;854:13248;;-1:-1:-1;;;4294:20:78;;;;;854:13248;;;;4294:4;854:13248;4294:4;854:13248;4294:4;:20;;854:13248;;4294:20;;;4187:867;4290:750;;;4187:867;;;;4290:750;4455:27;;;;;;;;;:::i;:::-;4580:19;;;;;;;4602;;;;:::i;:::-;4700:3;854:13248;;;;;;4700:3;854:13248;;;;;;;4841:2;4687:28;;;;:::i;:::-;4826:17;854:13248;;4290:750;;;;;;;854:13248;;;;4700:3;854:13248;;;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;;1741:2;;;;;;854:13248;1741:2;;854:13248;1741:2;4580:63;4624:19;;;:::i;:::-;4580:63;;4294:20;;-1:-1:-1;4294:20:78;-1:-1:-1;4294:20:78;;;;;;;;;;;;;:::i;:::-;;;854:13248;;;;;;;4294:20;;;;;;;;;854:13248;;;;;;;;;;;;;;;;;;;;;;;;;;3937:47;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;854:13248;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;2303:62:32;;:::i;:::-;2004:2:78;9338:27;;2004:2;;2135:4;9412:27;;2135:4;;9565:40;854:13248;;9498:18;854:13248;;;9498:18;854:13248;;;;;;;;;;9565:40;854:13248;2135:4;854:13248;;-1:-1:-1;;;2135:4:78;;854:13248;2135:4;;;;;;;;854:13248;2135:4;854:13248;;;2135:4;;;;2004:2;854:13248;;-1:-1:-1;;;2004:2:78;;854:13248;2004:2;;;;;;;;854:13248;2004:2;854:13248;;;2004:2;;;;854:13248;;;;;;;-1:-1:-1;;854:13248:78;;;;;;-1:-1:-1;;;;;854:13248:78;;:::i;:::-;;;;1466:45;854:13248;;;;;;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;-1:-1:-1;;;;;;;;;;;854:13248:78;;;-1:-1:-1;;;;;854:13248:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;854:13248:78;;;;;7511:17;;;;;;854:13248;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;854:13248:78;;;;;;;;;;;;7530:3;7580:9;;;;;;;;;;:::i;:::-;;:::i;:::-;854:13248;;-1:-1:-1;;;7553:37:78;;-1:-1:-1;;;;;854:13248:78;;;7553:37;;;854:13248;7553:37;;854:13248;7553:4;854:13248;7553:4;:37;;;;;854:13248;7553:37;;;7530:3;-1:-1:-1;;7549:524:78;;7896:9;;;;;;;;:::i;:::-;854:13248;;;;;;;;;;1741:2;854:13248;7880:179;854:13248;;;7930:29;;1741:2;7930:29;854:13248;7930:29;;;:::i;:::-;854:13248;7549:524;854:13248;7496:13;;;;;;7880:179;8030:9;;;;;;;;;;:::i;:::-;854:13248;;-1:-1:-1;;;8013:27:78;;854:13248;;8013:27;;;854:13248;8013:27;7549:524;7685:9;;;;;;;;:::i;:::-;;854:13248;;;;;11422:19;854:13248;;;11637:14;;;854:13248;;;;11655:5;854:13248;;;;;;;;;;;;;;;11628:68;854:13248;;;;;11628:68;;:::i;:::-;854:13248;11729:18;854:13248;11711:36;;11707:148;;7725:40;;;;854:13248;7725:40;;:::i;:::-;7713:52;;;;:::i;:::-;854:13248;7549:524;;11707:148;854:13248;;;;;-1:-1:-1;;;11770:74:78;;854:13248;;;11770:74;;;854:13248;;;;;;;;;;;;;11770:74;854:13248;1741:2;;;;;;854:13248;1741:2;;854:13248;1741:2;854:13248;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;;;7553:37;;;;;;;-1:-1:-1;7553:37:78;;;;;;:::i;:::-;;;;;;854:13248;;:::i;:::-;;;;;;;-1:-1:-1;;854:13248:78;;;;;;1363:33;854:13248;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;2303:62:32;;:::i;:::-;-1:-1:-1;;;;;;;;;;;854:13248:78;;-1:-1:-1;;;;;;854:13248:78;;;;;;;-1:-1:-1;;;;;854:13248:78;3975:40:32;854:13248:78;;3975:40:32;854:13248:78;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;2303:62:32;;:::i;:::-;8846:12:78;;;:32;;;854:13248;;;;8995:38;854:13248;;;;;;;;;;;;;;;;;8995:38;854:13248;;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;;;8846:32;8862:16;8874:4;8862:16;;;8846:32;;854:13248;;;;;;;-1:-1:-1;;854:13248:78;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;854:13248:78;;;;5090:6:34;-1:-1:-1;;;;;854:13248:78;5081:4:34;5073:23;5069:145;;854:13248:78;;;811:66:48;854:13248:78;;;5069:145:34;854:13248:78;-1:-1:-1;;;5174:29:34;;;854:13248:78;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4667:6:34;854:13248:78;;4658:4:34;4650:23;;;:120;;;;854:13248:78;4633:251:34;;;2303:62:32;;:::i;:::-;854:13248:78;;;;;;;;6131:52:34;;;;;;;;;854:13248:78;;6131:52:34;;;854:13248:78;-1:-1:-1;6127:437:34;;854:13248:78;;;;;;1805:47:48;;;;6493:60:34;;;;854:13248:78;6493:60:34;6127:437;811:66:48;;;;;;;;6225:40:34;;;;6221:120;;1748:29:48;;;:34;1744:119;;-1:-1:-1;854:13248:78;;-1:-1:-1;;;;;;854:13248:78;;;;;;;;2407:36:48;-1:-1:-1;;2407:36:48;854:13248:78;;2458:15:48;:11;;4065:25:55;;854:13248:78;4107:55:55;4065:25;;;;;;;;;854:13248:78;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;4107:55:55;:::i;854:13248:78:-;-1:-1:-1;854:13248:78;;-1:-1:-1;4107:55:55;:::i;2454:148:48:-;6163:9;;;;;;;;6159:70;;854:13248:78;6159:70:48;-1:-1:-1;;;6199:19:48;;;1744:119;854:13248:78;;-1:-1:-1;;;1805:47:48;;;;;854:13248:78;;;1805:47:48;6221:120:34;854:13248:78;;-1:-1:-1;;;6292:34:34;;;;;854:13248:78;;;;6292:34:34;6131:52;;;;;;;;;;;;;;;;;:::i;:::-;;;854:13248:78;;;;;6131:52:34;;;;;;;;;4633:251;854:13248:78;;-1:-1:-1;;;4844:29:34;;854:13248:78;;4844:29:34;4650:120;854:13248:78;;;811:66:48;854:13248:78;;4728:42:34;;4650:120;;;854:13248:78;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;854:13248:78;;;;;;;;;;;;;3147:66:33;854:13248:78;;;;;;;;;4301:16:33;854:13248:78;;;;4724:16:33;;:34;;;;854:13248:78;4803:1:33;4788:16;:50;;;;854:13248:78;4853:13:33;:30;;;;854:13248:78;4849:91:33;;;-1:-1:-1;;854:13248:78;;4803:1:33;854:13248:78;;;;4977:67:33;;854:13248:78;;;;2787:20;854:13248;;2843:27;;854:13248;;6891:76:33;6959:1;6891:76;;;:::i;:::-;;;:::i;6959:1::-;6891:76;;:::i;:::-;854:13248:78;;;;;;;;;3034:2;4803:1:33;854:13248:78;3176:3;3155:24;854:13248;5064:101:33;;854:13248:78;5064:101:33;854:13248:78;;-1:-1:-1;;854:13248:78;;;;-1:-1:-1;854:13248:78;;5140:14:33;;854:13248:78;;5140:14:33;854:13248:78;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;4977:67:33;-1:-1:-1;;854:13248:78;;;;;4977:67:33;;;4849:91;854:13248:78;;-1:-1:-1;;;4906:23:33;;854:13248:78;;4906:23:33;4853:30;4870:13;;;4853:30;;;4788:50;4816:4;4808:25;:30;;-1:-1:-1;4788:50:33;;4724:34;;;-1:-1:-1;4724:34:33;;854:13248:78;;;;;;;-1:-1:-1;;854:13248:78;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;;854:13248:78;;;;;;;10535:10;854:13248;;;;;;;10566:20;;10562:81;;854:13248;;10789:11;854:13248;;;-1:-1:-1;;;10747:54:78;;;;;854:13248;;;;;;;;10747:54;;854:13248;;;;;;;10747:54;;;;;;;854:13248;10747:54;;;854:13248;;;;;;10854:20;854:13248;10854:20;;;10850:94;;10747:54;854:13248;;;;;;;;;;;;;;;;;;;;;;;;;;10535:10;854:13248;;;;;;;;;;;;10850:94;854:13248;;;10897:36;;;;;;;;854:13248;;;;;10897:36;10747:54;;;;;;;;;;;;;;;:::i;:::-;;;;;;854:13248;;;;;;;;;10562:81;854:13248;;;;10609:23;;;;;;;;854:13248;10609:23;854:13248;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2303:62:32;;:::i;:::-;-1:-1:-1;;;;;854:13248:78;5832:45;5840:19;;;5832:45;:::i;:::-;854:13248;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;1198:26;854:13248;;;;;;;;;;;;;;-1:-1:-1;;854:13248:78;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;854:13248:78;;;;;;:::o;:::-;;;;;;;;;;;;;;;;-1:-1:-1;854:13248:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;1741:2;;;854:13248;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;854:13248:78;;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;854:13248:78;;;;:::o;:::-;;;;;;-1:-1:-1;;854:13248:78;;;;;;;;-1:-1:-1;;;;;854:13248:78;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8253:382::-;-1:-1:-1;;;;;854:13248:78;;;-1:-1:-1;854:13248:78;;;8355:10;854:13248;;;;;;;8386:20;;8382:63;;-1:-1:-1;854:13248:78;8501:11;854:13248;;;-1:-1:-1;;;8459:54:78;;;;;854:13248;;;;;;;;8459:54;;854:13248;;;;;;;8459:54;;;;;;8253:382;-1:-1:-1;8455:174:78;;-1:-1:-1;8606:12:78;:::o;8455:174::-;8501:11;8563;:::o;8459:54::-;;;;;;;;;;;;;:::i;:::-;;;;;8382:63;8422:12;;-1:-1:-1;8422:12:78;:::o;854:13248::-;;;;:::o;:::-;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;854:13248:78;;;;;;;;;;;;;;;;;:::o;6112:683::-;854:13248;;-1:-1:-1;;;6206:33:78;;-1:-1:-1;;;;;854:13248:78;;;6206:33;;;;854:13248;;;6206:33;;854:13248;;;6206:4;:33;;-1:-1:-1;;6206:33:78;;;6112:683;-1:-1:-1;6202:587:78;;854:13248;;-1:-1:-1;854:13248:78;;;;;;-1:-1:-1;854:13248:78;1741:2;854:13248;6573:109;;854:13248;;-1:-1:-1;;;6755:23:78;;;;;854:13248;;;-1:-1:-1;6755:23:78;6573:109;6615:24;;1741:2;6615:24;:::o;6202:587::-;854:13248;;;-1:-1:-1;854:13248:78;;;;11422:19;854:13248;;;;11637:14;;854:13248;;;;;11655:5;854:13248;;;;;;;;;;;;;;;11628:68;854:13248;;;;;11628:68;;:::i;:::-;854:13248;11729:18;854:13248;11711:36;;11707:148;;6430:40;;;;;;;:::i;:::-;6202:587;6112:683::o;11707:148::-;854:13248;;;;;;;;;;;11770:74;;;;;;;;854:13248;;;;;;;;;;11770:74;854:13248;1741:2;;;;;-1:-1:-1;1741:2:78;;854:13248;-1:-1:-1;1741:2:78;854:13248;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;854:13248:78;;;;;6206:33;;;;;;;;;;;;;;;:::i;:::-;;;;;854:13248;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;1741:2;;;854:13248;;;;;;;;;;-1:-1:-1;;;;;854:13248:78;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;1741:2;;;;;;;;;;;854:13248;;;;;;;:::o;:::-;1741:2;;;854:13248;;;;;;;;3405:215:32;-1:-1:-1;;;;;854:13248:78;;;;3489:22:32;;3485:91;;-1:-1:-1;;;;;;;;;;;854:13248:78;;-1:-1:-1;;;;;;854:13248:78;;;;;;;;3975:40:32;-1:-1:-1;;3975:40:32;3405:215::o;3485:91::-;854:13248:78;;-1:-1:-1;;;3534:31:32;;3509:1;3534:31;;;854:13248:78;;;3534:31:32;2658:162;-1:-1:-1;;;;;;;;;;;854:13248:78;-1:-1:-1;;;;;854:13248:78;966:10:35;2717:23:32;2713:101;;2658:162::o;2713:101::-;854:13248:78;;-1:-1:-1;;;2763:40:32;;966:10:35;2763:40:32;;;854:13248:78;;;2763:40:32;12596:1283:78;12891:14;;;854:13248;;;;;1741:2;854:13248;;;;;;;;-1:-1:-1;12986:13:78;;12982:72;;1874:2;13222:38;;13218:96;;854:13248;;;;1741:2;;;;;;;854:13248;;;;;13709:17;;;854:13248;13697:43;;13693:107;;854:13248;;;;;;;;;;;;;;12596:1283;:::o;13693:107::-;12891:14;854:13248;-1:-1:-1;;;13763:26:78;;;;;13218:96;12891:14;854:13248;-1:-1:-1;;;13283:20:78;;;;;12982:72;12891:14;854:13248;-1:-1:-1;;;13022:21:78;;;;;7082:141:33;854:13248:78;3147:66:33;854:13248:78;;;;7148:18:33;7144:73;;7082:141::o;7144:73::-;854:13248:78;;-1:-1:-1;;;7189:17:33;;;;;4437:582:55;;4609:8;;-1:-1:-1;854:13248:78;;5690:21:55;:17;;5815:105;;;;;;5686:301;854:13248:78;;-1:-1:-1;;;5957:19:55;;;;;4605:408;854:13248:78;;4857:22:55;:49;;;4605:408;4853:119;;4985:17;;:::o;4853:119::-;854:13248:78;;-1:-1:-1;;;4933:24:55;;-1:-1:-1;;;;;854:13248:78;;;4933:24:55;;;854:13248:78;;;4933:24:55;4857:49;4883:18;;;:23;4857:49;","linkReferences":{},"immutableReferences":{"42267":[{"start":2697,"length":32},{"start":2919,"length":32}]}},"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","_getPythPriceExternal(address)":"36699994","batchGetPrices(address[])":"8add9bee","getPrice(address)":"41976e09","getPythContract()":"6d1fdf6f","getVersion()":"0d8e6e2c","initialize(address,address)":"485cc955","isPriceFresh(address)":"0af1a39f","maxConfidenceRatio()":"7d13ae2b","maxPriceAge()":"1584410a","oracle()":"7dc0d1d0","owner()":"8da5cb5b","priceFeeds(address)":"9dcb511a","proxiableUUID()":"52d1902d","pythContract()":"8a32ada0","removePriceFeed(address)":"fceb0024","renounceOwnership()":"715018a6","setMaxConfidenceRatio(uint256)":"9ed9f5fb","setMaxPriceAge(uint256)":"56447ce8","setPriceFeed(address,bytes32)":"adcb085a","setStablecoin(address,bool)":"1ccbf908","stablecoins(address)":"fa847836","transferOwnership(address)":"f2fde38b","upgradeToAndCall(address,bytes)":"4f1ef286","version()":"54fd4d50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"ConfidenceTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"}],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NoFeedConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceCalculationOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceScaleOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceScaleUnderflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxConfidenceRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxPriceAgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PriceFeedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"}],\"name\":\"PriceFeedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_getPythPriceExternal\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"batchGetPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPythContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pythContract_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isPriceFresh\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxConfidenceRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pythContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setMaxConfidenceRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"feedId\",\"type\":\"bytes32\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStablecoin\",\"type\":\"bool\"}],\"name\":\"setStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Upgradeable contract using UUPS pattern Key Features: - Confidence interval validation (rejects uncertain prices) - Automatic staleness check via getPriceNoOlderThan() - Handles dynamic exponents (Pyth uses price * 10^expo format) - Scales all prices to 18 decimals for consistency\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"_getPythPriceExternal(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"_0\":\"pythPrice The Pyth price struct\"}},\"batchGetPrices(address[])\":{\"params\":{\"tokens\":\"Array of token addresses\"},\"returns\":{\"prices\":\"Array of prices (scaled to 18 decimals)\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getPrice(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"price\":\"The price scaled to 18 decimals\"}},\"getPythContract()\":{\"returns\":{\"_0\":\"The Pyth contract address\"}},\"getVersion()\":{\"returns\":{\"_0\":\"Version string\"}},\"initialize(address,address)\":{\"params\":{\"_owner\":\"The contract owner\",\"pythContract_\":\"The Pyth oracle contract address\"}},\"isPriceFresh(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"_0\":\"true if the price is fresh\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"pythContract()\":{\"returns\":{\"_0\":\"The Pyth contract address\"}},\"removePriceFeed(address)\":{\"params\":{\"token\":\"The token address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setMaxConfidenceRatio(uint256)\":{\"params\":{\"bps\":\"Maximum confidence ratio in basis points (e.g., 500 = 5%)\"}},\"setMaxPriceAge(uint256)\":{\"params\":{\"seconds_\":\"Maximum age of price data in seconds\"}},\"setPriceFeed(address,bytes32)\":{\"params\":{\"feedId\":\"The Pyth price feed ID (bytes32)\",\"token\":\"The token address\"}},\"setStablecoin(address,bool)\":{\"params\":{\"isStablecoin\":\"True if token is a stablecoin\",\"token\":\"The token address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"Storage gap for future upgrades Reduced to 47 to account for new storage variables\"},\"maxConfidenceRatio\":{\"details\":\"Confidence ratio = (conf / price) * 10000\"}},\"title\":\"PythOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_getPythPriceExternal(address)\":{\"notice\":\"External wrapper for _getPythPrice (needed for try-catch)\"},\"batchGetPrices(address[])\":{\"notice\":\"Get prices for multiple tokens\"},\"getPrice(address)\":{\"notice\":\"Get the latest price for a token (scaled to 18 decimals)\"},\"getPythContract()\":{\"notice\":\"Get the Pyth contract address\"},\"getVersion()\":{\"notice\":\"Get the contract version\"},\"initialize(address,address)\":{\"notice\":\"Initialize the contract\"},\"isPriceFresh(address)\":{\"notice\":\"Check if a price is fresh (within maxPriceAge)\"},\"maxConfidenceRatio()\":{\"notice\":\"Maximum confidence ratio in basis points (default: 500 = 5%)\"},\"maxPriceAge()\":{\"notice\":\"Maximum age for price data in seconds (default: 60 seconds)\"},\"oracle()\":{\"notice\":\"Alias for getPythContract (compatibility)\"},\"priceFeeds(address)\":{\"notice\":\"Mapping of token address to Pyth price feed ID\"},\"pythContract()\":{\"notice\":\"Get the Pyth contract address (storage variable getter)\"},\"removePriceFeed(address)\":{\"notice\":\"Remove a price feed for a token\"},\"setMaxConfidenceRatio(uint256)\":{\"notice\":\"Set the maximum confidence ratio\"},\"setMaxPriceAge(uint256)\":{\"notice\":\"Set the maximum price age\"},\"setPriceFeed(address,bytes32)\":{\"notice\":\"Set a price feed for a token\"},\"setStablecoin(address,bool)\":{\"notice\":\"Register a token as a stablecoin (returns $1 if Pyth feed unavailable)\"},\"stablecoins(address)\":{\"notice\":\"Mapping of stablecoin addresses (returns $1 if Pyth feed unavailable)\"},\"version()\":{\"notice\":\"Contract version\"}},\"notice\":\"Wrapper for Pyth Network price feeds with validation and batch queries\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PythOracle.sol\":\"PythOracle\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@FCL/=lib/delegation-framework/lib/FCL/solidity/src/\",\":@SCL/=lib/delegation-framework/lib/SCL/src/\",\":@account-abstraction/=lib/delegation-framework/lib/account-abstraction/contracts/\",\":@bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/\",\":@delegation-framework/=lib/delegation-framework/src/\",\":@erc7579/=lib/erc7579-implementation/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":@solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/src/\",\":@solidity/=lib/delegation-framework/lib/SCL/src/\",\":FCL/=lib/delegation-framework/lib/FCL/solidity/src/\",\":FreshCryptoLib/=lib/delegation-framework/lib/FreshCryptoLib/solidity/src/\",\":SCL/=lib/delegation-framework/lib/SCL/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":delegation-framework/=lib/delegation-framework/\",\":ds-test/=lib/erc7579-implementation/node_modules/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc7579-implementation/=lib/erc7579-implementation/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":sentinellist/=lib/erc7579-implementation/node_modules/@rhinestone/sentinellist/src/\",\":solady/=lib/erc7579-implementation/node_modules/solady/src/\",\":solidity-bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/\",\":solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\\n\\npragma solidity >=0.4.11;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"lib/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"lib/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65\",\"license\":\"Apache-2.0\"},\"src/PythOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport \\\"./interfaces/IPythOracle.sol\\\";\\n\\n/**\\n * @title PythOracle\\n * @notice Wrapper for Pyth Network price feeds with validation and batch queries\\n * @dev Upgradeable contract using UUPS pattern\\n *\\n * Key Features:\\n * - Confidence interval validation (rejects uncertain prices)\\n * - Automatic staleness check via getPriceNoOlderThan()\\n * - Handles dynamic exponents (Pyth uses price * 10^expo format)\\n * - Scales all prices to 18 decimals for consistency\\n */\\ncontract PythOracle is\\n    Initializable,\\n    UUPSUpgradeable,\\n    OwnableUpgradeable,\\n    IPythOracle\\n{\\n    /// @notice Contract version\\n    string public constant version = \\\"1.0.0\\\";\\n\\n    /// @notice Pyth oracle contract address\\n    IPyth private _pythContract;\\n\\n    /// @notice Maximum age for price data in seconds (default: 60 seconds)\\n    uint256 public maxPriceAge;\\n\\n    /// @notice Maximum confidence ratio in basis points (default: 500 = 5%)\\n    /// @dev Confidence ratio = (conf / price) * 10000\\n    uint256 public maxConfidenceRatio;\\n\\n    /// @notice Mapping of token address to Pyth price feed ID\\n    mapping(address => bytes32) public priceFeeds;\\n\\n    /// @notice Mapping of stablecoin addresses (returns $1 if Pyth feed unavailable)\\n    mapping(address => bool) public stablecoins;\\n\\n    /// @notice Constant for 18 decimal scaling\\n    uint256 private constant DECIMALS_18 = 18;\\n\\n    /// @notice Maximum safe exponent for scaling (10^30 < type(uint256).max)\\n    uint256 private constant MAX_SCALE_EXPONENT = 30;\\n\\n    /// @notice Minimum confidence ratio in basis points (0.1% = 10 bps)\\n    uint256 private constant MIN_CONFIDENCE_RATIO = 10;\\n\\n    /// @notice Maximum confidence ratio in basis points (10% = 1000 bps)\\n    uint256 private constant MAX_CONFIDENCE_RATIO = 1000;\\n\\n    // Custom Errors\\n    error PriceScaleUnderflow();\\n    error PriceScaleOverflow();\\n    error PriceCalculationOverflow();\\n\\n    /**\\n     * @dev Storage gap for future upgrades\\n     * Reduced to 47 to account for new storage variables\\n     */\\n    uint256[47] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialize the contract\\n     * @param _owner The contract owner\\n     * @param pythContract_ The Pyth oracle contract address\\n     */\\n    function initialize(address _owner, address pythContract_) external initializer {\\n        require(_owner != address(0), \\\"Invalid owner\\\");\\n        require(pythContract_ != address(0), \\\"Invalid Pyth contract\\\");\\n\\n        __Ownable_init(_owner);\\n        __UUPSUpgradeable_init();\\n\\n        _pythContract = IPyth(pythContract_);\\n        maxPriceAge = 60; // 60 seconds default\\n        // HIGH-001 FIX: Reduced from 500 bps (5%) to 100 bps (1%) for better security\\n        maxConfidenceRatio = 100; // 1% default (industry standard)\\n    }\\n\\n    /**\\n     * @notice Get the contract version\\n     * @return Version string\\n     */\\n    function getVersion() external pure override returns (string memory) {\\n        return version;\\n    }\\n\\n    /**\\n     * @notice Set a price feed for a token\\n     * @param token The token address\\n     * @param feedId The Pyth price feed ID (bytes32)\\n     */\\n    function setPriceFeed(address token, bytes32 feedId) external override onlyOwner {\\n        require(token != address(0), \\\"Invalid token\\\");\\n        require(feedId != bytes32(0), \\\"Invalid feed ID\\\");\\n\\n        // HIGH-006 FIX: Validate feed ID works and returns reasonable price\\n        // Use 1 hour staleness to allow setting feeds even if recently deployed\\n        try _pythContract.getPriceNoOlderThan(feedId, 3600) returns (PythStructs.Price memory price) {\\n            require(price.price > 0, \\\"Invalid feed - zero price\\\");\\n\\n            // If replacing existing feed, sanity check new price vs old price\\n            if (priceFeeds[token] != bytes32(0)) {\\n                // Get old price for comparison\\n                try this.getPrice(token) returns (uint256 oldPrice) {\\n                    // Calculate new price in same format (18 decimals)\\n                    uint256 newPrice = _scaleToDecimals(price, 18);\\n\\n                    // Calculate percentage difference\\n                    uint256 priceDiff = oldPrice > newPrice ? oldPrice - newPrice : newPrice - oldPrice;\\n                    uint256 diffPercent = (priceDiff * 100) / oldPrice;\\n\\n                    // Require new price within 50% of old price (sanity check)\\n                    require(diffPercent <= 50, \\\"Price differs by >50%\\\");\\n                } catch {\\n                    // If old price fetch fails, allow the update\\n                    // This can happen if old feed is stale\\n                }\\n            }\\n        } catch {\\n            revert(\\\"Feed ID validation failed\\\");\\n        }\\n\\n        priceFeeds[token] = feedId;\\n        emit PriceFeedSet(token, feedId);\\n    }\\n\\n    /**\\n     * @notice Remove a price feed for a token\\n     * @param token The token address\\n     */\\n    function removePriceFeed(address token) external override onlyOwner {\\n        require(priceFeeds[token] != bytes32(0), \\\"No feed configured\\\");\\n\\n        delete priceFeeds[token];\\n        emit PriceFeedRemoved(token);\\n    }\\n\\n    /**\\n     * @notice Register a token as a stablecoin (returns $1 if Pyth feed unavailable)\\n     * @param token The token address\\n     * @param isStablecoin True if token is a stablecoin\\n     */\\n    function setStablecoin(address token, bool isStablecoin) external onlyOwner {\\n        require(token != address(0), \\\"Invalid token\\\");\\n        stablecoins[token] = isStablecoin;\\n    }\\n\\n    /**\\n     * @notice Get the latest price for a token (scaled to 18 decimals)\\n     * @param token The token address\\n     * @return price The price scaled to 18 decimals\\n     */\\n    function getPrice(address token) external view override returns (uint256 price) {\\n        try this._getPythPriceExternal(token) returns (PythStructs.Price memory pythPrice) {\\n            // Validate confidence\\n            _validateConfidence(pythPrice, token);\\n\\n            // Scale to 18 decimals\\n            price = _scaleToDecimals(pythPrice, DECIMALS_18);\\n        } catch {\\n            // If Pyth feed fails and token is a stablecoin, return $1\\n            if (stablecoins[token]) {\\n                return 10 ** DECIMALS_18; // $1 scaled to 18 decimals\\n            }\\n            // Otherwise, revert with original error\\n            revert NoFeedConfigured(token);\\n        }\\n    }\\n\\n    /**\\n     * @notice External wrapper for _getPythPrice (needed for try-catch)\\n     * @param token The token address\\n     * @return pythPrice The Pyth price struct\\n     */\\n    function _getPythPriceExternal(address token) external view returns (PythStructs.Price memory) {\\n        return _getPythPrice(token);\\n    }\\n\\n    /**\\n     * @notice Get prices for multiple tokens\\n     * @param tokens Array of token addresses\\n     * @return prices Array of prices (scaled to 18 decimals)\\n     */\\n    function batchGetPrices(address[] calldata tokens)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory prices)\\n    {\\n        prices = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            try this._getPythPriceExternal(tokens[i]) returns (PythStructs.Price memory pythPrice) {\\n                _validateConfidence(pythPrice, tokens[i]);\\n                prices[i] = _scaleToDecimals(pythPrice, DECIMALS_18);\\n            } catch {\\n                // If Pyth feed fails and token is a stablecoin, return $1\\n                if (stablecoins[tokens[i]]) {\\n                    prices[i] = 10 ** DECIMALS_18;\\n                } else {\\n                    revert NoFeedConfigured(tokens[i]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if a price is fresh (within maxPriceAge)\\n     * @param token The token address\\n     * @return true if the price is fresh\\n     */\\n    function isPriceFresh(address token) external view override returns (bool) {\\n        bytes32 feedId = priceFeeds[token];\\n        if (feedId == bytes32(0)) {\\n            return false;\\n        }\\n\\n        try _pythContract.getPriceNoOlderThan(feedId, maxPriceAge) returns (PythStructs.Price memory) {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the maximum price age\\n     * @param seconds_ Maximum age of price data in seconds\\n     */\\n    function setMaxPriceAge(uint256 seconds_) external override onlyOwner {\\n        require(seconds_ > 0 && seconds_ <= 3600, \\\"Invalid age\\\"); // Max 1 hour\\n        uint256 oldValue = maxPriceAge;\\n        maxPriceAge = seconds_;\\n        emit MaxPriceAgeUpdated(oldValue, seconds_);\\n    }\\n\\n    /**\\n     * @notice Set the maximum confidence ratio\\n     * @param bps Maximum confidence ratio in basis points (e.g., 500 = 5%)\\n     */\\n    function setMaxConfidenceRatio(uint256 bps) external override onlyOwner {\\n        // HIGH-001 FIX: Add minimum bound and reduce maximum\\n        require(bps >= MIN_CONFIDENCE_RATIO, \\\"Confidence ratio too low\\\");\\n        require(bps <= MAX_CONFIDENCE_RATIO, \\\"Confidence ratio too high\\\");\\n        uint256 oldValue = maxConfidenceRatio;\\n        maxConfidenceRatio = bps;\\n        emit MaxConfidenceRatioUpdated(oldValue, bps);\\n    }\\n\\n    /**\\n     * @notice Get the Pyth contract address\\n     * @return The Pyth contract address\\n     */\\n    function getPythContract() external view override returns (address) {\\n        return address(_pythContract);\\n    }\\n\\n    /**\\n     * @notice Get the Pyth contract address (storage variable getter)\\n     * @return The Pyth contract address\\n     */\\n    function pythContract() external view override returns (address) {\\n        return address(_pythContract);\\n    }\\n\\n    /**\\n     * @notice Alias for getPythContract (compatibility)\\n     */\\n    function oracle() external view override returns (address) {\\n        return address(_pythContract);\\n    }\\n\\n    /**\\n     * @notice Internal function to get Pyth price\\n     * @param token The token address\\n     * @return pythPrice The Pyth price struct\\n     */\\n    function _getPythPrice(address token) internal view returns (PythStructs.Price memory) {\\n        bytes32 feedId = priceFeeds[token];\\n        if (feedId == bytes32(0)) {\\n            revert NoFeedConfigured(token);\\n        }\\n\\n        // getPriceNoOlderThan reverts if price is stale\\n        PythStructs.Price memory pythPrice = _pythContract.getPriceNoOlderThan(feedId, maxPriceAge);\\n\\n        // Validate price is positive\\n        if (pythPrice.price <= 0) {\\n            revert InvalidPrice(token, pythPrice.price);\\n        }\\n\\n        return pythPrice;\\n    }\\n\\n    /**\\n     * @notice Validate confidence interval\\n     * @param pythPrice The Pyth price struct\\n     */\\n    function _validateConfidence(PythStructs.Price memory pythPrice, address /* token */) internal view {\\n        // CRITICAL-002 FIX: Defensive check for zero price\\n        // This should never trigger if _getPythPrice validates correctly,\\n        // but defensive programming prevents division by zero in critical path\\n        require(pythPrice.price > 0, \\\"Price must be positive\\\");\\n\\n        // Calculate confidence ratio: (conf / price) * 10000\\n        // Safe to divide now that we've validated price > 0\\n        uint256 confidenceRatio = (uint256(pythPrice.conf) * 10000) / uint256(uint64(pythPrice.price));\\n\\n        if (confidenceRatio > maxConfidenceRatio) {\\n            revert ConfidenceTooLow(pythPrice.conf, uint64(pythPrice.price), confidenceRatio);\\n        }\\n    }\\n\\n    /**\\n     * @notice Scale Pyth price to target decimals\\n     * @param pythPrice The Pyth price struct\\n     * @param targetDecimals Target decimal places (usually 18)\\n     * @return scaled The scaled price\\n     *\\n     * @dev Pyth price format: price * 10^expo\\n     * Example: price=200000000000, expo=-8 \\u2192 actual price = 2000.00\\n     * To scale to 18 decimals: multiply by 10^(18-(-8)) = 10^26? NO!\\n     *\\n     * Correct logic:\\n     * - Pyth gives: mantissa=200000000000, expo=-8\\n     * - Actual value: 200000000000 * 10^(-8) = 2000\\n     * - Target: 2000 * 10^18 = 2000000000000000000000\\n     * - Formula: mantissa * 10^(targetDecimals + expo)\\n     * - Check: 200000000000 * 10^(18 + (-8)) = 200000000000 * 10^10 \\u2705\\n     */\\n    function _scaleToDecimals(PythStructs.Price memory pythPrice, uint256 targetDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // Calculate scaling exponent: targetDecimals + expo (expo is negative usually)\\n        int256 scaleExpo = int256(targetDecimals) + int256(pythPrice.expo);\\n\\n        // Check for underflow (negative exponent after scaling)\\n        if (scaleExpo < 0) {\\n            revert PriceScaleUnderflow();\\n        }\\n\\n        // CRITICAL-001 FIX: Check maximum exponent to prevent overflow\\n        // 10^30 is safe, 10^77 is theoretical max, but we use conservative limit\\n        if (scaleExpo > int256(MAX_SCALE_EXPONENT)) {\\n            revert PriceScaleOverflow();\\n        }\\n\\n        // Convert price to uint256 (safe because we validated positive in _getPythPrice)\\n        uint256 priceUint = uint256(uint64(pythPrice.price));\\n        uint256 scaleFactor = 10 ** uint256(scaleExpo);\\n\\n        // CRITICAL-001 FIX: Check multiplication overflow before computing\\n        // Even with Solidity 0.8+, this is defensive programming for critical path\\n        if (priceUint > type(uint256).max / scaleFactor) {\\n            revert PriceCalculationOverflow();\\n        }\\n\\n        // Safe to multiply now\\n        return priceUint * scaleFactor;\\n    }\\n\\n    /**\\n     * @notice Authorize upgrade (UUPS requirement)\\n     * @param newImplementation The new implementation address\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x717b94bee581a94fbe49f1bdc88ab0031cc14e9f6a5918839538dcfee85aaf63\",\"license\":\"MIT\"},\"src/interfaces/IPythOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IPythOracle\\n * @notice Interface for PythOracle wrapper contract\\n */\\ninterface IPythOracle {\\n    // Events\\n    event PriceFeedSet(address indexed token, bytes32 indexed feedId);\\n    event PriceFeedRemoved(address indexed token);\\n    event MaxPriceAgeUpdated(uint256 oldValue, uint256 newValue);\\n    event MaxConfidenceRatioUpdated(uint256 oldValue, uint256 newValue);\\n\\n    // Errors\\n    error NoFeedConfigured(address token);\\n    error InvalidPrice(address token, int64 price);\\n    error ConfidenceTooLow(uint64 conf, uint64 price, uint256 ratio);\\n\\n    // Configuration\\n    function setPriceFeed(address token, bytes32 feedId) external;\\n    function removePriceFeed(address token) external;\\n    function setMaxPriceAge(uint256 seconds_) external;\\n    function setMaxConfidenceRatio(uint256 bps) external;\\n\\n    // Price queries\\n    function getPrice(address token) external view returns (uint256 price);\\n    function batchGetPrices(address[] calldata tokens) external view returns (uint256[] memory prices);\\n    function isPriceFresh(address token) external view returns (bool);\\n\\n    // Getters\\n    function getVersion() external pure returns (string memory);\\n    function getPythContract() external view returns (address);\\n    function oracle() external view returns (address);\\n    function pythContract() external view returns (address);\\n    function priceFeeds(address) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4059b66bdd20b817bcc047c2cb6723d2fc56d3eb5152325411b79847d36b14c0\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"type":"error","name":"AddressEmptyCode"},{"inputs":[{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"uint64","name":"price","type":"uint64"},{"internalType":"uint256","name":"ratio","type":"uint256"}],"type":"error","name":"ConfidenceTooLow"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"type":"error","name":"ERC1967InvalidImplementation"},{"inputs":[],"type":"error","name":"ERC1967NonPayable"},{"inputs":[],"type":"error","name":"FailedCall"},{"inputs":[],"type":"error","name":"InvalidInitialization"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"int64","name":"price","type":"int64"}],"type":"error","name":"InvalidPrice"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"type":"error","name":"NoFeedConfigured"},{"inputs":[],"type":"error","name":"NotInitializing"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"OwnableInvalidOwner"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"type":"error","name":"OwnableUnauthorizedAccount"},{"inputs":[],"type":"error","name":"PriceCalculationOverflow"},{"inputs":[],"type":"error","name":"PriceScaleOverflow"},{"inputs":[],"type":"error","name":"PriceScaleUnderflow"},{"inputs":[],"type":"error","name":"UUPSUnauthorizedCallContext"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"type":"error","name":"UUPSUnsupportedProxiableUUID"},{"inputs":[{"internalType":"uint64","name":"version","type":"uint64","indexed":false}],"type":"event","name":"Initialized","anonymous":false},{"inputs":[{"internalType":"uint256","name":"oldValue","type":"uint256","indexed":false},{"internalType":"uint256","name":"newValue","type":"uint256","indexed":false}],"type":"event","name":"MaxConfidenceRatioUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"oldValue","type":"uint256","indexed":false},{"internalType":"uint256","name":"newValue","type":"uint256","indexed":false}],"type":"event","name":"MaxPriceAgeUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"address","name":"token","type":"address","indexed":true}],"type":"event","name":"PriceFeedRemoved","anonymous":false},{"inputs":[{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"bytes32","name":"feedId","type":"bytes32","indexed":true}],"type":"event","name":"PriceFeedSet","anonymous":false},{"inputs":[{"internalType":"address","name":"implementation","type":"address","indexed":true}],"type":"event","name":"Upgraded","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"_getPythPriceExternal","outputs":[{"internalType":"struct PythStructs.Price","name":"","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"stateMutability":"view","type":"function","name":"batchGetPrices","outputs":[{"internalType":"uint256[]","name":"prices","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPythContract","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"getVersion","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"pythContract_","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"isPriceFresh","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxConfidenceRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"maxPriceAge","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"oracle","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"priceFeeds","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"pythContract","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"removePriceFeed"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceOwnership"},{"inputs":[{"internalType":"uint256","name":"bps","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setMaxConfidenceRatio"},{"inputs":[{"internalType":"uint256","name":"seconds_","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setMaxPriceAge"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bytes32","name":"feedId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"setPriceFeed"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bool","name":"isStablecoin","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setStablecoin"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"stablecoins","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"upgradeToAndCall"},{"inputs":[],"stateMutability":"view","type":"function","name":"version","outputs":[{"internalType":"string","name":"","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"_getPythPriceExternal(address)":{"params":{"token":"The token address"},"returns":{"_0":"pythPrice The Pyth price struct"}},"batchGetPrices(address[])":{"params":{"tokens":"Array of token addresses"},"returns":{"prices":"Array of prices (scaled to 18 decimals)"}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"getPrice(address)":{"params":{"token":"The token address"},"returns":{"price":"The price scaled to 18 decimals"}},"getPythContract()":{"returns":{"_0":"The Pyth contract address"}},"getVersion()":{"returns":{"_0":"Version string"}},"initialize(address,address)":{"params":{"_owner":"The contract owner","pythContract_":"The Pyth oracle contract address"}},"isPriceFresh(address)":{"params":{"token":"The token address"},"returns":{"_0":"true if the price is fresh"}},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"pythContract()":{"returns":{"_0":"The Pyth contract address"}},"removePriceFeed(address)":{"params":{"token":"The token address"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setMaxConfidenceRatio(uint256)":{"params":{"bps":"Maximum confidence ratio in basis points (e.g., 500 = 5%)"}},"setMaxPriceAge(uint256)":{"params":{"seconds_":"Maximum age of price data in seconds"}},"setPriceFeed(address,bytes32)":{"params":{"feedId":"The Pyth price feed ID (bytes32)","token":"The token address"}},"setStablecoin(address,bool)":{"params":{"isStablecoin":"True if token is a stablecoin","token":"The token address"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"userdoc":{"kind":"user","methods":{"_getPythPriceExternal(address)":{"notice":"External wrapper for _getPythPrice (needed for try-catch)"},"batchGetPrices(address[])":{"notice":"Get prices for multiple tokens"},"getPrice(address)":{"notice":"Get the latest price for a token (scaled to 18 decimals)"},"getPythContract()":{"notice":"Get the Pyth contract address"},"getVersion()":{"notice":"Get the contract version"},"initialize(address,address)":{"notice":"Initialize the contract"},"isPriceFresh(address)":{"notice":"Check if a price is fresh (within maxPriceAge)"},"maxConfidenceRatio()":{"notice":"Maximum confidence ratio in basis points (default: 500 = 5%)"},"maxPriceAge()":{"notice":"Maximum age for price data in seconds (default: 60 seconds)"},"oracle()":{"notice":"Alias for getPythContract (compatibility)"},"priceFeeds(address)":{"notice":"Mapping of token address to Pyth price feed ID"},"pythContract()":{"notice":"Get the Pyth contract address (storage variable getter)"},"removePriceFeed(address)":{"notice":"Remove a price feed for a token"},"setMaxConfidenceRatio(uint256)":{"notice":"Set the maximum confidence ratio"},"setMaxPriceAge(uint256)":{"notice":"Set the maximum price age"},"setPriceFeed(address,bytes32)":{"notice":"Set a price feed for a token"},"setStablecoin(address,bool)":{"notice":"Register a token as a stablecoin (returns $1 if Pyth feed unavailable)"},"stablecoins(address)":{"notice":"Mapping of stablecoin addresses (returns $1 if Pyth feed unavailable)"},"version()":{"notice":"Contract version"}},"version":1}},"settings":{"remappings":["@FCL/=lib/delegation-framework/lib/FCL/solidity/src/","@SCL/=lib/delegation-framework/lib/SCL/src/","@account-abstraction/=lib/delegation-framework/lib/account-abstraction/contracts/","@bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/","@delegation-framework/=lib/delegation-framework/src/","@erc7579/=lib/erc7579-implementation/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/","@solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/src/","@solidity/=lib/delegation-framework/lib/SCL/src/","FCL/=lib/delegation-framework/lib/FCL/solidity/src/","FreshCryptoLib/=lib/delegation-framework/lib/FreshCryptoLib/solidity/src/","SCL/=lib/delegation-framework/lib/SCL/","account-abstraction/=lib/account-abstraction/contracts/","delegation-framework/=lib/delegation-framework/","ds-test/=lib/erc7579-implementation/node_modules/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc7579-implementation/=lib/erc7579-implementation/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","pyth-sdk-solidity/=lib/pyth-sdk-solidity/","sentinellist/=lib/erc7579-implementation/node_modules/@rhinestone/sentinellist/src/","solady/=lib/erc7579-implementation/node_modules/solady/src/","solidity-bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/","solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/PythOracle.sol":"PythOracle"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"keccak256":"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"keccak256":"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"keccak256":"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.22;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"keccak256":"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"keccak256":"0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\n\npragma solidity >=0.4.11;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"keccak256":"0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"keccak256":"0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.21;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"keccak256":"0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                revert(add(returndata, 0x20), mload(returndata))\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"keccak256":"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"keccak256":"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n","license":"MIT"},"lib/pyth-sdk-solidity/IPyth.sol":{"keccak256":"0x949c65c65fea0578c09a6fc068e09ed1165adede2c835984cefcb25d76de1de2","urls":[],"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\n\n    /// @notice Returns the price and confidence interval.\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\n    /// @dev Reverts if the EMA price is not available.\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}\n","license":"Apache-2.0"},"lib/pyth-sdk-solidity/IPythEvents.sol":{"keccak256":"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320","urls":[],"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when a batch price update is processed successfully.\n    /// @param chainId ID of the source chain that the batch price update comes from.\n    /// @param sequenceNumber Sequence number of the batch price update.\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\n}\n","license":"Apache-2.0"},"lib/pyth-sdk-solidity/PythStructs.sol":{"keccak256":"0x95ff0a6d64517348ef604b8bcf246b561a9445d7e607b8f48491c617cfda9b65","urls":[],"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n}\n","license":"Apache-2.0"},"src/PythOracle.sol":{"keccak256":"0x717b94bee581a94fbe49f1bdc88ab0031cc14e9f6a5918839538dcfee85aaf63","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\nimport \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\";\nimport \"./interfaces/IPythOracle.sol\";\n\n/**\n * @title PythOracle\n * @notice Wrapper for Pyth Network price feeds with validation and batch queries\n * @dev Upgradeable contract using UUPS pattern\n *\n * Key Features:\n * - Confidence interval validation (rejects uncertain prices)\n * - Automatic staleness check via getPriceNoOlderThan()\n * - Handles dynamic exponents (Pyth uses price * 10^expo format)\n * - Scales all prices to 18 decimals for consistency\n */\ncontract PythOracle is\n    Initializable,\n    UUPSUpgradeable,\n    OwnableUpgradeable,\n    IPythOracle\n{\n    /// @notice Contract version\n    string public constant version = \"1.0.0\";\n\n    /// @notice Pyth oracle contract address\n    IPyth private _pythContract;\n\n    /// @notice Maximum age for price data in seconds (default: 60 seconds)\n    uint256 public maxPriceAge;\n\n    /// @notice Maximum confidence ratio in basis points (default: 500 = 5%)\n    /// @dev Confidence ratio = (conf / price) * 10000\n    uint256 public maxConfidenceRatio;\n\n    /// @notice Mapping of token address to Pyth price feed ID\n    mapping(address => bytes32) public priceFeeds;\n\n    /// @notice Mapping of stablecoin addresses (returns $1 if Pyth feed unavailable)\n    mapping(address => bool) public stablecoins;\n\n    /// @notice Constant for 18 decimal scaling\n    uint256 private constant DECIMALS_18 = 18;\n\n    /// @notice Maximum safe exponent for scaling (10^30 < type(uint256).max)\n    uint256 private constant MAX_SCALE_EXPONENT = 30;\n\n    /// @notice Minimum confidence ratio in basis points (0.1% = 10 bps)\n    uint256 private constant MIN_CONFIDENCE_RATIO = 10;\n\n    /// @notice Maximum confidence ratio in basis points (10% = 1000 bps)\n    uint256 private constant MAX_CONFIDENCE_RATIO = 1000;\n\n    // Custom Errors\n    error PriceScaleUnderflow();\n    error PriceScaleOverflow();\n    error PriceCalculationOverflow();\n\n    /**\n     * @dev Storage gap for future upgrades\n     * Reduced to 47 to account for new storage variables\n     */\n    uint256[47] private __gap;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Initialize the contract\n     * @param _owner The contract owner\n     * @param pythContract_ The Pyth oracle contract address\n     */\n    function initialize(address _owner, address pythContract_) external initializer {\n        require(_owner != address(0), \"Invalid owner\");\n        require(pythContract_ != address(0), \"Invalid Pyth contract\");\n\n        __Ownable_init(_owner);\n        __UUPSUpgradeable_init();\n\n        _pythContract = IPyth(pythContract_);\n        maxPriceAge = 60; // 60 seconds default\n        // HIGH-001 FIX: Reduced from 500 bps (5%) to 100 bps (1%) for better security\n        maxConfidenceRatio = 100; // 1% default (industry standard)\n    }\n\n    /**\n     * @notice Get the contract version\n     * @return Version string\n     */\n    function getVersion() external pure override returns (string memory) {\n        return version;\n    }\n\n    /**\n     * @notice Set a price feed for a token\n     * @param token The token address\n     * @param feedId The Pyth price feed ID (bytes32)\n     */\n    function setPriceFeed(address token, bytes32 feedId) external override onlyOwner {\n        require(token != address(0), \"Invalid token\");\n        require(feedId != bytes32(0), \"Invalid feed ID\");\n\n        // HIGH-006 FIX: Validate feed ID works and returns reasonable price\n        // Use 1 hour staleness to allow setting feeds even if recently deployed\n        try _pythContract.getPriceNoOlderThan(feedId, 3600) returns (PythStructs.Price memory price) {\n            require(price.price > 0, \"Invalid feed - zero price\");\n\n            // If replacing existing feed, sanity check new price vs old price\n            if (priceFeeds[token] != bytes32(0)) {\n                // Get old price for comparison\n                try this.getPrice(token) returns (uint256 oldPrice) {\n                    // Calculate new price in same format (18 decimals)\n                    uint256 newPrice = _scaleToDecimals(price, 18);\n\n                    // Calculate percentage difference\n                    uint256 priceDiff = oldPrice > newPrice ? oldPrice - newPrice : newPrice - oldPrice;\n                    uint256 diffPercent = (priceDiff * 100) / oldPrice;\n\n                    // Require new price within 50% of old price (sanity check)\n                    require(diffPercent <= 50, \"Price differs by >50%\");\n                } catch {\n                    // If old price fetch fails, allow the update\n                    // This can happen if old feed is stale\n                }\n            }\n        } catch {\n            revert(\"Feed ID validation failed\");\n        }\n\n        priceFeeds[token] = feedId;\n        emit PriceFeedSet(token, feedId);\n    }\n\n    /**\n     * @notice Remove a price feed for a token\n     * @param token The token address\n     */\n    function removePriceFeed(address token) external override onlyOwner {\n        require(priceFeeds[token] != bytes32(0), \"No feed configured\");\n\n        delete priceFeeds[token];\n        emit PriceFeedRemoved(token);\n    }\n\n    /**\n     * @notice Register a token as a stablecoin (returns $1 if Pyth feed unavailable)\n     * @param token The token address\n     * @param isStablecoin True if token is a stablecoin\n     */\n    function setStablecoin(address token, bool isStablecoin) external onlyOwner {\n        require(token != address(0), \"Invalid token\");\n        stablecoins[token] = isStablecoin;\n    }\n\n    /**\n     * @notice Get the latest price for a token (scaled to 18 decimals)\n     * @param token The token address\n     * @return price The price scaled to 18 decimals\n     */\n    function getPrice(address token) external view override returns (uint256 price) {\n        try this._getPythPriceExternal(token) returns (PythStructs.Price memory pythPrice) {\n            // Validate confidence\n            _validateConfidence(pythPrice, token);\n\n            // Scale to 18 decimals\n            price = _scaleToDecimals(pythPrice, DECIMALS_18);\n        } catch {\n            // If Pyth feed fails and token is a stablecoin, return $1\n            if (stablecoins[token]) {\n                return 10 ** DECIMALS_18; // $1 scaled to 18 decimals\n            }\n            // Otherwise, revert with original error\n            revert NoFeedConfigured(token);\n        }\n    }\n\n    /**\n     * @notice External wrapper for _getPythPrice (needed for try-catch)\n     * @param token The token address\n     * @return pythPrice The Pyth price struct\n     */\n    function _getPythPriceExternal(address token) external view returns (PythStructs.Price memory) {\n        return _getPythPrice(token);\n    }\n\n    /**\n     * @notice Get prices for multiple tokens\n     * @param tokens Array of token addresses\n     * @return prices Array of prices (scaled to 18 decimals)\n     */\n    function batchGetPrices(address[] calldata tokens)\n        external\n        view\n        override\n        returns (uint256[] memory prices)\n    {\n        prices = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            try this._getPythPriceExternal(tokens[i]) returns (PythStructs.Price memory pythPrice) {\n                _validateConfidence(pythPrice, tokens[i]);\n                prices[i] = _scaleToDecimals(pythPrice, DECIMALS_18);\n            } catch {\n                // If Pyth feed fails and token is a stablecoin, return $1\n                if (stablecoins[tokens[i]]) {\n                    prices[i] = 10 ** DECIMALS_18;\n                } else {\n                    revert NoFeedConfigured(tokens[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Check if a price is fresh (within maxPriceAge)\n     * @param token The token address\n     * @return true if the price is fresh\n     */\n    function isPriceFresh(address token) external view override returns (bool) {\n        bytes32 feedId = priceFeeds[token];\n        if (feedId == bytes32(0)) {\n            return false;\n        }\n\n        try _pythContract.getPriceNoOlderThan(feedId, maxPriceAge) returns (PythStructs.Price memory) {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * @notice Set the maximum price age\n     * @param seconds_ Maximum age of price data in seconds\n     */\n    function setMaxPriceAge(uint256 seconds_) external override onlyOwner {\n        require(seconds_ > 0 && seconds_ <= 3600, \"Invalid age\"); // Max 1 hour\n        uint256 oldValue = maxPriceAge;\n        maxPriceAge = seconds_;\n        emit MaxPriceAgeUpdated(oldValue, seconds_);\n    }\n\n    /**\n     * @notice Set the maximum confidence ratio\n     * @param bps Maximum confidence ratio in basis points (e.g., 500 = 5%)\n     */\n    function setMaxConfidenceRatio(uint256 bps) external override onlyOwner {\n        // HIGH-001 FIX: Add minimum bound and reduce maximum\n        require(bps >= MIN_CONFIDENCE_RATIO, \"Confidence ratio too low\");\n        require(bps <= MAX_CONFIDENCE_RATIO, \"Confidence ratio too high\");\n        uint256 oldValue = maxConfidenceRatio;\n        maxConfidenceRatio = bps;\n        emit MaxConfidenceRatioUpdated(oldValue, bps);\n    }\n\n    /**\n     * @notice Get the Pyth contract address\n     * @return The Pyth contract address\n     */\n    function getPythContract() external view override returns (address) {\n        return address(_pythContract);\n    }\n\n    /**\n     * @notice Get the Pyth contract address (storage variable getter)\n     * @return The Pyth contract address\n     */\n    function pythContract() external view override returns (address) {\n        return address(_pythContract);\n    }\n\n    /**\n     * @notice Alias for getPythContract (compatibility)\n     */\n    function oracle() external view override returns (address) {\n        return address(_pythContract);\n    }\n\n    /**\n     * @notice Internal function to get Pyth price\n     * @param token The token address\n     * @return pythPrice The Pyth price struct\n     */\n    function _getPythPrice(address token) internal view returns (PythStructs.Price memory) {\n        bytes32 feedId = priceFeeds[token];\n        if (feedId == bytes32(0)) {\n            revert NoFeedConfigured(token);\n        }\n\n        // getPriceNoOlderThan reverts if price is stale\n        PythStructs.Price memory pythPrice = _pythContract.getPriceNoOlderThan(feedId, maxPriceAge);\n\n        // Validate price is positive\n        if (pythPrice.price <= 0) {\n            revert InvalidPrice(token, pythPrice.price);\n        }\n\n        return pythPrice;\n    }\n\n    /**\n     * @notice Validate confidence interval\n     * @param pythPrice The Pyth price struct\n     */\n    function _validateConfidence(PythStructs.Price memory pythPrice, address /* token */) internal view {\n        // CRITICAL-002 FIX: Defensive check for zero price\n        // This should never trigger if _getPythPrice validates correctly,\n        // but defensive programming prevents division by zero in critical path\n        require(pythPrice.price > 0, \"Price must be positive\");\n\n        // Calculate confidence ratio: (conf / price) * 10000\n        // Safe to divide now that we've validated price > 0\n        uint256 confidenceRatio = (uint256(pythPrice.conf) * 10000) / uint256(uint64(pythPrice.price));\n\n        if (confidenceRatio > maxConfidenceRatio) {\n            revert ConfidenceTooLow(pythPrice.conf, uint64(pythPrice.price), confidenceRatio);\n        }\n    }\n\n    /**\n     * @notice Scale Pyth price to target decimals\n     * @param pythPrice The Pyth price struct\n     * @param targetDecimals Target decimal places (usually 18)\n     * @return scaled The scaled price\n     *\n     * @dev Pyth price format: price * 10^expo\n     * Example: price=200000000000, expo=-8 → actual price = 2000.00\n     * To scale to 18 decimals: multiply by 10^(18-(-8)) = 10^26? NO!\n     *\n     * Correct logic:\n     * - Pyth gives: mantissa=200000000000, expo=-8\n     * - Actual value: 200000000000 * 10^(-8) = 2000\n     * - Target: 2000 * 10^18 = 2000000000000000000000\n     * - Formula: mantissa * 10^(targetDecimals + expo)\n     * - Check: 200000000000 * 10^(18 + (-8)) = 200000000000 * 10^10 ✅\n     */\n    function _scaleToDecimals(PythStructs.Price memory pythPrice, uint256 targetDecimals)\n        internal\n        pure\n        returns (uint256)\n    {\n        // Calculate scaling exponent: targetDecimals + expo (expo is negative usually)\n        int256 scaleExpo = int256(targetDecimals) + int256(pythPrice.expo);\n\n        // Check for underflow (negative exponent after scaling)\n        if (scaleExpo < 0) {\n            revert PriceScaleUnderflow();\n        }\n\n        // CRITICAL-001 FIX: Check maximum exponent to prevent overflow\n        // 10^30 is safe, 10^77 is theoretical max, but we use conservative limit\n        if (scaleExpo > int256(MAX_SCALE_EXPONENT)) {\n            revert PriceScaleOverflow();\n        }\n\n        // Convert price to uint256 (safe because we validated positive in _getPythPrice)\n        uint256 priceUint = uint256(uint64(pythPrice.price));\n        uint256 scaleFactor = 10 ** uint256(scaleExpo);\n\n        // CRITICAL-001 FIX: Check multiplication overflow before computing\n        // Even with Solidity 0.8+, this is defensive programming for critical path\n        if (priceUint > type(uint256).max / scaleFactor) {\n            revert PriceCalculationOverflow();\n        }\n\n        // Safe to multiply now\n        return priceUint * scaleFactor;\n    }\n\n    /**\n     * @notice Authorize upgrade (UUPS requirement)\n     * @param newImplementation The new implementation address\n     */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n}\n","license":"MIT"},"src/interfaces/IPythOracle.sol":{"keccak256":"0x4059b66bdd20b817bcc047c2cb6723d2fc56d3eb5152325411b79847d36b14c0","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/**\n * @title IPythOracle\n * @notice Interface for PythOracle wrapper contract\n */\ninterface IPythOracle {\n    // Events\n    event PriceFeedSet(address indexed token, bytes32 indexed feedId);\n    event PriceFeedRemoved(address indexed token);\n    event MaxPriceAgeUpdated(uint256 oldValue, uint256 newValue);\n    event MaxConfidenceRatioUpdated(uint256 oldValue, uint256 newValue);\n\n    // Errors\n    error NoFeedConfigured(address token);\n    error InvalidPrice(address token, int64 price);\n    error ConfidenceTooLow(uint64 conf, uint64 price, uint256 ratio);\n\n    // Configuration\n    function setPriceFeed(address token, bytes32 feedId) external;\n    function removePriceFeed(address token) external;\n    function setMaxPriceAge(uint256 seconds_) external;\n    function setMaxConfidenceRatio(uint256 bps) external;\n\n    // Price queries\n    function getPrice(address token) external view returns (uint256 price);\n    function batchGetPrices(address[] calldata tokens) external view returns (uint256[] memory prices);\n    function isPriceFresh(address token) external view returns (bool);\n\n    // Getters\n    function getVersion() external pure returns (string memory);\n    function getPythContract() external view returns (address);\n    function oracle() external view returns (address);\n    function pythContract() external view returns (address);\n    function priceFeeds(address) external view returns (bytes32);\n}\n","license":"MIT"}},"version":1},"id":78}