{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"UPGRADE_INTERFACE_VERSION","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"approvedDEXs","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"batchSetDEXApproval","inputs":[{"name":"dexs","type":"address[]","internalType":"address[]"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"config","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IRebalancerConfig"}],"stateMutability":"view"},{"type":"function","name":"delegationManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IDelegationManager"}],"stateMutability":"view"},{"type":"function","name":"getPortfolioValue","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"strategyId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"valueUSD","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getVersion","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"pure"},{"type":"function","name":"initialize","inputs":[{"name":"_owner","type":"address","internalType":"address"},{"name":"_delegationManager","type":"address","internalType":"address"},{"name":"_registry","type":"address","internalType":"address"},{"name":"_oracle","type":"address","internalType":"address"},{"name":"_uniswapHelper","type":"address","internalType":"address"},{"name":"_config","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"oracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IPythOracle"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"paused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"proxiableUUID","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"rebalance","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"strategyId","type":"uint256","internalType":"uint256"},{"name":"tokensIn","type":"address[]","internalType":"address[]"},{"name":"swapTargets","type":"address[]","internalType":"address[]"},{"name":"swapCallDatas","type":"bytes[]","internalType":"bytes[]"},{"name":"minOutputAmounts","type":"uint256[]","internalType":"uint256[]"},{"name":"nativeValues","type":"uint256[]","internalType":"uint256[]"},{"name":"permissionContexts","type":"bytes[]","internalType":"bytes[]"},{"name":"modes","type":"bytes32[]","internalType":"ModeCode[]"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"registry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract StrategyRegistry"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDEXApproval","inputs":[{"name":"dex","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setDelegationManager","inputs":[{"name":"_newDelegationManager","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"shouldRebalance","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"strategyId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"isShouldRebalance","type":"bool","internalType":"bool"},{"name":"drift","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"testDelegationApproval","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"permissionContext","type":"bytes","internalType":"bytes"},{"name":"mode","type":"bytes32","internalType":"ModeCode"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"testDelegationNoOp","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"permissionContext","type":"bytes","internalType":"bytes"},{"name":"mode","type":"bytes32","internalType":"ModeCode"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"testDelegationSingleSwap","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"tokenIn","type":"address","internalType":"address"},{"name":"swapTarget","type":"address","internalType":"address"},{"name":"swapCallData","type":"bytes","internalType":"bytes"},{"name":"nativeValue","type":"uint256","internalType":"uint256"},{"name":"permissionContext","type":"bytes","internalType":"bytes"},{"name":"mode","type":"bytes32","internalType":"ModeCode"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"testDelegationSwapOnly","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"swapTarget","type":"address","internalType":"address"},{"name":"swapCallData","type":"bytes","internalType":"bytes"},{"name":"nativeValue","type":"uint256","internalType":"uint256"},{"name":"permissionContext","type":"bytes","internalType":"bytes"},{"name":"mode","type":"bytes32","internalType":"ModeCode"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"testDelegationTransfer","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"permissionContext","type":"bytes","internalType":"bytes"},{"name":"mode","type":"bytes32","internalType":"ModeCode"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"testStrategyOwnership","inputs":[{"name":"userAccount","type":"address","internalType":"address"},{"name":"strategyId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"isValid","type":"bool","internalType":"bool"},{"name":"strategyOwner","type":"address","internalType":"address"},{"name":"delegatorOwner","type":"address","internalType":"address"},{"name":"error","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"uniswapHelper","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IUniswapHelper"}],"stateMutability":"view"},{"type":"function","name":"unpause","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeToAndCall","inputs":[{"name":"newImplementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"event","name":"DEXApprovalUpdated","inputs":[{"name":"dex","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"DebugAfterDelegationCall","inputs":[{"name":"driftBefore","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"driftAfter","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"valueBefore","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"valueAfter","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"DebugBeforeDelegationCall","inputs":[{"name":"permissionContextsLength","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"modesLength","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"executionLength","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"DebugDeleGatorValidated","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"delegatorOwner","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DebugDriftCalculated","inputs":[{"name":"drift","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"maxDrift","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"portfolioValue","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"DebugRebalanceStarted","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"strategyId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"sender","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DebugStrategyFetched","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"strategyId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"isActive","type":"bool","indexed":false,"internalType":"bool"},{"name":"owner","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DebugSwapValidationPassed","inputs":[{"name":"swapCount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"DebugTestDelegationApproval","inputs":[{"name":"success","type":"bool","indexed":false,"internalType":"bool"},{"name":"message","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"DebugTestDelegationNoOp","inputs":[{"name":"success","type":"bool","indexed":false,"internalType":"bool"},{"name":"message","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"DebugTestDelegationSingleSwap","inputs":[{"name":"success","type":"bool","indexed":false,"internalType":"bool"},{"name":"message","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"DebugTestDelegationSwapOnly","inputs":[{"name":"success","type":"bool","indexed":false,"internalType":"bool"},{"name":"message","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"DebugTestDelegationTransfer","inputs":[{"name":"success","type":"bool","indexed":false,"internalType":"bool"},{"name":"message","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"DebugTestStrategyOwnership","inputs":[{"name":"isValid","type":"bool","indexed":false,"internalType":"bool"},{"name":"strategyOwner","type":"address","indexed":false,"internalType":"address"},{"name":"delegatorOwner","type":"address","indexed":false,"internalType":"address"},{"name":"error","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"EmergencyPaused","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"EmergencyUnpaused","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RebalanceExecuted","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"strategyId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"timestamp","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"drift","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"gasReimbursed","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RebalanceFailed","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"strategyId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"reason","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"SwapExecuted","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"tokenIn","type":"address","indexed":false,"internalType":"address"},{"name":"tokenOut","type":"address","indexed":false,"internalType":"address"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"BalanceValidationFailed","inputs":[]},{"type":"error","name":"ContractPaused","inputs":[]},{"type":"error","name":"DriftBelowThreshold","inputs":[]},{"type":"error","name":"ERC1967InvalidImplementation","inputs":[{"name":"implementation","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967NonPayable","inputs":[]},{"type":"error","name":"FailedCall","inputs":[]},{"type":"error","name":"InsufficientSlippageProtection","inputs":[]},{"type":"error","name":"InvalidDeleGatorOwner","inputs":[]},{"type":"error","name":"InvalidDelegation","inputs":[]},{"type":"error","name":"InvalidInitialization","inputs":[]},{"type":"error","name":"NotADeleGator","inputs":[]},{"type":"error","name":"NotInitializing","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"RebalanceExecutionFailed","inputs":[]},{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]},{"type":"error","name":"StrategyNotActive","inputs":[]},{"type":"error","name":"SwapsDidNotImproveAllocation","inputs":[]},{"type":"error","name":"TooSoonToRebalance","inputs":[]},{"type":"error","name":"UUPSUnauthorizedCallContext","inputs":[]},{"type":"error","name":"UUPSUnsupportedProxiableUUID","inputs":[{"name":"slot","type":"bytes32","internalType":"bytes32"}]},{"type":"error","name":"UnapprovedDEX","inputs":[{"name":"dex","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x60a08060405234620000d157306080527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c16620000c257506001600160401b036002600160401b0319828216016200007c575b60405161378b9081620000d68239608051818181611a120152611acb0152f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f80806200005c565b63f92ee8a960e01b8152600490fd5b5f80fdfe61024080604052600436101561001d575b50361561001b575f80fd5b005b5f6080525f3560e01c9081630d8e6e2c14611eb25750806318069a9c14611e255780631a8d0de214611dd65780632f26c51214611cf15780633f4ba83a14611ca85780634125839814611c805780634f1ef28614611a7c57806352d1902d14611a005780635a7fbe53146119b95780635c975abb146119975780636bcff91a14611962578063715018a6146118fb57806379502c55146118d357806379620965146118965780637b1039991461186e5780637dc0d1d0146118465780638456cb59146117fa5780638da5cb5b146117c65780639760434a14611768578063a3a401971461170d578063ad3cb1cc146116c8578063b0a8b0f41461067a578063b8282a6b14610609578063cc2a9a5b146102de578063cf0058ca146102af578063d48b4a4a14610250578063ea4d3c9b14610225578063f0928866146101a15763f2fde38b1461016c575f610010565b3461019b57602036600319011261019b57610195610188611f4c565b6101906134d9565b613468565b60805180f35b60805180fd5b3461019b5760e036600319011261019b576101ba611f4c565b506101c3611f62565b6101cb611f78565b6001600160401b039060643582811161019b576101ec9036906004016120d2565b9060a43593841161019b5760209461020b61021b9536906004016120d2565b93909260c4359560843593613268565b6040519015158152f35b3461019b5760805136600319011261019b57608051546040516001600160a01b039091168152602090f35b3461019b57604036600319011261019b576102ab61027861026f611f4c565b602435906130ae565b9093916040519485941515855260018060a01b038092166020860152166040840152608060608401526080830190611f27565b0390f35b3461019b57604036600319011261019b5760206102d66102cd611f4c565b60243590612fc2565b604051908152f35b3461019b5760c036600319011261019b576102f7611f4c565b6102ff611f62565b90610308611f78565b6001600160a01b03929060649081358581169081900361060557608435908682168092036106055760a43593878516809503610605577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009687549860ff8a60401c1615976001600160401b038b169a8b15806105fe575b6001809d1490816105f4575b1590816105eb575b506105d95767ffffffffffffffff1981168c178b55896105ba575b5081831615610586578116956103c5871515612141565b1691821561055157831561051e5784156104e35786156104b057506103f4906103ec613671565b610190613671565b6103fc613671565b610404613671565b61040c613671565b875f80516020613736833981519152556bffffffffffffffffffffffff60a01b93846080515416176080515583885416178755826002541617600255816003541617600355600454161760045560ff196006541660065561046d5760805180f35b805468ff0000000000000000191690556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a18080610195565b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420636f6e66696760901b6044820152fd5b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103ab734b9bbb0b8103432b63832b960511b6044820152fd5b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c6964206f7261636c6560901b6044820152fd5b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420726567697374727960801b6044820152fd5b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b60448201528490fd5b68ffffffffffffffffff191668010000000000000001178a558b6103ae565b60405163f92ee8a960e01b8152600490fd5b9050158d610393565b303b15915061038b565b508961037f565b5f80fd5b3461019b5760c036600319011261019b57610622611f4c565b5061062b611f62565b6001600160401b0360443581811161019b5761064b9036906004016120d2565b9260843592831161019b5760209361066a61021b9436906004016120d2565b92909160a4359460643592612e60565b6101203660031901126106055761068f611f4c565b610200526044356001600160401b038111610605576106b2903690600401611f9d565b906064356001600160401b038111610605576106d2903690600401611f9d565b90916084356001600160401b038111610605576106f3903690600401611f9d565b610220529060a4356001600160401b03811161060557610717903690600401611f9d565b93909560c4356001600160401b03811161060557610739903690600401611f9d565b909260e4356001600160401b0381116106055761075a903690600401611f9d565b6101005261014052610104356001600160401b03811161060557610782903690600401611f9d565b99909760025f8051602061373683398151915254146116b65760025f805160206137368339815191525560ff600654166116a457604051338152602435907f4995b32af3f79e9d334e9435fe5db10660a6c59b65b7387a1703bbbd4d26af76602060018060a01b03610200511692a3600154604051634648f90360e01b8152610200516001600160a01b039081166004830152602480359083015290915f9183916044918391165afa801561156a575f6101c05261167f575b5060e06101c0510151151560018060a01b0360206101c0510151166040519182526020820152602435907fa739ad96a17128f1846449fa62111f8a9bd41640e29d6aa50cf8c6db0721c71c604060018060a01b03610200511692a36108a2610200516135af565b1561166d57610200516001600160a01b03906108bd906135fb565b1680158015611653575b61164157604051908152610200516001600160a01b0316907f4e0e0cb0783f3f8eafbbc133cad019a05b5b11598c8fc6d4013002f282e73fed90602090a260e06101c05101511561162f5761092b60c06101c051015160a06101c05101519061282b565b421061161d576101c051606001516002546040516101e081815263197df64960e21b90915251610200515f9391928392610974926001600160a01b03909216916004850161285d565b036101e05173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4801561156a575f906115ed575b6101c051608001516101a0908152604051610180818152633a33689d60e21b90915251905160209282916109d491600484016128ea565b036101805173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af461016052610160511561156a575f60a052610160516115b1575b6101c05160600151600254604051610120818152630fe7ce2f60e01b909152516102005160209391928392610a4e926001600160a01b03909216916004850161285d565b036101205173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af460e05260e0511561156a575f60c05260e051611575575b6004805460405163141d1ee760e31b81529160209183919082906001600160a01b03165afa90811561156a575f91611538575b508060a05110611526576040805160c05160a05182526020820193909352908101919091527f1813eddd19b013d2ed52b32afa5c0b840fe1e3f75c8c6ae1365133db8abe744e90606090a18285036114e15761022051830361149c5780830361144c578383036114075782156113ce575f5b83811061136c57505f5b818110611341575050507f99a4dc9dec0fe423a6fa34034c9854092e31e0b8fd4e6a9aa497063112f985f56020604051838152a1808060011b0460020361100b57610b8e97610b818260011b6121b1565b93604051998a9586612060565b8260011b8552601f19610ba38460011b6121b1565b015f5b8181106113115750505f805b8482106111b0578c878c610bcd610bc761221a565b92613511565b610bd68361224e565b52610be08261224e565b5081516040805161010051815260208101869052908101919091527fa070edb76b52cb8b0b2a3c025f14d015e57d3c3d24375b6a84c92a63cc076b0a90606090a15f546001600160a01b031691823b1561060557929060405193849263cef6d20960e01b845260648401606060048601526101005190526084840160846101005160051b8601019061014051905f5b6101005181106111345750505084810360031901602486015281815260200192905f5b81811061111b575050505f83610cb7829694829460031984830301604485015261227f565b03925af19081611108575b50610d5757610ccf61233f565b6308c379a014610ce7575b6040513d608051823e3d90fd5b610cef61235a565b80610cfa5750610cda565b60405190602082527fa654f8bd6017f14e8f499da1df964075586d7f0e1879b9d6ed8e24895f8e6ded6024359280610d4260018060a01b036102005116946020830190611f27565b0390a360405163cb3080e160e01b8152600490fd5b6101c0516060015160025460405163197df64960e21b8152608051610200519193909284928392610d95926001600160a01b0316916004850161285d565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4908115610cda57610dea91602091608051916110e4575b506101c05160800151604051633a33689d60e21b8152938492839290600484016128ea565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4908115610cda57608051916110b2575b5060a0518110156110a0576101c05160600151600254604051630fe7ce2f60e01b81526102005190939260209285928392610e5b926001600160a01b0316916004850161285d565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4918215610cda576080519261106b575b50600480546040516356dfe18960e11b8152929160209184919082906001600160a01b03165afa918215610cda5760805192611037575b506127109182039082821161101f5760c05180830292811591840414171561100b5760807f329e166e6098ff14c1e6f65a932e9cf23f53702fe343dc7f10bb644b50be0374916040519060a0518252602082015260c0516040820152856060820152a10411610ff9576001546001600160a01b0316803b1561019b57604051631e80bcb760e31b815260808051610200516001600160a01b031660048401526024803590840152905191929091839160449183915af18015610cda57610fe3575b50604080516102005160a05142835260208301523492820192909252602435916001600160a01b0316907fb1f2cae6ec8018216f418980ea73bf6b652be3b4088a425dafefa21134d8fc8a90606090a360015f805160206137368339815191525560805180f35b610fec90611ffc565b60805161019b5780610f7c565b60405163d1622a4960e01b8152600490fd5b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b6080515260116004526024608051fd5b9091506020813d602011611063575b8161105360209383612060565b8101031261060557519083610ebb565b3d9150611046565b9091506020813d602011611098575b8161108760209383612060565b810103126106055751906004610e84565b3d915061107a565b60405163a2dfe38760e01b8152600490fd5b90506020813d6020116110dc575b816110cd60209383612060565b81010312610605575181610e13565b3d91506110c0565b61110291503d80608051833e6110fa8183612060565b810190612838565b83610dc5565b61111190611ffc565b5f60805281610cc2565b8235855287955060209485019490920191600101610c92565b919394959650916083198982030183528335601e196101405136030181121561060557610140510190602082359201916001600160401b038111610605578036038313610605576020828280600196849695859652848401375f838284010152601f801991011601019501930191019088969594939291610c6f565b611248906111c76111c284868d61218d565b61219d565b6111d56111c285898961218d565b60405163095ea7b360e01b60208201526001600160a01b0390911660248201525f19604480830191909152815261120b8161202a565b6040519161121883611fcd565b6001600160a01b031682525f602083015260408201526112418261123b81612e52565b9a61226b565b528c61226b565b506112576111c282868661218d565b9061126381878a61218d565b3596610220518210156112fd578160051b8b0135601e198c360301811215610605578b01908135916001600160401b03831161060557602001938236038513610605576112d58f9a956112f494600197604051946112c086611fcd565b898060a01b031685526020850152369161209c565b60408201526112ed826112e781612e52565b9b61226b565b528d61226b565b50018a95610bb2565b634e487b7160e01b5f52603260045260245ffd5b602091929682826040519261132584611fcd565b5f84525f838501526060604085015201015201908a9591610ba6565b61134c81838561218d565b351561135a57600101610b30565b604051632641a21160e01b8152600490fd5b6001600160a01b036113826111c283878f61218d565b165f52600560205260ff60405f2054161561139f57600101610b26565b6113af6111c2602492868e61218d565b604051634927572760e11b81526001600160a01b039091166004820152fd5b60405162461bcd60e51b8152602060048201526011602482015270139bc81cddd85c1cc81c1c9bdd9a591959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f4e61746976652076616c756573206c656e677468206d69736d617463680000006044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f4d696e206f757470757420616d6f756e7473206c656e677468206d69736d61746044820152610c6d60f31b6064820152608490fd5b60405162461bcd60e51b815260206004820152601b60248201527f5377617020617272617973206c656e677468206d69736d6174636800000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f546f6b656e73496e206c656e677468206d69736d6174636800000000000000006044820152606490fd5b60405163613e61a360e01b8152600490fd5b90506020813d602011611562575b8161155360209383612060565b8101031261060557518c610ab4565b3d9150611546565b6040513d5f823e3d90fd5b60203d6020116115aa575b8061159060209261012051612060565b61012051908101031261060557610120515160c052610a81565b503d611580565b60203d6020116115e6575b806115cc60209261018051612060565b61018051908101031261060557610180515160a052610a0a565b503d6115bc565b5060206116163d805f6101e0513e611608816101e051612060565b6101e051016101e051612838565b905061099d565b6040516312695dab60e11b8152600490fd5b604051631b92e95360e31b8152600490fd5b60405163970ed82960e01b8152600490fd5b506101c051602001516001600160a01b03168114156108c7565b6040516305a18a2360e31b8152600490fd5b61169a903d805f833e6116928183612060565b8101906126ba565b6101c0528b61083b565b60405163ab35696f60e01b8152600490fd5b604051633ee5aeb560e01b8152600490fd5b34610605575f366003190112610605576102ab6040516116e78161200f565b60058152640352e302e360dc1b6020820152604051918291602083526020830190611f27565b346106055760a036600319011261060557611726611f4c565b5061172f611f62565b611737611f78565b90606435906001600160401b0382116106055760209261175e61021b9336906004016120d2565b9160843593612cd6565b346106055760c036600319011261060557611781611f4c565b5061178a611f62565b611792611f78565b608435906001600160401b038211610605576020926117b861021b9336906004016120d2565b9160a4359360643591612afe565b34610605575f366003190112610605575f80516020613716833981519152546040516001600160a01b039091168152602090f35b34610605575f366003190112610605576118126134d9565b600160ff196006541617600655337fb8fad2fa0ed7a383e747c309ef2c4391d7b65592a48893e57ccc1fab707914565f80a2005b34610605575f366003190112610605576002546040516001600160a01b039091168152602090f35b34610605575f366003190112610605576001546040516001600160a01b039091168152602090f35b34610605576020366003190112610605576001600160a01b036118b7611f4c565b165f526005602052602060ff60405f2054166040519015158152f35b34610605575f366003190112610605576004546040516001600160a01b039091168152602090f35b34610605575f366003190112610605576119136134d9565b5f8051602061371683398151915280546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610605576040366003190112610605576040611989611980611f4c565b6024359061290f565b825191151582526020820152f35b34610605575f36600319011261060557602060ff600654166040519015158152f35b34610605576060366003190112610605576119d2611f4c565b506024356001600160401b0381116106055761021b6119f760209236906004016120d2565b60443591612426565b34610605575f366003190112610605577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611a6a5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405163703e46dd60e11b8152600490fd5b604036600319011261060557611a90611f4c565b6024356001600160401b038111610605573660238201121561060557611ac090369060248160040135910161209c565b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115611c52575b50611a6a57611b046134d9565b8116906040516352d1902d60e01b8152602081600481865afa5f9181611c1e575b50611b4357604051634c9c8ce360e01b815260048101849052602490fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc92919290818103611c065750823b15611bed5780546001600160a01b03191682179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2825115611bd457505f8083602061001b95519101845af4611bce6123c7565b916136b2565b91505034611bde57005b63b398979f60e01b8152600490fd5b604051634c9c8ce360e01b815260048101839052602490fd5b60249060405190632a87526960e21b82526004820152fd5b9091506020813d602011611c4a575b81611c3a60209383612060565b8101031261060557519085611b25565b3d9150611c2d565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416141584611af7565b34610605575f366003190112610605576003546040516001600160a01b039091168152602090f35b34610605575f36600319011261060557611cc06134d9565b60ff1960065416600655337ff5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf5f80a2005b34610605576040366003190112610605576004356001600160401b03811161060557611d21903690600401611f9d565b611d29611f8e565b90611d326134d9565b811515905f5b818110611d4157005b6001906001600160a01b03611d6681611d5e6111c285888c61218d565b1615156120ff565b80611d756111c284878b61218d565b165f527f67d59f18b53c5ce845a017bccede25ccb434d7c290a7b2c9848342b01a00575460209160058352611db98860405f209060ff801983541691151516179055565b611dc76111c285888c61218d565b1691604051878152a201611d38565b3461060557602036600319011261060557611def611f4c565b611df76134d9565b6001600160a01b0316611e0b811515612141565b6bffffffffffffffffffffffff60a01b5f5416175f555f80f35b3461060557604036600319011261060557611e3e611f4c565b7f67d59f18b53c5ce845a017bccede25ccb434d7c290a7b2c9848342b01a0057546020611e69611f8e565b92611e726134d9565b6001600160a01b031692611e878415156120ff565b835f5260058252611ea78160405f209060ff801983541691151516179055565b6040519015158152a2005b34610605575f3660031901126106055780611ecf6102ab9261200f565b6016815275189719171816b232b13ab396b232b632b3b0ba34b7b760511b6020820152604051918291602083526020830190611f27565b5f5b838110611f175750505f910152565b8181015183820152602001611f08565b90602091611f4081518092818552858086019101611f06565b601f01601f1916010190565b600435906001600160a01b038216820361060557565b602435906001600160a01b038216820361060557565b604435906001600160a01b038216820361060557565b60243590811515820361060557565b9181601f84011215610605578235916001600160401b038311610605576020808501948460051b01011161060557565b606081019081106001600160401b03821117611fe857604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b038111611fe857604052565b604081019081106001600160401b03821117611fe857604052565b608081019081106001600160401b03821117611fe857604052565b602081019081106001600160401b03821117611fe857604052565b90601f801991011681019081106001600160401b03821117611fe857604052565b6001600160401b038111611fe857601f01601f191660200190565b9291926120a882612081565b916120b66040519384612060565b829481845281830111610605578281602093845f960137010152565b9181601f84011215610605578235916001600160401b038311610605576020838186019501011161060557565b1561210657565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c696420444558206164647265737360681b6044820152606490fd5b1561214857565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642064656c65676174696f6e206d616e616765720000000000006044820152606490fd5b91908110156112fd5760051b0190565b356001600160a01b03811681036106055790565b6001600160401b038111611fe85760051b60200190565b604090604051916121d88361200f565b6001835282915f5b602080821015612212578351602092916121f982611fcd565b5f82525f818301526060868301528288010152016121e0565b505091925050565b6040516122268161200f565b60018152805f5b6020808210156122485790606060209282850101520161222d565b50505090565b8051156112fd5760200190565b8051600110156112fd5760400190565b80518210156112fd5760209160051b010190565b90808251908181526020809101926020808460051b8301019501935f915b8483106122ad5750505050505090565b90919293949584806122cb600193601f198682030187528a51611f27565b980193019301919493929061229d565b9392906122f09060608652606086019061227f565b936020948181036020830152602080855192838152019401905f5b81811061232b57505050612328939450604081840391015261227f565b90565b82518652948701949187019160010161230b565b5f9060033d1161234b57565b905060045f803e5f5160e01c90565b5f60443d1061232857604051600319913d83016004833e81516001600160401b03918282113d6024840111176123b6578184019485519384116123be573d850101602084870101116123b6575061232892910160200190612060565b949350505050565b50949350505050565b3d156123f1573d906123d882612081565b916123e66040519384612060565b82523d5f602084013e565b606090565b604051906124038261200f565b60148252734c6f774c6576656c5265766572744e6f4461746160601b6020830152565b915f9260409261247384519261243b84612045565b5f845261244f61244961221a565b94613511565b6124588561224e565b526124628461224e565b5061246b61221a565b92369161209c565b61247c8261224e565b526124868161224e565b508351916124938361200f565b600183526020938436818601376124a98461224e565b525f546001600160a01b0316803b15610605576124df935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612632575b506125d057907fdb7eb935c8f266a968325da48f6d1ca4795b3ada5b96dc973cd449a2f4f2524b9161251a61233f565b6308c379a0146125a5575b61252d6123c7565b8051156125945761258e9061257a602f855180936e2637bba632bb32b62932bb32b93a1d60891b8783015261256a81518092898686019101611f06565b810103600f810184520182612060565b838051948594888652850152830190611f27565b0390a190565b5061258e6125a06123f6565b61257a565b6125ad61235a565b806125b85750612525565b61258e90838051948594888652850152830190611f27565b7fdb7eb935c8f266a968325da48f6d1ca4795b3ada5b96dc973cd449a2f4f2524b9250601982806080945193600185528401528201527f4e6f4f702064656c65676174696f6e20737563636565646564000000000000006060820152a1600190565b61263d919450611ffc565b5f925f6124ea565b51906001600160a01b038216820361060557565b9080601f8301121561060557815190602091612674816121b1565b936126826040519586612060565b81855260208086019260051b82010192831161060557602001905b8282106126ab575050505090565b8151815290830190830161269d565b602080828403126106055781516001600160401b039283821161060557019061012093848382031261060557604093845195860186811082821117611fe85785528351865261270a838501612645565b83870152612719858501612645565b85870152606084015181811161060557840182601f8201121561060557805190612742826121b1565b9161274f88519384612060565b808352858084019160051b830101918583116106055786809101915b8383106128135750505050606087015260808401518181116106055782612793918601612659565b608087015260a084015160a087015260c084015160c087015260e084015180151581036106055760e08701526101009384810151918211610605570181601f82011215610605578051916127f26127e984612081565b96519687612060565b828652838383010111610605578261280d9386019101611f06565b82015290565b819061281e84612645565b815201910190869061276b565b9190820180921161100b57565b906020828203126106055781516001600160401b038111610605576123289201612659565b919392936060830160018060a01b0380931684526020906060602086015282518091526020608086019301915f5b8281106128a15750505050906040919416910152565b835186168552938101939281019260010161288b565b9081518082526020808093019301915f5b8281106128d6575050505090565b8351855293810193928101926001016128c8565b9091612901612328936040845260408401906128b7565b9160208184039101526128b7565b60015460408051634648f90360e01b81526001600160a01b0384811660048301526024820195909552909290915f908390604490829088165afa5f9281612ae2575b5061296057505050505f905f90565b60e082015115612ad85761297d60c083015160a08401519061282b565b4210612ad85773__$dba9e2f2db071a4fcbbef338f63ec817de$__915f60608201518660025416936129c28751958693849363197df64960e21b85526004850161285d565b0381865af45f9281612abc575b506129df5750505050505f905f90565b608001519083518093633a33689d60e21b82528180612a056020968796600484016128ea565b03915af4918215612ab2575f92612a82575b5080600491839583541685519384809263141d1ee760e31b82525afa938415612a7957505f93612a49575b5050101591565b9080929350813d8311612a72575b612a618183612060565b810103126106055751905f80612a42565b503d612a57565b513d5f823e3d90fd5b9080925081813d8311612aab575b612a9a8183612060565b810103126106055751906004612a17565b503d612a90565b83513d5f823e3d90fd5b612ad19193503d805f833e6110fa8183612060565b915f6129cf565b505050505f905f90565b612af79193503d805f833e6116928183612060565b915f612951565b92612b519592949193612bc5612b126121c8565b6040805163a9059cbb60e01b6020808301919091526001600160a01b03909916602482015260448101999099529798909390612b5f908a906064820190565b03601f1981018b528a612060565b87515f99612b6c82611fcd565b6001600160a01b0394851682525f8983015289820152612b8b8561224e565b52612b958461224e565b50612ba161244961221a565b612baa8561224e565b52612bb48461224e565b50612bbd61221a565b94369161209c565b612bce8461224e565b52612bd88361224e565b50855193612be58561200f565b60018552853681870137612bf88561224e565b525f5416803b1561060557612c26935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612cc3575b50612c6157907f937475b212dedbdf62bf84df0b83e884f44ff462fdc74c346cf711c61d9348eb9161251a61233f565b7f937475b212dedbdf62bf84df0b83e884f44ff462fdc74c346cf711c61d9348eb9250601d82806080945193600185528401528201527f5472616e736665722064656c65676174696f6e207375636365656465640000006060820152a1600190565b612cce919450611ffc565b5f925f612c31565b91939092612ce26121c8565b604094612d4186519760209663095ea7b360e01b888b01525f9960018060a01b0380951660248201525f19604482015260448152612d1f8161202a565b848a5192612d2c84611fcd565b1682525f8983015289820152612b8b8561224e565b612d4a8461224e565b52612d548361224e565b50855193612d618561200f565b60018552853681870137612d748561224e565b525f5416803b1561060557612da2935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612e3f575b50612ddd57907f24b22a8aeb8c12119908ebc10b7571cc5ee1e9710f855aca55b92cdf731a44629161251a61233f565b7f24b22a8aeb8c12119908ebc10b7571cc5ee1e9710f855aca55b92cdf731a44629250601d82806080945193600185528401528201527f417070726f76616c2064656c65676174696f6e207375636365656465640000006060820152a1600190565b612e4a919450611ffc565b5f925f612dad565b5f19811461100b5760010190565b95929390949195612eb1612e726121c8565b925f98612ea46040998a5192612e8784611fcd565b6001600160a01b03968716845260208085019b909b52369161209c565b89820152612b8b8561224e565b612eba8461224e565b52612ec48361224e565b50855193612ed18561200f565b60018552853681870137612ee48561224e565b525f5416803b1561060557612f12935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612faf575b50612f4d57907f05d0a2a0fee036082a49263f2061afdc4fc0a018b897ebc52ddf9b880a750dba9161251a61233f565b7f05d0a2a0fee036082a49263f2061afdc4fc0a018b897ebc52ddf9b880a750dba9250601e82806080945193600185528401528201527f537761702d6f6e6c792064656c65676174696f6e2073756363656564656400006060820152a1600190565b612fba919450611ffc565b5f925f612f1d565b600154604051634648f90360e01b81526001600160a01b03838116600483015260248201949094529192905f908390604490829085165afa5f9281613092575b5061300e575050505f90565b606060209201519060025416926130396040519485938493630fe7ce2f60e01b85526004850161285d565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af490811561156a575f91613063575090565b90506020813d60201161308a575b8161307e60209383612060565b81010312610605575190565b3d9150613071565b6130a79193503d805f833e6116928183612060565b915f613002565b906130b8826135af565b15613237576130c6826135fb565b916001600160a01b0390818416156131ff57600154604051634648f90360e01b81526001600160a01b039290921660048301526024820193909352915f908390604490829085165afa5f92816131e3575b5061314f5750505f915f919060405161312f8161200f565b601081526f14dd1c985d1959de539bdd119bdd5b9960821b602082015290565b60e0816020849694015116940151156131b1578083169084160361318457600192919060405161317e81612045565b5f815290565b5f9291906040516131948161200f565b600d81526c09eeedccae49ad2e6dac2e8c6d609b1b602082015290565b505f9291906040516131c28161200f565b601181527053747261746567794e6f7441637469766560781b602082015290565b6131f89193503d805f833e6116928183612060565b915f613117565b5050505f915f91906040516132138161200f565b601481527344656c654761746f724f776e657249735a65726f60601b602082015290565b50505f905f905f9060405161324b8161200f565b600d81526c2737ba20a232b632a3b0ba37b960991b602082015290565b969395926040958680519461327c86611fcd565b600286525f5b8281106134395750613312906133299483519b60209d8e9d8e63095ea7b360e01b908201525f809f60018060a01b0380809d16998a602486015283196044860152604485526132d08561202a565b51946132db86611fcd565b1684528301528d8201526132ee8a61224e565b526132f88961224e565b508b519461330586611fcd565b85528d850152369161209c565b8882015261331f8561225b565b52612b958461225b565b6133328461224e565b5261333c8361224e565b508451936133498561200f565b6001855287368187013761335c8561224e565b525f5416803b156106055761338a935f809487519687958694859363cef6d20960e01b8552600485016122db565b03925af19081613426575b506133c5577f65e8e6c63e92ced5583b7e317b1246482a3558a6199c1c97ca43305b2bfeda32919261251a61233f565b608091507f65e8e6c63e92ced5583b7e317b1246482a3558a6199c1c97ca43305b2bfeda32928151916001835280828401528201527f53696e676c6520737761702064656c65676174696f6e207375636365656465646060820152a1600190565b613431919350611ffc565b5f915f613395565b6020919394925161344981611fcd565b5f8152825f8183015260608c8301528289010152019188919392613282565b6001600160a01b039081169081156134c1575f8051602061371683398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80516020613716833981519152546001600160a01b031633036134f957565b60405163118cdaa760e01b8152336004820152602490fd5b604080518092602060408301908080850152825180925260608085018260608560051b8801019501965f925b85841061355d57505050505050612328925003601f198101835282612060565b9193600191939597508061359b8198605f198d820301885285878d51878060a01b038151168452858101518685015201519181898201520190611f27565b99019401940191889694919795939761353d565b803b156135f6575f80916040516020810190638da5cb5b60e01b8252600481526135d88161200f565b51915afa6135e46123c7565b816135ed575090565b60209150511490565b505f90565b803b156135f6575f80916040516020810190638da5cb5b60e01b8252600481526136248161200f565b51915afa6136306123c7565b9080613666575b61364057505f90565b60208180518101031261060557602001516001600160a01b038116908190036106055790565b506020815114613637565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c16156136a057565b604051631afcd79f60e31b8152600490fd5b906136d957508051156136c757602081519101fd5b60405163d6bda27560e01b8152600490fd5b8151158061370c575b6136ea575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156136e256fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a264697066735822122043b2054e789112919cadff767d4df39399fbe9b177127eb5c710905df029f69164736f6c63430008170033","sourceMap":"1552:29985:79:-:0;;;;;;;1171:4:34;1163:13;;3147:66:33;1552:29985:79;;;;;;;;;7894:76:33;;-1:-1:-1;;;;;;;;;;;;1552:29985:79;;;7983:34:33;7979:146;;-1:-1:-1;1552:29985:79;;;;;;;;1163:13:34;1552:29985:79;;;;;;;;;;;7979:146:33;-1:-1:-1;;;;;;1552:29985:79;;;;;;;;;;;;;8085:29:33;;1552:29985:79;;8085:29:33;7979:146;;;;;7894:76;-1:-1:-1;;;7936:23:33;;;;;1552:29985:79;;;","linkReferences":{"src/libraries/StrategyLibrary.sol":{"StrategyLibrary":[{"start":2641,"length":20},{"start":2737,"length":20},{"start":2859,"length":20},{"start":3695,"length":20},{"start":3780,"length":20},{"start":3893,"length":20},{"start":10843,"length":20},{"start":12563,"length":20}]}}},"deployedBytecode":{"object":"0x61024080604052600436101561001d575b50361561001b575f80fd5b005b5f6080525f3560e01c9081630d8e6e2c14611eb25750806318069a9c14611e255780631a8d0de214611dd65780632f26c51214611cf15780633f4ba83a14611ca85780634125839814611c805780634f1ef28614611a7c57806352d1902d14611a005780635a7fbe53146119b95780635c975abb146119975780636bcff91a14611962578063715018a6146118fb57806379502c55146118d357806379620965146118965780637b1039991461186e5780637dc0d1d0146118465780638456cb59146117fa5780638da5cb5b146117c65780639760434a14611768578063a3a401971461170d578063ad3cb1cc146116c8578063b0a8b0f41461067a578063b8282a6b14610609578063cc2a9a5b146102de578063cf0058ca146102af578063d48b4a4a14610250578063ea4d3c9b14610225578063f0928866146101a15763f2fde38b1461016c575f610010565b3461019b57602036600319011261019b57610195610188611f4c565b6101906134d9565b613468565b60805180f35b60805180fd5b3461019b5760e036600319011261019b576101ba611f4c565b506101c3611f62565b6101cb611f78565b6001600160401b039060643582811161019b576101ec9036906004016120d2565b9060a43593841161019b5760209461020b61021b9536906004016120d2565b93909260c4359560843593613268565b6040519015158152f35b3461019b5760805136600319011261019b57608051546040516001600160a01b039091168152602090f35b3461019b57604036600319011261019b576102ab61027861026f611f4c565b602435906130ae565b9093916040519485941515855260018060a01b038092166020860152166040840152608060608401526080830190611f27565b0390f35b3461019b57604036600319011261019b5760206102d66102cd611f4c565b60243590612fc2565b604051908152f35b3461019b5760c036600319011261019b576102f7611f4c565b6102ff611f62565b90610308611f78565b6001600160a01b03929060649081358581169081900361060557608435908682168092036106055760a43593878516809503610605577ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009687549860ff8a60401c1615976001600160401b038b169a8b15806105fe575b6001809d1490816105f4575b1590816105eb575b506105d95767ffffffffffffffff1981168c178b55896105ba575b5081831615610586578116956103c5871515612141565b1691821561055157831561051e5784156104e35786156104b057506103f4906103ec613671565b610190613671565b6103fc613671565b610404613671565b61040c613671565b875f80516020613736833981519152556bffffffffffffffffffffffff60a01b93846080515416176080515583885416178755826002541617600255816003541617600355600454161760045560ff196006541660065561046d5760805180f35b805468ff0000000000000000191690556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a18080610195565b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c696420636f6e66696760901b6044820152fd5b60405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103ab734b9bbb0b8103432b63832b960511b6044820152fd5b60405162461bcd60e51b815260206004820152600e60248201526d496e76616c6964206f7261636c6560901b6044820152fd5b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420726567697374727960801b6044820152fd5b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b21037bbb732b960991b60448201528490fd5b68ffffffffffffffffff191668010000000000000001178a558b6103ae565b60405163f92ee8a960e01b8152600490fd5b9050158d610393565b303b15915061038b565b508961037f565b5f80fd5b3461019b5760c036600319011261019b57610622611f4c565b5061062b611f62565b6001600160401b0360443581811161019b5761064b9036906004016120d2565b9260843592831161019b5760209361066a61021b9436906004016120d2565b92909160a4359460643592612e60565b6101203660031901126106055761068f611f4c565b610200526044356001600160401b038111610605576106b2903690600401611f9d565b906064356001600160401b038111610605576106d2903690600401611f9d565b90916084356001600160401b038111610605576106f3903690600401611f9d565b610220529060a4356001600160401b03811161060557610717903690600401611f9d565b93909560c4356001600160401b03811161060557610739903690600401611f9d565b909260e4356001600160401b0381116106055761075a903690600401611f9d565b6101005261014052610104356001600160401b03811161060557610782903690600401611f9d565b99909760025f8051602061373683398151915254146116b65760025f805160206137368339815191525560ff600654166116a457604051338152602435907f4995b32af3f79e9d334e9435fe5db10660a6c59b65b7387a1703bbbd4d26af76602060018060a01b03610200511692a3600154604051634648f90360e01b8152610200516001600160a01b039081166004830152602480359083015290915f9183916044918391165afa801561156a575f6101c05261167f575b5060e06101c0510151151560018060a01b0360206101c0510151166040519182526020820152602435907fa739ad96a17128f1846449fa62111f8a9bd41640e29d6aa50cf8c6db0721c71c604060018060a01b03610200511692a36108a2610200516135af565b1561166d57610200516001600160a01b03906108bd906135fb565b1680158015611653575b61164157604051908152610200516001600160a01b0316907f4e0e0cb0783f3f8eafbbc133cad019a05b5b11598c8fc6d4013002f282e73fed90602090a260e06101c05101511561162f5761092b60c06101c051015160a06101c05101519061282b565b421061161d576101c051606001516002546040516101e081815263197df64960e21b90915251610200515f9391928392610974926001600160a01b03909216916004850161285d565b036101e05173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4801561156a575f906115ed575b6101c051608001516101a0908152604051610180818152633a33689d60e21b90915251905160209282916109d491600484016128ea565b036101805173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af461016052610160511561156a575f60a052610160516115b1575b6101c05160600151600254604051610120818152630fe7ce2f60e01b909152516102005160209391928392610a4e926001600160a01b03909216916004850161285d565b036101205173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af460e05260e0511561156a575f60c05260e051611575575b6004805460405163141d1ee760e31b81529160209183919082906001600160a01b03165afa90811561156a575f91611538575b508060a05110611526576040805160c05160a05182526020820193909352908101919091527f1813eddd19b013d2ed52b32afa5c0b840fe1e3f75c8c6ae1365133db8abe744e90606090a18285036114e15761022051830361149c5780830361144c578383036114075782156113ce575f5b83811061136c57505f5b818110611341575050507f99a4dc9dec0fe423a6fa34034c9854092e31e0b8fd4e6a9aa497063112f985f56020604051838152a1808060011b0460020361100b57610b8e97610b818260011b6121b1565b93604051998a9586612060565b8260011b8552601f19610ba38460011b6121b1565b015f5b8181106113115750505f805b8482106111b0578c878c610bcd610bc761221a565b92613511565b610bd68361224e565b52610be08261224e565b5081516040805161010051815260208101869052908101919091527fa070edb76b52cb8b0b2a3c025f14d015e57d3c3d24375b6a84c92a63cc076b0a90606090a15f546001600160a01b031691823b1561060557929060405193849263cef6d20960e01b845260648401606060048601526101005190526084840160846101005160051b8601019061014051905f5b6101005181106111345750505084810360031901602486015281815260200192905f5b81811061111b575050505f83610cb7829694829460031984830301604485015261227f565b03925af19081611108575b50610d5757610ccf61233f565b6308c379a014610ce7575b6040513d608051823e3d90fd5b610cef61235a565b80610cfa5750610cda565b60405190602082527fa654f8bd6017f14e8f499da1df964075586d7f0e1879b9d6ed8e24895f8e6ded6024359280610d4260018060a01b036102005116946020830190611f27565b0390a360405163cb3080e160e01b8152600490fd5b6101c0516060015160025460405163197df64960e21b8152608051610200519193909284928392610d95926001600160a01b0316916004850161285d565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4908115610cda57610dea91602091608051916110e4575b506101c05160800151604051633a33689d60e21b8152938492839290600484016128ea565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4908115610cda57608051916110b2575b5060a0518110156110a0576101c05160600151600254604051630fe7ce2f60e01b81526102005190939260209285928392610e5b926001600160a01b0316916004850161285d565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af4918215610cda576080519261106b575b50600480546040516356dfe18960e11b8152929160209184919082906001600160a01b03165afa918215610cda5760805192611037575b506127109182039082821161101f5760c05180830292811591840414171561100b5760807f329e166e6098ff14c1e6f65a932e9cf23f53702fe343dc7f10bb644b50be0374916040519060a0518252602082015260c0516040820152856060820152a10411610ff9576001546001600160a01b0316803b1561019b57604051631e80bcb760e31b815260808051610200516001600160a01b031660048401526024803590840152905191929091839160449183915af18015610cda57610fe3575b50604080516102005160a05142835260208301523492820192909252602435916001600160a01b0316907fb1f2cae6ec8018216f418980ea73bf6b652be3b4088a425dafefa21134d8fc8a90606090a360015f805160206137368339815191525560805180f35b610fec90611ffc565b60805161019b5780610f7c565b60405163d1622a4960e01b8152600490fd5b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b6080515260116004526024608051fd5b9091506020813d602011611063575b8161105360209383612060565b8101031261060557519083610ebb565b3d9150611046565b9091506020813d602011611098575b8161108760209383612060565b810103126106055751906004610e84565b3d915061107a565b60405163a2dfe38760e01b8152600490fd5b90506020813d6020116110dc575b816110cd60209383612060565b81010312610605575181610e13565b3d91506110c0565b61110291503d80608051833e6110fa8183612060565b810190612838565b83610dc5565b61111190611ffc565b5f60805281610cc2565b8235855287955060209485019490920191600101610c92565b919394959650916083198982030183528335601e196101405136030181121561060557610140510190602082359201916001600160401b038111610605578036038313610605576020828280600196849695859652848401375f838284010152601f801991011601019501930191019088969594939291610c6f565b611248906111c76111c284868d61218d565b61219d565b6111d56111c285898961218d565b60405163095ea7b360e01b60208201526001600160a01b0390911660248201525f19604480830191909152815261120b8161202a565b6040519161121883611fcd565b6001600160a01b031682525f602083015260408201526112418261123b81612e52565b9a61226b565b528c61226b565b506112576111c282868661218d565b9061126381878a61218d565b3596610220518210156112fd578160051b8b0135601e198c360301811215610605578b01908135916001600160401b03831161060557602001938236038513610605576112d58f9a956112f494600197604051946112c086611fcd565b898060a01b031685526020850152369161209c565b60408201526112ed826112e781612e52565b9b61226b565b528d61226b565b50018a95610bb2565b634e487b7160e01b5f52603260045260245ffd5b602091929682826040519261132584611fcd565b5f84525f838501526060604085015201015201908a9591610ba6565b61134c81838561218d565b351561135a57600101610b30565b604051632641a21160e01b8152600490fd5b6001600160a01b036113826111c283878f61218d565b165f52600560205260ff60405f2054161561139f57600101610b26565b6113af6111c2602492868e61218d565b604051634927572760e11b81526001600160a01b039091166004820152fd5b60405162461bcd60e51b8152602060048201526011602482015270139bc81cddd85c1cc81c1c9bdd9a591959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f4e61746976652076616c756573206c656e677468206d69736d617463680000006044820152606490fd5b60405162461bcd60e51b815260206004820152602260248201527f4d696e206f757470757420616d6f756e7473206c656e677468206d69736d61746044820152610c6d60f31b6064820152608490fd5b60405162461bcd60e51b815260206004820152601b60248201527f5377617020617272617973206c656e677468206d69736d6174636800000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f546f6b656e73496e206c656e677468206d69736d6174636800000000000000006044820152606490fd5b60405163613e61a360e01b8152600490fd5b90506020813d602011611562575b8161155360209383612060565b8101031261060557518c610ab4565b3d9150611546565b6040513d5f823e3d90fd5b60203d6020116115aa575b8061159060209261012051612060565b61012051908101031261060557610120515160c052610a81565b503d611580565b60203d6020116115e6575b806115cc60209261018051612060565b61018051908101031261060557610180515160a052610a0a565b503d6115bc565b5060206116163d805f6101e0513e611608816101e051612060565b6101e051016101e051612838565b905061099d565b6040516312695dab60e11b8152600490fd5b604051631b92e95360e31b8152600490fd5b60405163970ed82960e01b8152600490fd5b506101c051602001516001600160a01b03168114156108c7565b6040516305a18a2360e31b8152600490fd5b61169a903d805f833e6116928183612060565b8101906126ba565b6101c0528b61083b565b60405163ab35696f60e01b8152600490fd5b604051633ee5aeb560e01b8152600490fd5b34610605575f366003190112610605576102ab6040516116e78161200f565b60058152640352e302e360dc1b6020820152604051918291602083526020830190611f27565b346106055760a036600319011261060557611726611f4c565b5061172f611f62565b611737611f78565b90606435906001600160401b0382116106055760209261175e61021b9336906004016120d2565b9160843593612cd6565b346106055760c036600319011261060557611781611f4c565b5061178a611f62565b611792611f78565b608435906001600160401b038211610605576020926117b861021b9336906004016120d2565b9160a4359360643591612afe565b34610605575f366003190112610605575f80516020613716833981519152546040516001600160a01b039091168152602090f35b34610605575f366003190112610605576118126134d9565b600160ff196006541617600655337fb8fad2fa0ed7a383e747c309ef2c4391d7b65592a48893e57ccc1fab707914565f80a2005b34610605575f366003190112610605576002546040516001600160a01b039091168152602090f35b34610605575f366003190112610605576001546040516001600160a01b039091168152602090f35b34610605576020366003190112610605576001600160a01b036118b7611f4c565b165f526005602052602060ff60405f2054166040519015158152f35b34610605575f366003190112610605576004546040516001600160a01b039091168152602090f35b34610605575f366003190112610605576119136134d9565b5f8051602061371683398151915280546001600160a01b031981169091555f906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610605576040366003190112610605576040611989611980611f4c565b6024359061290f565b825191151582526020820152f35b34610605575f36600319011261060557602060ff600654166040519015158152f35b34610605576060366003190112610605576119d2611f4c565b506024356001600160401b0381116106055761021b6119f760209236906004016120d2565b60443591612426565b34610605575f366003190112610605577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003611a6a5760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405163703e46dd60e11b8152600490fd5b604036600319011261060557611a90611f4c565b6024356001600160401b038111610605573660238201121561060557611ac090369060248160040135910161209c565b906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116308114908115611c52575b50611a6a57611b046134d9565b8116906040516352d1902d60e01b8152602081600481865afa5f9181611c1e575b50611b4357604051634c9c8ce360e01b815260048101849052602490fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc92919290818103611c065750823b15611bed5780546001600160a01b03191682179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2825115611bd457505f8083602061001b95519101845af4611bce6123c7565b916136b2565b91505034611bde57005b63b398979f60e01b8152600490fd5b604051634c9c8ce360e01b815260048101839052602490fd5b60249060405190632a87526960e21b82526004820152fd5b9091506020813d602011611c4a575b81611c3a60209383612060565b8101031261060557519085611b25565b3d9150611c2d565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416141584611af7565b34610605575f366003190112610605576003546040516001600160a01b039091168152602090f35b34610605575f36600319011261060557611cc06134d9565b60ff1960065416600655337ff5cbf596165cc457b2cd92e8d8450827ee314968160a5696402d75766fc52caf5f80a2005b34610605576040366003190112610605576004356001600160401b03811161060557611d21903690600401611f9d565b611d29611f8e565b90611d326134d9565b811515905f5b818110611d4157005b6001906001600160a01b03611d6681611d5e6111c285888c61218d565b1615156120ff565b80611d756111c284878b61218d565b165f527f67d59f18b53c5ce845a017bccede25ccb434d7c290a7b2c9848342b01a00575460209160058352611db98860405f209060ff801983541691151516179055565b611dc76111c285888c61218d565b1691604051878152a201611d38565b3461060557602036600319011261060557611def611f4c565b611df76134d9565b6001600160a01b0316611e0b811515612141565b6bffffffffffffffffffffffff60a01b5f5416175f555f80f35b3461060557604036600319011261060557611e3e611f4c565b7f67d59f18b53c5ce845a017bccede25ccb434d7c290a7b2c9848342b01a0057546020611e69611f8e565b92611e726134d9565b6001600160a01b031692611e878415156120ff565b835f5260058252611ea78160405f209060ff801983541691151516179055565b6040519015158152a2005b34610605575f3660031901126106055780611ecf6102ab9261200f565b6016815275189719171816b232b13ab396b232b632b3b0ba34b7b760511b6020820152604051918291602083526020830190611f27565b5f5b838110611f175750505f910152565b8181015183820152602001611f08565b90602091611f4081518092818552858086019101611f06565b601f01601f1916010190565b600435906001600160a01b038216820361060557565b602435906001600160a01b038216820361060557565b604435906001600160a01b038216820361060557565b60243590811515820361060557565b9181601f84011215610605578235916001600160401b038311610605576020808501948460051b01011161060557565b606081019081106001600160401b03821117611fe857604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b038111611fe857604052565b604081019081106001600160401b03821117611fe857604052565b608081019081106001600160401b03821117611fe857604052565b602081019081106001600160401b03821117611fe857604052565b90601f801991011681019081106001600160401b03821117611fe857604052565b6001600160401b038111611fe857601f01601f191660200190565b9291926120a882612081565b916120b66040519384612060565b829481845281830111610605578281602093845f960137010152565b9181601f84011215610605578235916001600160401b038311610605576020838186019501011161060557565b1561210657565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c696420444558206164647265737360681b6044820152606490fd5b1561214857565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642064656c65676174696f6e206d616e616765720000000000006044820152606490fd5b91908110156112fd5760051b0190565b356001600160a01b03811681036106055790565b6001600160401b038111611fe85760051b60200190565b604090604051916121d88361200f565b6001835282915f5b602080821015612212578351602092916121f982611fcd565b5f82525f818301526060868301528288010152016121e0565b505091925050565b6040516122268161200f565b60018152805f5b6020808210156122485790606060209282850101520161222d565b50505090565b8051156112fd5760200190565b8051600110156112fd5760400190565b80518210156112fd5760209160051b010190565b90808251908181526020809101926020808460051b8301019501935f915b8483106122ad5750505050505090565b90919293949584806122cb600193601f198682030187528a51611f27565b980193019301919493929061229d565b9392906122f09060608652606086019061227f565b936020948181036020830152602080855192838152019401905f5b81811061232b57505050612328939450604081840391015261227f565b90565b82518652948701949187019160010161230b565b5f9060033d1161234b57565b905060045f803e5f5160e01c90565b5f60443d1061232857604051600319913d83016004833e81516001600160401b03918282113d6024840111176123b6578184019485519384116123be573d850101602084870101116123b6575061232892910160200190612060565b949350505050565b50949350505050565b3d156123f1573d906123d882612081565b916123e66040519384612060565b82523d5f602084013e565b606090565b604051906124038261200f565b60148252734c6f774c6576656c5265766572744e6f4461746160601b6020830152565b915f9260409261247384519261243b84612045565b5f845261244f61244961221a565b94613511565b6124588561224e565b526124628461224e565b5061246b61221a565b92369161209c565b61247c8261224e565b526124868161224e565b508351916124938361200f565b600183526020938436818601376124a98461224e565b525f546001600160a01b0316803b15610605576124df935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612632575b506125d057907fdb7eb935c8f266a968325da48f6d1ca4795b3ada5b96dc973cd449a2f4f2524b9161251a61233f565b6308c379a0146125a5575b61252d6123c7565b8051156125945761258e9061257a602f855180936e2637bba632bb32b62932bb32b93a1d60891b8783015261256a81518092898686019101611f06565b810103600f810184520182612060565b838051948594888652850152830190611f27565b0390a190565b5061258e6125a06123f6565b61257a565b6125ad61235a565b806125b85750612525565b61258e90838051948594888652850152830190611f27565b7fdb7eb935c8f266a968325da48f6d1ca4795b3ada5b96dc973cd449a2f4f2524b9250601982806080945193600185528401528201527f4e6f4f702064656c65676174696f6e20737563636565646564000000000000006060820152a1600190565b61263d919450611ffc565b5f925f6124ea565b51906001600160a01b038216820361060557565b9080601f8301121561060557815190602091612674816121b1565b936126826040519586612060565b81855260208086019260051b82010192831161060557602001905b8282106126ab575050505090565b8151815290830190830161269d565b602080828403126106055781516001600160401b039283821161060557019061012093848382031261060557604093845195860186811082821117611fe85785528351865261270a838501612645565b83870152612719858501612645565b85870152606084015181811161060557840182601f8201121561060557805190612742826121b1565b9161274f88519384612060565b808352858084019160051b830101918583116106055786809101915b8383106128135750505050606087015260808401518181116106055782612793918601612659565b608087015260a084015160a087015260c084015160c087015260e084015180151581036106055760e08701526101009384810151918211610605570181601f82011215610605578051916127f26127e984612081565b96519687612060565b828652838383010111610605578261280d9386019101611f06565b82015290565b819061281e84612645565b815201910190869061276b565b9190820180921161100b57565b906020828203126106055781516001600160401b038111610605576123289201612659565b919392936060830160018060a01b0380931684526020906060602086015282518091526020608086019301915f5b8281106128a15750505050906040919416910152565b835186168552938101939281019260010161288b565b9081518082526020808093019301915f5b8281106128d6575050505090565b8351855293810193928101926001016128c8565b9091612901612328936040845260408401906128b7565b9160208184039101526128b7565b60015460408051634648f90360e01b81526001600160a01b0384811660048301526024820195909552909290915f908390604490829088165afa5f9281612ae2575b5061296057505050505f905f90565b60e082015115612ad85761297d60c083015160a08401519061282b565b4210612ad85773__$dba9e2f2db071a4fcbbef338f63ec817de$__915f60608201518660025416936129c28751958693849363197df64960e21b85526004850161285d565b0381865af45f9281612abc575b506129df5750505050505f905f90565b608001519083518093633a33689d60e21b82528180612a056020968796600484016128ea565b03915af4918215612ab2575f92612a82575b5080600491839583541685519384809263141d1ee760e31b82525afa938415612a7957505f93612a49575b5050101591565b9080929350813d8311612a72575b612a618183612060565b810103126106055751905f80612a42565b503d612a57565b513d5f823e3d90fd5b9080925081813d8311612aab575b612a9a8183612060565b810103126106055751906004612a17565b503d612a90565b83513d5f823e3d90fd5b612ad19193503d805f833e6110fa8183612060565b915f6129cf565b505050505f905f90565b612af79193503d805f833e6116928183612060565b915f612951565b92612b519592949193612bc5612b126121c8565b6040805163a9059cbb60e01b6020808301919091526001600160a01b03909916602482015260448101999099529798909390612b5f908a906064820190565b03601f1981018b528a612060565b87515f99612b6c82611fcd565b6001600160a01b0394851682525f8983015289820152612b8b8561224e565b52612b958461224e565b50612ba161244961221a565b612baa8561224e565b52612bb48461224e565b50612bbd61221a565b94369161209c565b612bce8461224e565b52612bd88361224e565b50855193612be58561200f565b60018552853681870137612bf88561224e565b525f5416803b1561060557612c26935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612cc3575b50612c6157907f937475b212dedbdf62bf84df0b83e884f44ff462fdc74c346cf711c61d9348eb9161251a61233f565b7f937475b212dedbdf62bf84df0b83e884f44ff462fdc74c346cf711c61d9348eb9250601d82806080945193600185528401528201527f5472616e736665722064656c65676174696f6e207375636365656465640000006060820152a1600190565b612cce919450611ffc565b5f925f612c31565b91939092612ce26121c8565b604094612d4186519760209663095ea7b360e01b888b01525f9960018060a01b0380951660248201525f19604482015260448152612d1f8161202a565b848a5192612d2c84611fcd565b1682525f8983015289820152612b8b8561224e565b612d4a8461224e565b52612d548361224e565b50855193612d618561200f565b60018552853681870137612d748561224e565b525f5416803b1561060557612da2935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612e3f575b50612ddd57907f24b22a8aeb8c12119908ebc10b7571cc5ee1e9710f855aca55b92cdf731a44629161251a61233f565b7f24b22a8aeb8c12119908ebc10b7571cc5ee1e9710f855aca55b92cdf731a44629250601d82806080945193600185528401528201527f417070726f76616c2064656c65676174696f6e207375636365656465640000006060820152a1600190565b612e4a919450611ffc565b5f925f612dad565b5f19811461100b5760010190565b95929390949195612eb1612e726121c8565b925f98612ea46040998a5192612e8784611fcd565b6001600160a01b03968716845260208085019b909b52369161209c565b89820152612b8b8561224e565b612eba8461224e565b52612ec48361224e565b50855193612ed18561200f565b60018552853681870137612ee48561224e565b525f5416803b1561060557612f12935f809488519687958694859363cef6d20960e01b8552600485016122db565b03925af19081612faf575b50612f4d57907f05d0a2a0fee036082a49263f2061afdc4fc0a018b897ebc52ddf9b880a750dba9161251a61233f565b7f05d0a2a0fee036082a49263f2061afdc4fc0a018b897ebc52ddf9b880a750dba9250601e82806080945193600185528401528201527f537761702d6f6e6c792064656c65676174696f6e2073756363656564656400006060820152a1600190565b612fba919450611ffc565b5f925f612f1d565b600154604051634648f90360e01b81526001600160a01b03838116600483015260248201949094529192905f908390604490829085165afa5f9281613092575b5061300e575050505f90565b606060209201519060025416926130396040519485938493630fe7ce2f60e01b85526004850161285d565b038173__$dba9e2f2db071a4fcbbef338f63ec817de$__5af490811561156a575f91613063575090565b90506020813d60201161308a575b8161307e60209383612060565b81010312610605575190565b3d9150613071565b6130a79193503d805f833e6116928183612060565b915f613002565b906130b8826135af565b15613237576130c6826135fb565b916001600160a01b0390818416156131ff57600154604051634648f90360e01b81526001600160a01b039290921660048301526024820193909352915f908390604490829085165afa5f92816131e3575b5061314f5750505f915f919060405161312f8161200f565b601081526f14dd1c985d1959de539bdd119bdd5b9960821b602082015290565b60e0816020849694015116940151156131b1578083169084160361318457600192919060405161317e81612045565b5f815290565b5f9291906040516131948161200f565b600d81526c09eeedccae49ad2e6dac2e8c6d609b1b602082015290565b505f9291906040516131c28161200f565b601181527053747261746567794e6f7441637469766560781b602082015290565b6131f89193503d805f833e6116928183612060565b915f613117565b5050505f915f91906040516132138161200f565b601481527344656c654761746f724f776e657249735a65726f60601b602082015290565b50505f905f905f9060405161324b8161200f565b600d81526c2737ba20a232b632a3b0ba37b960991b602082015290565b969395926040958680519461327c86611fcd565b600286525f5b8281106134395750613312906133299483519b60209d8e9d8e63095ea7b360e01b908201525f809f60018060a01b0380809d16998a602486015283196044860152604485526132d08561202a565b51946132db86611fcd565b1684528301528d8201526132ee8a61224e565b526132f88961224e565b508b519461330586611fcd565b85528d850152369161209c565b8882015261331f8561225b565b52612b958461225b565b6133328461224e565b5261333c8361224e565b508451936133498561200f565b6001855287368187013761335c8561224e565b525f5416803b156106055761338a935f809487519687958694859363cef6d20960e01b8552600485016122db565b03925af19081613426575b506133c5577f65e8e6c63e92ced5583b7e317b1246482a3558a6199c1c97ca43305b2bfeda32919261251a61233f565b608091507f65e8e6c63e92ced5583b7e317b1246482a3558a6199c1c97ca43305b2bfeda32928151916001835280828401528201527f53696e676c6520737761702064656c65676174696f6e207375636365656465646060820152a1600190565b613431919350611ffc565b5f915f613395565b6020919394925161344981611fcd565b5f8152825f8183015260608c8301528289010152019188919392613282565b6001600160a01b039081169081156134c1575f8051602061371683398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80516020613716833981519152546001600160a01b031633036134f957565b60405163118cdaa760e01b8152336004820152602490fd5b604080518092602060408301908080850152825180925260608085018260608560051b8801019501965f925b85841061355d57505050505050612328925003601f198101835282612060565b9193600191939597508061359b8198605f198d820301885285878d51878060a01b038151168452858101518685015201519181898201520190611f27565b99019401940191889694919795939761353d565b803b156135f6575f80916040516020810190638da5cb5b60e01b8252600481526135d88161200f565b51915afa6135e46123c7565b816135ed575090565b60209150511490565b505f90565b803b156135f6575f80916040516020810190638da5cb5b60e01b8252600481526136248161200f565b51915afa6136306123c7565b9080613666575b61364057505f90565b60208180518101031261060557602001516001600160a01b038116908190036106055790565b506020815114613637565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c16156136a057565b604051631afcd79f60e31b8152600490fd5b906136d957508051156136c757602081519101fd5b60405163d6bda27560e01b8152600490fd5b8151158061370c575b6136ea575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156136e256fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a264697066735822122043b2054e789112919cadff767d4df39399fbe9b177127eb5c710905df029f69164736f6c63430008170033","sourceMap":"1552:29985:79:-:0;;;;;;;;;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;2357:1:32;1552:29985:79;;:::i;:::-;2303:62:32;;:::i;:::-;2357:1;:::i;:::-;1552:29985:79;;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3147:66:33;1552:29985:79;;;;;;;;;4301:16:33;1552:29985:79;-1:-1:-1;;;;;1552:29985:79;;4724:16:33;;;:34;;;1552:29985:79;4803:1:33;4788:16;;;:50;;;;1552:29985:79;4853:13:33;:30;;;;1552:29985:79;4849:91:33;;;-1:-1:-1;;1552:29985:79;;;;;;;4977:67:33;;1552:29985:79;;;;;4578:20;1552:29985;;;;4634:32;4626:71;4634:32;;;4626:71;:::i;:::-;1552:29985;4715:23;;;1552:29985;;4777:21;;1552:29985;;4835:28;;1552:29985;;4908:21;;1552:29985;;6891:76:33;6959:1;6891:76;;;:::i;:::-;;;:::i;6959:1::-;6891:76;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;1991:1:36;-1:-1:-1;;;;;;;;;;;1991:1:36;1552:29985:79;;;;;;;;;;;;;;;;;;;;;5176:29;1552:29985;;;5176:29;1552:29985;;5215:46;1552:29985;;;5215:46;1552:29985;;;;;;;;;5353:14;1552:29985;;5353:14;1552:29985;5064:101:33;;1552:29985:79;;;;5064:101:33;1552:29985:79;;-1:-1:-1;;1552:29985:79;;;;;;;;5140:14:33;;1552:29985:79;;5140:14:33;5064:101;;;;1552:29985:79;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;4977:67:33;-1:-1:-1;;1552:29985:79;;;;;4977:67:33;;;4849:91;1552:29985:79;;-1:-1:-1;;;4906:23:33;;1552:29985:79;;4906:23:33;4853:30;4870:13;;;4853:30;;;4788:50;4816:4;4808:25;:30;;-1:-1:-1;4788:50:33;;4724:34;;;;;1552:29985:79;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;;1991:1:36;-1:-1:-1;;;;;;;;;;;1552:29985:79;3670:20:36;3666:88;;1991:1;-1:-1:-1;;;;;;;;;;;1991:1:36;1552:29985:79;3966:6;1552:29985;;3962:35;;1552:29985;;9176:10;1552:29985;;;;;9129:58;1552:29985;;;;;;9129:58;;1552:29985;9129:58;;1552:29985;;;;-1:-1:-1;;;9282:45:79;;;;-1:-1:-1;;;;;1552:29985:79;;;;9282:45;;1552:29985;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;9282:45;;;;;;1552:29985;9282:45;;;;1552:29985;9388:17;1552:29985;9388:17;;;1552:29985;;;;;;;;;9407:14;;;1552:29985;;;;;;;;;;;;;;9342:80;1552:29985;;;;;;9129:58;;1552:29985;9342:80;;9502:40;;;;:::i;:::-;9501:41;9497:94;;9703:46;;-1:-1:-1;;;;;1552:29985:79;9703:46;;;:::i;:::-;1552:29985;9763:28;;:64;;;;1552:29985;9759:125;;1552:29985;;;;;9129:58;;-1:-1:-1;;;;;1552:29985:79;;9898:52;;1552:29985;;9898:52;1552:29985;9388:17;;;1552:29985;;9993:75;;10100:55;1552:29985;10100:26;;;1552:29985;;10129:26;;;1552:29985;10100:55;;:::i;:::-;10082:15;:73;10078:131;;10395:15;;1552:29985;10395:15;;1991:1:36;1552:29985:79;;;10342:86;;;;-1:-1:-1;;;10342:86:79;;;;;;1552:29985;;10342:86;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;10342:86;;;:::i;:::-;;;;:15;:86;;;;;;1552:29985;10342:86;;;1552:29985;10507:16;;1552:29985;10507:16;;;;;;1552:29985;;10454:70;;;;-1:-1:-1;;;10454:70:79;;;;;;1552:29985;;10454:70;;;;1552:29985;10454:70;;;:::i;:::-;;;;10342:15;10454:70;;;;;;;;;1552:29985;10454:70;;;;;;1552:29985;10395:15;;1552:29985;10395:15;10680;1991:1:36;1552:29985:79;;;10633:80;;;;-1:-1:-1;;;10633:80:79;;;;;;1552:29985;;10633:80;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;10633:80;;;:::i;:::-;;;;10342:15;10633:80;;;;;;;;;1552:29985;10633:80;;;;;;1552:29985;;;;;;-1:-1:-1;;;10787:30:79;;1552:29985;;;;;;;;-1:-1:-1;;;;;1552:29985:79;10787:30;;;;;;;1552:29985;10787:30;;;1552:29985;10831:16;;;;;10827:75;;1552:29985;;;10916:59;;;;1552:29985;;;;;;;;;;;;;;;;10916:59;;1552:29985;;10916:59;11027:37;;;1552:29985;;11133:20;;11111:42;;1552:29985;;11203:45;;;1552:29985;;11305:41;;;1552:29985;;11398:22;;1552:29985;;;11549:22;;;;;;11794:13;1552:29985;11809:27;;;;;;1552:29985;;;11983:45;1552:29985;;;;;;11983:45;1552:29985;;;;;1991:1:36;1552:29985:79;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;12516:15;;1552:29985;;12562:22;;;;;;13657:14;;;13705:36;13657:14;;:::i;:::-;13705:36;;:::i;:::-;13681:60;;;:::i;:::-;;;;;:::i;:::-;-1:-1:-1;1552:29985:79;;;;;13801:93;;1552:29985;;;;;;;;;;;;;;;13801:93;;1552:29985;;13801:93;1552:29985;;-1:-1:-1;;;;;1552:29985:79;;13908:82;;;;;1552:29985;;;;;;;;;;13908:82;;1552:29985;;;;;13908:82;;1552:29985;;;;;;;;;;;11597:12;1552:29985;;;;;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;-1:-1:-1;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13908:82;;;;;;;;1552:29985;-1:-1:-1;13904:1730:79;;;;:::i;:::-;;;;;;1552:29985;;;;;;;;;;13904:1730;15475:159;;:::i;:::-;;;;13904:1730;;;15475:159;1552:29985;;;;;;15528:48;1552:29985;;;;;;;;;;9129:58;;1552:29985;;;;;;;:::i;:::-;15528:48;;;1552:29985;;-1:-1:-1;;;15597:26:79;;1552:29985;;15597:26;13904:1730;10395:15;;1552:29985;10395:15;14193;1991:1:36;1552:29985:79;;;-1:-1:-1;;;14140:86:79;;1552:29985;;14140:86;;1552:29985;;;;;;;;14140:86;;-1:-1:-1;;;;;1552:29985:79;;;14140:86;;;:::i;:::-;;10342:15;;14140:86;;;;;;;14261:69;14140:86;1552:29985;14140:86;;;;;;13904:1730;-1:-1:-1;10507:16:79;;1552:29985;10507:16;14313;1552:29985;;-1:-1:-1;;;14261:69:79;;1552:29985;;;;;14313:16;1552:29985;14261:69;;;:::i;:::-;;10342:15;;14261:69;;;;;;;;;;;;13904:1730;14406:19;;;;;;14402:95;;10395:15;;1552:29985;10395:15;14714;1991:1:36;1552:29985:79;;;-1:-1:-1;;;14667:80:79;;;;1552:29985;;10395:15;1552:29985;;;;;;14667:80;;-1:-1:-1;;;;;1552:29985:79;;;14667:80;;;:::i;:::-;;10342:15;;14667:80;;;;;;;;;;;;13904:1730;-1:-1:-1;1552:29985:79;;;;;-1:-1:-1;;;14786:23:79;;1552:29985;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;14786:23;;;;;;;;;;;;13904:1730;14877:5;;1552:29985;;;;;;;;;;;;;;;;;;;;;;;;;;14929:86;1552:29985;;;;;;;;;;;;;;;;;;;;;;;14929:86;1552:29985;-1:-1:-1;15030:111:79;;1552:29985;;-1:-1:-1;;;;;1552:29985:79;15210:57;;;;;1552:29985;;-1:-1:-1;;;15210:57:79;;1552:29985;;;15210:57;;-1:-1:-1;;;;;1552:29985:79;;15210:57;;1552:29985;;;;;;;;;;;;;;;;;;;;15210:57;;;;;;;;13904:1730;-1:-1:-1;1552:29985:79;;;9129:58;;1552:29985;15382:81;10082:15;1552:29985;;;;;;15353:9;1552:29985;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;15382:81;;1552:29985;;15382:81;1552:29985;-1:-1:-1;;;;;;;;;;;1991:1:36;1552:29985:79;;;;15210:57;;;;:::i;:::-;1552:29985;;;;15210:57;;;15030:111;1552:29985;;-1:-1:-1;;;15101:25:79;;1552:29985;;15101:25;1552:29985;;;;;;;;;;;;;;;;;;;;;;;;;;14786:23;;;;1552:29985;14786:23;;1552:29985;14786:23;;;;;;1552:29985;14786:23;;;:::i;:::-;;;1552:29985;;;;;14786:23;;;;;;;-1:-1:-1;14786:23:79;;14667:80;;;;1552:29985;14667:80;;1552:29985;14667:80;;;;;;1552:29985;14667:80;;;:::i;:::-;;;1552:29985;;;;;;;14667:80;;;;;-1:-1:-1;14667:80:79;;14402:95;1552:29985;;-1:-1:-1;;;14452:30:79;;1552:29985;;14452:30;14261:69;;;1552:29985;14261:69;;1552:29985;14261:69;;;;;;1552:29985;14261:69;;;:::i;:::-;;;1552:29985;;;;;14261:69;;;;;;-1:-1:-1;14261:69:79;;14140:86;;;;;1552:29985;;;14140:86;;;;;;:::i;:::-;;;;;:::i;:::-;;;;13908:82;;;;:::i;:::-;1552:29985;;;13908:82;;;1552:29985;;;;;;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12586:3;12682:383;12738:11;;;;;;;:::i;:::-;;:::i;:::-;12979:14;;;;;;:::i;:::-;1552:29985;;-1:-1:-1;;;1552:29985:79;12886:164;;;-1:-1:-1;;;;;1552:29985:79;;;;12886:164;;1552:29985;-1:-1:-1;;1552:29985:79;;;;;;;;12886:164;;;1552:29985;12886:164;:::i;:::-;1552:29985;;;;;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;12702:363;;1552:29985;;12702:363;;1552:29985;12682:383;12693:5;;;;:::i;:::-;12682:383;;:::i;:::-;;;;:::i;:::-;;13206:14;;;;;;:::i;:::-;13273:15;;;;;;:::i;:::-;1552:29985;;;;;;;;;;11597:12;1552:29985;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;;;;13150:287;1552:29985;;;;;;;;;:::i;:::-;;;;;;;;;;13170:267;;1552:29985;;;;:::i;:::-;;13170:267;;1552:29985;13150:287;13161:5;;;;:::i;:::-;13150:287;;:::i;:::-;;;;:::i;:::-;;1552:29985;12547:13;;;;1552:29985;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;11838:3;11861:19;;;;;:::i;:::-;1552:29985;11861:24;11857:102;;1552:29985;;11794:13;;11857:102;1552:29985;;-1:-1:-1;;;11912:32:79;;1552:29985;;11912:32;11573:3;-1:-1:-1;;;;;11610:14:79;;1552:29985;;;11610:14;:::i;:::-;1552:29985;;;11597:12;1552:29985;;;;;;;;11596:29;11592:104;;1552:29985;;11534:13;;11592:104;11666:14;;1552:29985;11666:14;;;;:::i;:::-;1552:29985;;-1:-1:-1;;;11652:29:79;;-1:-1:-1;;;;;1552:29985:79;;;;11652:29;;1552:29985;11652:29;1552:29985;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;10827:75;1552:29985;;-1:-1:-1;;;10870:21:79;;1552:29985;;10870:21;10787:30;;;1552:29985;10787:30;;1552:29985;10787:30;;;;;;1552:29985;10787:30;;;:::i;:::-;;;1552:29985;;;;;10787:30;;;;;;-1:-1:-1;10787:30:79;;;1552:29985;;;;;;;;;10633:80;1552:29985;10633:80;1552:29985;10633:80;;;;;;1552:29985;10633:80;;;;:::i;:::-;1552:29985;;10633:80;;;1552:29985;;;;;;;10633:80;;;;;-1:-1:-1;10633:80:79;;;10454:70;1552:29985;10454:70;1552:29985;10454:70;;;;;;1552:29985;10454:70;;;;:::i;:::-;1552:29985;;10454:70;;;1552:29985;;;;;;;10454:70;;;;;-1:-1:-1;10454:70:79;;;10342:86;;1552:29985;10342:86;;;1552:29985;10342:86;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;10078:131;1552:29985;;-1:-1:-1;;;10178:20:79;;1552:29985;;10178:20;9993:75;1552:29985;;-1:-1:-1;;;10038:19:79;;1552:29985;;10038:19;9759:125;1552:29985;;-1:-1:-1;;;9850:23:79;;1552:29985;;9850:23;9763:64;-1:-1:-1;9407:14:79;;1552:29985;9407:14;1552:29985;-1:-1:-1;;;;;1552:29985:79;9795:32;;;9763:64;;9497:94;1552:29985;;-1:-1:-1;;;9565:15:79;;1552:29985;;9565:15;9282:45;;;;;1552:29985;9282:45;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;3962:35;1552:29985;;-1:-1:-1;;;3981:16:79;;1552:29985;;3981:16;3666:88:36;1552:29985:79;;-1:-1:-1;;;3713:30:36;;1552:29985:79;;3713:30:36;1552:29985:79;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;1552:29985:79;;;;-1:-1:-1;;;;;;;;;;;1552:29985:79;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;2303:62:32;;:::i;:::-;6412:4:79;1552:29985;;6403:13;1552:29985;;;6403:13;1552:29985;6447:10;6431:27;1552:29985;6431:27;;1552:29985;;;;;;;-1:-1:-1;;1552:29985:79;;;;1754:25;1552:29985;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;-1:-1:-1;;;;;1552:29985:79;;:::i;:::-;;;;1933:44;1552:29985;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;2303:62:32;;:::i;:::-;-1:-1:-1;;;;;;;;;;;1552:29985:79;;-1:-1:-1;;;;;;1552:29985:79;;;;;;;-1:-1:-1;;;;;1552:29985:79;3975:40:32;1552:29985:79;;3975:40:32;1552:29985:79;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;2040:18;1552:29985;;;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;-1:-1:-1;;1552:29985:79;;;;5090:6:34;-1:-1:-1;;;;;1552:29985:79;5081:4:34;5073:23;5069:145;;1552:29985:79;;;811:66:48;1552:29985:79;;;5069:145:34;1552:29985:79;;-1:-1:-1;;;5174:29:34;;1552:29985:79;;5174:29:34;1552:29985:79;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;4667:6:34;1552:29985:79;;4658:4:34;4650:23;;;:120;;;;1552:29985:79;4633:251:34;;;2303:62:32;;:::i;:::-;1552:29985:79;;;;;;;;6131:52:34;;1552:29985:79;6131:52:34;1552:29985:79;6131:52:34;;;;1552:29985:79;;6131:52:34;;;1552:29985:79;-1:-1:-1;6127:437:34;;1552:29985:79;;-1:-1:-1;;;6493:60:34;;1552:29985:79;6493:60:34;;1552:29985:79;;;;;6493:60:34;6127:437;811:66:48;;;;6225:40:34;;;;6221:120;;1748:29:48;;;:34;1744:119;;1552:29985:79;;-1:-1:-1;;;;;;1552:29985:79;;;;;;;;2407:36:48;-1:-1:-1;;2407:36:48;1552:29985:79;;2458:15:48;:11;;4065:25:55;1552:29985:79;4065:25:55;;1552:29985:79;4107:55:55;4065:25;;;;;;;;;:::i;:::-;4107:55;;:::i;2454:148:48:-;6163:9;;;;6159:70;;1552:29985:79;6159:70:48;-1:-1:-1;;;6199:19:48;;1552:29985:79;;6199:19:48;1744:119;1552:29985:79;;-1:-1:-1;;;1805:47:48;;1552:29985:79;1805:47:48;;1552:29985:79;;;;;1805:47:48;6221:120:34;1552:29985:79;;;;6292:34:34;;;;;;1552:29985:79;6292:34:34;;1552:29985:79;6292:34:34;6131:52;;;;1552:29985:79;6131:52:34;;1552:29985:79;6131:52:34;;;;;;1552:29985:79;6131:52:34;;;:::i;:::-;;;1552:29985:79;;;;;6131:52:34;;;;;;;-1:-1:-1;6131:52:34;;4650:120;1552:29985:79;;;811:66:48;1552:29985:79;;4728:42:34;;4650:120;;;1552:29985:79;;;;;;-1:-1:-1;;1552:29985:79;;;;1785:35;1552:29985;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;2303:62:32;;:::i;:::-;1552:29985:79;;6597:14;1552:29985;;6597:14;1552:29985;6644:10;6626:29;1552:29985;6626:29;;1552:29985;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;:::i;:::-;;;:::i;:::-;2303:62:32;;;:::i;:::-;1552:29985:79;;;;;6073:15;;;;;;1552:29985;6090:3;1552:29985;;-1:-1:-1;;;;;6109:53:79;1552:29985;6117:7;;1552:29985;6117:7;;;:::i;:::-;1552:29985;6117:21;;6109:53;:::i;:::-;6189:7;;;;;;;:::i;:::-;1552:29985;;;6227:37;1552:29985;;6176:12;1552:29985;;6176:32;1552:29985;;;;;;;;;;;;;;;;;;;6176:32;6246:7;;;;;;:::i;:::-;1552:29985;;;;;;;6227:37;1552:29985;6058:13;;1552:29985;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;2303:62:32;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;6986:74;6994:35;;;6986:74;:::i;:::-;1552:29985;;;;;;;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;:::i;:::-;5735:33;1552:29985;;;:::i;:::-;2303:62:32;;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;;5633:49;5641:17;;;5633:49;:::i;:::-;1552:29985;;;5692:12;1552:29985;;5692:28;1552:29985;;;;;;;;;;;;;;;;;;;5692:28;1552:29985;;;;;;;5735:33;1552:29985;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;1552:29985:79;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;1552:29985:79;;;;:::o;:::-;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;:::o;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;;-1:-1:-1;;1552:29985:79;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;1552:29985:79;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;1552:29985:79;;;;;;;:::o;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;24764:1;1552:29985;;;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1552:29985:79;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;9282:8;1552:29985;;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;:::o;:::-;;;27295:1;1552:29985;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1552:29985:79;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;1552:29985:79;;;;:::o;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1552:29985:79;;;;:::o;20374:1521::-;;20735:1;1552:29985;;;;;;;;;;:::i;:::-;20735:1;1552:29985;;20893:36;20845:14;;:::i;:::-;20893:36;;:::i;:::-;20869:60;;;:::i;:::-;;;;;:::i;:::-;;21022:14;;:::i;:::-;1552:29985;;;;:::i;:::-;21046:41;;;:::i;:::-;;;;;:::i;:::-;;1552:29985;;;;;;:::i;:::-;20857:1;1552:29985;;;;;;;;;;21151:15;;;:::i;:::-;1552:29985;20735:1;1552:29985;-1:-1:-1;;;;;1552:29985:79;21207:82;;;;;;1552:29985;20735:1;1552:29985;;;;;;;;;;;;;;21207:82;;;;;;:::i;:::-;;;;;;;;;20374:1521;-1:-1:-1;21203:686:79;;;21808:44;21203:686;;;:::i;:::-;;;;;;21533:356;;:::i;:::-;1552:29985;;21649:23;:140;;1552:29985;;21698:49;1552:29985;;;21698:49;;-1:-1:-1;;;21698:49:79;;;1552:29985;;;;;;;;;;;;;:::i;:::-;;;21698:49;;;;;;;;;:::i;:::-;1552:29985;;;;;;;;;;;;;;;;:::i;:::-;21808:44;;;21866:12;:::o;21649:140::-;1552:29985;;;;:::i;:::-;21649:140;;21203:686;21404:128;;:::i;:::-;;;;21203:686;;;21404:128;1552:29985;;;;;;;;;;;;;;;;;;:::i;21203:686::-;21309:58;1552:29985;;;;;;;;;20857:1;1552:29985;;;;;;;;;;;;;21309:58;20857:1;21381:11;:::o;21207:82::-;;;;;;:::i;:::-;20735:1;21207:82;;;;1552:29985;;;-1:-1:-1;;;;;1552:29985:79;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1552:29985:79;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;15916:1024::-;1552:29985;;;;;-1:-1:-1;;;16086:45:79;;-1:-1:-1;;;;;1552:29985:79;;;16086:45;;;1552:29985;;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;16086:45;;-1:-1:-1;;16086:45:79;;;15916:1024;-1:-1:-1;16082:852:79;;16906:17;;;;-1:-1:-1;16906:17:79;-1:-1:-1;16906:17:79;:::o;16082:852::-;1552:29985;16202:17;;1552:29985;;16197:74;;16307:55;:26;;;1552:29985;16336:26;;;1552:29985;16307:55;;:::i;:::-;16289:15;:73;16285:129;;16432:15;16485;-1:-1:-1;16485:15:79;;;;1552:29985;16510:6;1552:29985;;;16432:86;1552:29985;;;;;;;;;;16432:86;;16086:45;16432:86;;;:::i;:::-;;;;;;-1:-1:-1;;16432:86:79;;;16082:852;-1:-1:-1;16428:447:79;;16843:17;;;;;-1:-1:-1;16843:17:79;-1:-1:-1;16843:17:79;:::o;16428:447::-;16664:16;;;1552:29985;;;;;;;;16617:64;;;;;;;;;16086:45;16617:64;;;:::i;:::-;;;;;;;;;;-1:-1:-1;16617:64:79;;;16428:447;16609:72;;16086:45;16609:72;;1552:29985;;;;;;;;;;;;;16718:30;;;;;;;;;;-1:-1:-1;16718:30:79;;;16428:447;16786:17;;;;16428:447;15916:1024::o;16718:30::-;;;;;;;;;;;;;;;;;:::i;:::-;;;1552:29985;;;;;16718:30;;;;;;;;;;;1552:29985;;-1:-1:-1;1552:29985:79;;;;;16617:64;;;;;;;;;;;;;;;;;:::i;:::-;;;1552:29985;;;;;;16086:45;16617:64;;;;;;;;1552:29985;;;-1:-1:-1;1552:29985:79;;;;;16432:86;;;;;;;-1:-1:-1;16432:86:79;;;;;;:::i;:::-;;;;;16285:129;16382:17;;;;-1:-1:-1;16382:17:79;-1:-1:-1;16382:17:79;:::o;16086:45::-;;;;;;;-1:-1:-1;16086:45:79;;;;;;:::i;:::-;;;;;24432:1636;;24875:71;24432:1636;;;;;1552:29985;24748:18;;:::i;:::-;1552:29985;;;-1:-1:-1;;;24875:71:79;;;;;;;;-1:-1:-1;;;;;1552:29985:79;;;24875:71;;;1552:29985;;;;;;;;;;;;;24875:71;;1552:29985;;;;;;;24875:71;;1552:29985;;24875:71;;;;;;:::i;:::-;1552:29985;;-1:-1:-1;;1552:29985:79;;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;-1:-1:-1;24792:165:79;;;1552:29985;24792:165;;;1552:29985;24776:181;;;:::i;:::-;;;;;:::i;:::-;;25089:36;25041:14;;:::i;25089:36::-;25065:60;;;:::i;:::-;;;;;:::i;:::-;;25218:14;;:::i;:::-;1552:29985;;;;:::i;:::-;25242:41;;;:::i;:::-;;;;;:::i;:::-;;1552:29985;;;;;;:::i;:::-;24764:1;1552:29985;;;;;;;;25347:15;;;:::i;:::-;1552:29985;-1:-1:-1;1552:29985:79;;25403:82;;;;;;1552:29985;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;25403:82;;24875:71;25403:82;;;:::i;:::-;;;;;;;;;24432:1636;-1:-1:-1;25399:663:79;;;25977:48;25399:663;;;:::i;:::-;25505:66;1552:29985;;;;;;;;;24764:1;1552:29985;;;;;;;;;;;;;25505:66;24764:1;25585:11;:::o;25403:82::-;;;;;;:::i;:::-;-1:-1:-1;25403:82:79;;;;22331:1618;;;;;22621:18;;:::i;:::-;1552:29985;;;;;22748:79;;12886:164;;;;22748:79;;;;-1:-1:-1;1552:29985:79;;;;;;;;;22748:79;;;1552:29985;13015:17;;1552:29985;;;;;22748:79;;;;;:::i;:::-;1552:29985;;;;;;;:::i;:::-;;;;-1:-1:-1;22665:173:79;;;1552:29985;22665:173;;;1552:29985;22649:189;;;:::i;1552:29985::-;23123:41;;;:::i;:::-;;;;;:::i;:::-;;1552:29985;;;;;;:::i;:::-;22637:1;1552:29985;;;;;;;;23228:15;;;:::i;:::-;1552:29985;-1:-1:-1;1552:29985:79;;23284:82;;;;;;1552:29985;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;23284:82;;22748:79;23284:82;;;:::i;:::-;;;;;;;;;22331:1618;-1:-1:-1;23280:663:79;;;23858:48;23280:663;;;:::i;:::-;23386:66;1552:29985;;;;;;;;;22637:1;1552:29985;;;;;;;;;;;;;23386:66;22637:1;23466:11;:::o;23284:82::-;;;;;;:::i;:::-;-1:-1:-1;23284:82:79;;;;1552:29985;-1:-1:-1;;1552:29985:79;;;;;;;:::o;29308:1706::-;;;;;;;;1552:29985;29682:18;;:::i;:::-;1552:29985;-1:-1:-1;1552:29985:79;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1552:29985:79;;;;;29726:121;;;;1552:29985;;;;;;;:::i;:::-;29726:121;;;1552:29985;29710:137;;;:::i;1552:29985::-;30187:41;;;:::i;:::-;;;;;:::i;:::-;;1552:29985;;;;;;:::i;:::-;29698:1;1552:29985;;;;;;;;30292:15;;;:::i;:::-;1552:29985;-1:-1:-1;1552:29985:79;;30348:82;;;;;;1552:29985;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;30348:82;;;;;;:::i;:::-;;;;;;;;;29308:1706;-1:-1:-1;30344:664:79;;;30923:48;30344:664;;;:::i;:::-;30450:67;1552:29985;;;;;;;;;29698:1;1552:29985;;;;;;;;;;;;;30450:67;29698:1;30531:11;:::o;30348:82::-;;;;;;:::i;:::-;-1:-1:-1;30348:82:79;;;;17159:378;1552:29985;;;;-1:-1:-1;;;17282:45:79;;-1:-1:-1;;;;;1552:29985:79;;;17282:45;;;1552:29985;;;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;17282:45;;-1:-1:-1;;17282:45:79;;;17159:378;-1:-1:-1;17278:253:79;;17512:8;;;-1:-1:-1;17512:8:79;:::o;17278:253::-;17447:15;17400:80;17447:15;;;1552:29985;17472:6;1552:29985;;;17400:80;1552:29985;;;;;;;;;;17400:80;;17282:45;17400:80;;;:::i;:::-;;:15;;:80;;;;;;;-1:-1:-1;17400:80:79;;;17393:87;;:::o;17400:80::-;;;;;;;;;;;;;;;;;:::i;:::-;;;1552:29985;;;;;17393:87;:::o;17400:80::-;;;-1:-1:-1;17400:80:79;;17282:45;;;;;;;-1:-1:-1;17282:45:79;;;;;;:::i;:::-;;;;;18617:1329;;18942:40;;;:::i;:::-;18941:41;18937:127;;19122:46;;;:::i;:::-;1552:29985;-1:-1:-1;;;;;1552:29985:79;;;;19182:28;19178:125;;19348:8;1552:29985;;;-1:-1:-1;;;19348:45:79;;-1:-1:-1;;;;;1552:29985:79;;;;19348:45;;;1552:29985;;;;;;;;;-1:-1:-1;;1552:29985:79;;;;;;;;19348:45;;-1:-1:-1;;19348:45:79;;;18617:1329;-1:-1:-1;19344:596:79;;19867:62;;-1:-1:-1;19867:62:79;-1:-1:-1;19867:62:79;1552:29985;;;;;;:::i;:::-;;;;-1:-1:-1;;;1552:29985:79;;;;19867:62;:::o;19344:596::-;1552:29985;19475:14;;;;;;1552:29985;;19509:17;;1552:29985;;19504:123;;1552:29985;;;;;;19645:31;19641:132;;19348:8;19787:48;;1552:29985;;;;;;:::i;:::-;-1:-1:-1;1552:29985:79;;19787:48;:::o;19641:132::-;-1:-1:-1;19696:62:79;;1552:29985;;;;;;:::i;:::-;;;;-1:-1:-1;;;19475:14:79;1552:29985;;;19696:62;:::o;19504:123::-;19546:66;-1:-1:-1;19546:66:79;;1552:29985;;;;;;:::i;:::-;;;;-1:-1:-1;;;19475:14:79;1552:29985;;;19546:66;:::o;19348:45::-;;;;;;;-1:-1:-1;19348:45:79;;;;;;:::i;:::-;;;;;19178:125;19226:66;;;-1:-1:-1;19226:66:79;-1:-1:-1;19226:66:79;1552:29985;;;;;;:::i;:::-;;;;-1:-1:-1;;;1552:29985:79;;;;19226:66;:::o;18937:127::-;18998:55;;-1:-1:-1;18998:55:79;-1:-1:-1;18998:55:79;-1:-1:-1;1552:29985:79;;;;;;:::i;:::-;;;;-1:-1:-1;;;1552:29985:79;;;;18998:55;:::o;26637:1904::-;;;;;1552:29985;;;;;;;;;:::i;:::-;27024:1;1552:29985;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;;12886:164;;;;;;;27161:82;;;;-1:-1:-1;27161:82:79;1552:29985;;;;;;;;;;27161:82;;;;;1552:29985;13015:17;;1552:29985;;;;;27161:82;;;;;:::i;:::-;1552:29985;;;;;:::i;:::-;;;;27076:178;;1552:29985;27076:178;;;1552:29985;27060:194;;;:::i;:::-;;;;;:::i;:::-;;1552:29985;;;;;;:::i;:::-;;;27300:121;;;1552:29985;;;;:::i;:::-;27300:121;;;1552:29985;27284:137;;;:::i;:::-;;;;;:::i;1552:29985::-;27706:41;;;:::i;:::-;;;;;:::i;:::-;;1552:29985;;;;;;:::i;:::-;27295:1;1552:29985;;;;;;;;27811:15;;;:::i;:::-;1552:29985;-1:-1:-1;1552:29985:79;;27867:82;;;;;;1552:29985;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;27867:82;;27161;27867;;;:::i;:::-;;;;;;;;;1552:29985;-1:-1:-1;27863:672:79;;28448:50;27863:672;;;;:::i;:::-;1552:29985;;;27969:71;1552:29985;;;;27295:1;1552:29985;;;;;;;;;;;;;;;27969:71;27295:1;28054:11;:::o;27867:82::-;;;;;;:::i;:::-;-1:-1:-1;27867:82:79;;;;1552:29985;;;;;;;;;;:::i;:::-;-1:-1:-1;1552:29985:79;;;-1:-1:-1;1552:29985:79;;;;;;;;;;;;;;;;;;;;;;3405:215:32;-1:-1:-1;;;;;1552:29985:79;;;;3489:22:32;;3485:91;;-1:-1:-1;;;;;;;;;;;1552:29985:79;;-1:-1:-1;;;;;;1552:29985:79;;;;;;;;3975:40:32;-1:-1:-1;;3975:40:32;3405:215::o;3485:91::-;1552:29985:79;;-1:-1:-1;;;3534:31:32;;3509:1;3534:31;;;1552:29985:79;;;3534:31:32;2658:162;-1:-1:-1;;;;;;;;;;;1552:29985:79;-1:-1:-1;;;;;1552:29985:79;966:10:35;2717:23:32;2713:101;;2658:162::o;2713:101::-;1552:29985:79;;-1:-1:-1;;;2763:40:32;;966:10:35;2763:40:32;;;1552:29985:79;;;2763:40:32;1087:176:10;1552:29985:79;;;1234:22:10;;;1552:29985:79;;;1234:22:10;;;;;1552:29985:79;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1552:29985:79;;;;;;;1234:22:10;;;;;;;;;;1552:29985:79;;1234:22:10;;;;;;:::i;1552:29985:79:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1386:660:87;920:61;;997:8;1518:68;;-1:-1:-1;1552:29985:79;;;;1807:34:87;;;;;;;;;;;;;;;:::i;:::-;1775:76;;;;;;:::i;:::-;2011:28;;;2004:35;1386:660;:::o;2011:28::-;1807:34;1552:29985:79;;;2022:17:87;1386:660;:::o;1518:68::-;1563:12;-1:-1:-1;1563:12:87;:::o;2414:519::-;920:61;;997:8;2556:75;;-1:-1:-1;1552:29985:79;;;;2751:34:87;;;1807;;;;2751;;;;;;;;:::i;:::-;2717:78;;;;;;:::i;:::-;2810:28;;;;2414:519;2806:93;;2909:17;-1:-1:-1;2414:519:87;:::o;2806:93::-;2751:34;1552:29985:79;;;2861:27:87;;1552:29985:79;;;;2751:34:87;2861:27;1552:29985:79;-1:-1:-1;;;;;1552:29985:79;;;;;;;;2854:34:87;:::o;2810:28::-;1552:29985:79;2751:34:87;1552:29985:79;;2821:17:87;2810:28;;7082:141:33;1552:29985:79;3147:66:33;1552:29985:79;;;;7148:18:33;7144:73;;7082:141::o;7144:73::-;1552:29985:79;;-1:-1:-1;;;7189:17:33;;;;;4437:582:55;;4609:8;;-1:-1:-1;1552:29985:79;;5690:21:55;:17;;5815:105;;;;;;5686:301;1552:29985:79;;-1:-1:-1;;;5957:19:55;;;;;4605:408;1552:29985:79;;4857:22:55;:49;;;4605:408;4853:119;;4985:17;;:::o;4853:119::-;1552:29985:79;;-1:-1:-1;;;4933:24:55;;-1:-1:-1;;;;;1552:29985:79;;;4933:24:55;;;1552:29985:79;;;4933:24:55;4857:49;4883:18;;;:23;4857:49;","linkReferences":{"src/libraries/StrategyLibrary.sol":{"StrategyLibrary":[{"start":2427,"length":20},{"start":2523,"length":20},{"start":2645,"length":20},{"start":3481,"length":20},{"start":3566,"length":20},{"start":3679,"length":20},{"start":10629,"length":20},{"start":12349,"length":20}]}},"immutableReferences":{"42267":[{"start":6674,"length":32},{"start":6859,"length":32}]}},"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","approvedDEXs(address)":"79620965","batchSetDEXApproval(address[],bool)":"2f26c512","config()":"79502c55","delegationManager()":"ea4d3c9b","getPortfolioValue(address,uint256)":"cf0058ca","getVersion()":"0d8e6e2c","initialize(address,address,address,address,address,address)":"cc2a9a5b","oracle()":"7dc0d1d0","owner()":"8da5cb5b","pause()":"8456cb59","paused()":"5c975abb","proxiableUUID()":"52d1902d","rebalance(address,uint256,address[],address[],bytes[],uint256[],uint256[],bytes[],bytes32[])":"b0a8b0f4","registry()":"7b103999","renounceOwnership()":"715018a6","setDEXApproval(address,bool)":"18069a9c","setDelegationManager(address)":"1a8d0de2","shouldRebalance(address,uint256)":"6bcff91a","testDelegationApproval(address,address,address,bytes,bytes32)":"a3a40197","testDelegationNoOp(address,bytes,bytes32)":"5a7fbe53","testDelegationSingleSwap(address,address,address,bytes,uint256,bytes,bytes32)":"f0928866","testDelegationSwapOnly(address,address,bytes,uint256,bytes,bytes32)":"b8282a6b","testDelegationTransfer(address,address,address,uint256,bytes,bytes32)":"9760434a","testStrategyOwnership(address,uint256)":"d48b4a4a","transferOwnership(address)":"f2fde38b","uniswapHelper()":"41258398","unpause()":"3f4ba83a","upgradeToAndCall(address,bytes)":"4f1ef286"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceValidationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DriftBelowThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeleGatorOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotADeleGator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalanceExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapsDidNotImproveAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSoonToRebalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"}],\"name\":\"UnapprovedDEX\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"DEXApprovalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"driftBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"driftAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAfter\",\"type\":\"uint256\"}],\"name\":\"DebugAfterDelegationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionContextsLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"modesLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionLength\",\"type\":\"uint256\"}],\"name\":\"DebugBeforeDelegationCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatorOwner\",\"type\":\"address\"}],\"name\":\"DebugDeleGatorValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drift\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDrift\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"portfolioValue\",\"type\":\"uint256\"}],\"name\":\"DebugDriftCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DebugRebalanceStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DebugStrategyFetched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapCount\",\"type\":\"uint256\"}],\"name\":\"DebugSwapValidationPassed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DebugTestDelegationApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DebugTestDelegationNoOp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DebugTestDelegationSingleSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DebugTestDelegationSwapOnly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"DebugTestDelegationTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategyOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatorOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"DebugTestStrategyOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"EmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"EmergencyUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drift\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasReimbursed\",\"type\":\"uint256\"}],\"name\":\"RebalanceExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RebalanceFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedDEXs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"dexs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"batchSetDEXApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IRebalancerConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationManager\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"getPortfolioValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valueUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPythOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapTargets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"swapCallDatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minOutputAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nativeValues\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"permissionContexts\",\"type\":\"bytes[]\"},{\"internalType\":\"ModeCode[]\",\"name\":\"modes\",\"type\":\"bytes32[]\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract StrategyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setDEXApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDelegationManager\",\"type\":\"address\"}],\"name\":\"setDelegationManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"shouldRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isShouldRebalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"drift\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permissionContext\",\"type\":\"bytes\"},{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"}],\"name\":\"testDelegationApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permissionContext\",\"type\":\"bytes\"},{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"}],\"name\":\"testDelegationNoOp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nativeValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permissionContext\",\"type\":\"bytes\"},{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"}],\"name\":\"testDelegationSingleSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTarget\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapCallData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nativeValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permissionContext\",\"type\":\"bytes\"},{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"}],\"name\":\"testDelegationSwapOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permissionContext\",\"type\":\"bytes\"},{\"internalType\":\"ModeCode\",\"name\":\"mode\",\"type\":\"bytes32\"}],\"name\":\"testDelegationTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"testStrategyOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"strategyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatorOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapHelper\",\"outputs\":[{\"internalType\":\"contract IUniswapHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"SMART ACCOUNT ONLY: All rebalances execute from MetaMask DeleGator accounts Flow: 1. Bot calls rebalance(userAccount, strategyId, delegation) 2. Read strategy from StrategyRegistry 3. Validate userAccount is a DeleGator smart account 4. Verify DeleGator owner matches strategy owner 5. Calculate swaps using StrategyLibrary 6. Build swap calldata for each swap 7. Execute via DelegationManager.redeemDelegations() 8. DelegationManager calls DeleGator.executeFromExecutor() 9. Swaps happen IN the DeleGator (funds stay in smart account) 10. Bot receives gas reimbursement\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"batchSetDEXApproval(address[],bool)\":{\"params\":{\"approved\":\"Whether to approve or revoke\",\"dexs\":\"Array of DEX addresses\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getPortfolioValue(address,uint256)\":{\"params\":{\"strategyId\":\"Strategy ID\",\"userAccount\":\"User's account address\"},\"returns\":{\"valueUSD\":\"Portfolio value in USD (18 decimals)\"}},\"getVersion()\":{\"returns\":{\"_0\":\"Version string\"}},\"initialize(address,address,address,address,address,address)\":{\"params\":{\"_config\":\"Config address\",\"_delegationManager\":\"DelegationManager address\",\"_oracle\":\"Oracle address\",\"_owner\":\"Owner address\",\"_registry\":\"StrategyRegistry address\",\"_uniswapHelper\":\"UniswapHelper address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"rebalance(address,uint256,address[],address[],bytes[],uint256[],uint256[],bytes[],bytes32[])\":{\"details\":\"New architecture: Bot calculates optimal routes OFF-CHAIN via DEX aggregators (1inch/0x/ParaSwap)      and passes the pre-calculated swap data here for ON-CHAIN execution.      This saves gas and enables better pricing through multi-DEX comparison. SECURITY ENHANCEMENTS: - HIGH-1: Validates swap targets against whitelist - HIGH-2: Enforces minimum output amounts for slippage protection - HIGH-3: Validates swaps improve portfolio allocation - HIGH-5: Validates final balances match expected values - MEDIUM-1: Can be paused in emergency - NEW: Supports native token swaps via nativeValues parameter - NEW: Automatically approves tokens before swaps\",\"params\":{\"minOutputAmounts\":\"Minimum output amounts for slippage protection (SECURITY FIX HIGH-2)\",\"modes\":\"Execution modes for DelegationManager\",\"nativeValues\":\"Native token amounts to send with each swap (for native token swaps/wraps)\",\"permissionContexts\":\"Encoded delegations (user's signed delegation)\",\"strategyId\":\"Strategy ID to rebalance\",\"swapCallDatas\":\"Pre-calculated optimal swap calldata (from off-chain DEX aggregator)\",\"swapTargets\":\"Target contracts for each swap (from DEX aggregator)\",\"tokensIn\":\"Tokens being sold in each swap (for approval)\",\"userAccount\":\"User's MetaMask DeleGator account address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDEXApproval(address,bool)\":{\"params\":{\"approved\":\"Whether to approve or revoke\",\"dex\":\"DEX contract address\"}},\"setDelegationManager(address)\":{\"details\":\"ADMIN ONLY: Allows owner to update DelegationManager in case of redeployment\",\"params\":{\"_newDelegationManager\":\"New DelegationManager contract address\"}},\"shouldRebalance(address,uint256)\":{\"params\":{\"strategyId\":\"Strategy ID\",\"userAccount\":\"User's account address\"},\"returns\":{\"drift\":\"Current drift in basis points\",\"isShouldRebalance\":\"True if rebalance is needed\"}},\"testDelegationApproval(address,address,address,bytes,bytes32)\":{\"details\":\"Tests delegation + approval (no swaps)\",\"params\":{\"mode\":\"Execution mode\",\"permissionContext\":\"Encoded delegation with signature\",\"spender\":\"Address to approve\",\"token\":\"Token to approve\",\"userAccount\":\"DeleGator smart account address\"},\"returns\":{\"success\":\"Whether delegation executed successfully\"}},\"testDelegationNoOp(address,bytes,bytes32)\":{\"details\":\"Tests ONLY delegation framework - no swaps, no tokens, just signature validation\",\"params\":{\"mode\":\"Execution mode\",\"permissionContext\":\"Encoded delegation with signature\",\"userAccount\":\"DeleGator smart account address\"},\"returns\":{\"success\":\"Whether delegation executed successfully\"}},\"testDelegationSingleSwap(address,address,address,bytes,uint256,bytes,bytes32)\":{\"details\":\"Tests delegation + ONE swap (minimal complexity)\",\"params\":{\"mode\":\"Execution mode\",\"nativeValue\":\"Native token amount (for native swaps)\",\"permissionContext\":\"Encoded delegation with signature\",\"swapCallData\":\"Swap calldata\",\"swapTarget\":\"DEX contract address\",\"tokenIn\":\"Token being sold\",\"userAccount\":\"DeleGator smart account address\"},\"returns\":{\"success\":\"Whether delegation executed successfully\"}},\"testDelegationSwapOnly(address,address,bytes,uint256,bytes,bytes32)\":{\"details\":\"Assumes approval is already set (from Level 3). Tests if swap alone works through delegation.      This isolates whether the problem is batch execution or the swap itself.\",\"params\":{\"mode\":\"Execution mode\",\"nativeValue\":\"Native token amount (for native swaps)\",\"permissionContext\":\"Encoded delegation with signature\",\"swapCallData\":\"Swap calldata\",\"swapTarget\":\"DEX contract address\",\"userAccount\":\"DeleGator smart account address\"},\"returns\":{\"success\":\"Whether delegation executed successfully\"}},\"testDelegationTransfer(address,address,address,uint256,bytes,bytes32)\":{\"details\":\"Tests delegation + token movement (no DEX swaps)\",\"params\":{\"amount\":\"Amount to transfer\",\"mode\":\"Execution mode\",\"permissionContext\":\"Encoded delegation with signature\",\"recipient\":\"Recipient address\",\"token\":\"Token to transfer\",\"userAccount\":\"DeleGator smart account address\"},\"returns\":{\"success\":\"Whether delegation executed successfully\"}},\"testStrategyOwnership(address,uint256)\":{\"details\":\"This function ONLY tests registry + ownership checks, NO delegation\",\"params\":{\"strategyId\":\"Strategy ID to validate\",\"userAccount\":\"DeleGator smart account address\"},\"returns\":{\"delegatorOwner\":\"DeleGator owner from contract\",\"error\":\"Error message if validation failed\",\"isValid\":\"Whether validation passed\",\"strategyOwner\":\"Strategy owner from registry\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"RebalanceExecutor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchSetDEXApproval(address[],bool)\":{\"notice\":\"SECURITY FIX HIGH-1: Batch approve multiple DEXs\"},\"getPortfolioValue(address,uint256)\":{\"notice\":\"Get portfolio value for a strategy\"},\"getVersion()\":{\"notice\":\"Get contract version\"},\"initialize(address,address,address,address,address,address)\":{\"notice\":\"Initialize the executor\"},\"pause()\":{\"notice\":\"SECURITY FIX MEDIUM-1: Emergency pause\"},\"rebalance(address,uint256,address[],address[],bytes[],uint256[],uint256[],bytes[],bytes32[])\":{\"notice\":\"Execute a rebalance for a user's strategy\"},\"setDEXApproval(address,bool)\":{\"notice\":\"SECURITY FIX HIGH-1: Approve/revoke DEX for swaps\"},\"setDelegationManager(address)\":{\"notice\":\"Update DelegationManager address\"},\"shouldRebalance(address,uint256)\":{\"notice\":\"Check if a strategy should be rebalanced\"},\"testDelegationApproval(address,address,address,bytes,bytes32)\":{\"notice\":\"DEBUG: Test delegation with token approval ONLY\"},\"testDelegationNoOp(address,bytes,bytes32)\":{\"notice\":\"DEBUG: Test delegation with NO execution (tests signature + framework only)\"},\"testDelegationSingleSwap(address,address,address,bytes,uint256,bytes,bytes32)\":{\"notice\":\"DEBUG: Test delegation with single swap (approval + swap)\"},\"testDelegationSwapOnly(address,address,bytes,uint256,bytes,bytes32)\":{\"notice\":\"DEBUG: Test delegation with ONLY swap (no approval) - Level 5b\"},\"testDelegationTransfer(address,address,address,uint256,bytes,bytes32)\":{\"notice\":\"DEBUG: Test delegation with token transfer\"},\"testStrategyOwnership(address,uint256)\":{\"notice\":\"DEBUG: Test strategy ownership validation ONLY\"},\"unpause()\":{\"notice\":\"SECURITY FIX MEDIUM-1: Unpause after emergency\"}},\"notice\":\"Executes portfolio rebalances via MetaMask DelegationManager\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RebalanceExecutor.sol\":\"RebalanceExecutor\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@FCL/=lib/delegation-framework/lib/FCL/solidity/src/\",\":@SCL/=lib/delegation-framework/lib/SCL/src/\",\":@account-abstraction/=lib/delegation-framework/lib/account-abstraction/contracts/\",\":@bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/\",\":@delegation-framework/=lib/delegation-framework/src/\",\":@erc7579/=lib/erc7579-implementation/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":@solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/src/\",\":@solidity/=lib/delegation-framework/lib/SCL/src/\",\":FCL/=lib/delegation-framework/lib/FCL/solidity/src/\",\":FreshCryptoLib/=lib/delegation-framework/lib/FreshCryptoLib/solidity/src/\",\":SCL/=lib/delegation-framework/lib/SCL/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":delegation-framework/=lib/delegation-framework/\",\":ds-test/=lib/erc7579-implementation/node_modules/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc7579-implementation/=lib/erc7579-implementation/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":pyth-sdk-solidity/=lib/pyth-sdk-solidity/\",\":sentinellist/=lib/erc7579-implementation/node_modules/@rhinestone/sentinellist/src/\",\":solady/=lib/erc7579-implementation/node_modules/solady/src/\",\":solidity-bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/\",\":solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/\"],\"viaIR\":true},\"sources\":{\"lib/delegation-framework/lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.5;\\n\\n/**\\n * User Operation struct\\n * @param sender                - The sender account of this request.\\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\\n * @param initCode              - If set, the account contract will be created by this constructor/\\n * @param callData              - The method call to execute on this account.\\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\\n *                                Covers batch overhead.\\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\\n *                                The paymaster will pay for the transaction instead of the sender.\\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct PackedUserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    bytes32 accountGasLimits;\\n    uint256 preVerificationGas;\\n    bytes32 gasFees;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359\",\"license\":\"GPL-3.0\"},\"lib/delegation-framework/src/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT AND Apache-2.0\\npragma solidity 0.8.23;\\n\\nimport { Delegation, Execution, ModeCode } from \\\"../utils/Types.sol\\\";\\n\\n/**\\n * @title IDelegationManager\\n * @notice Interface that exposes methods of a custom DelegationManager implementation.\\n */\\ninterface IDelegationManager {\\n    ////////////////////////////// Events //////////////////////////////\\n\\n    /// @dev Emitted when a delegation is redeemed\\n    event RedeemedDelegation(address indexed rootDelegator, address indexed redeemer, Delegation delegation);\\n\\n    /// @dev Emitted when a delegation is enabled after being disabled\\n    event EnabledDelegation(\\n        bytes32 indexed delegationHash, address indexed delegator, address indexed delegate, Delegation delegation\\n    );\\n\\n    /// @dev Emitted when a delegation is disabled\\n    event DisabledDelegation(\\n        bytes32 indexed delegationHash, address indexed delegator, address indexed delegate, Delegation delegation\\n    );\\n\\n    /// @dev Emitted when the domain hash is set\\n    event SetDomain(\\n        bytes32 indexed domainHash, string name, string domainVersion, uint256 chainId, address indexed contractAddress\\n    );\\n\\n    ////////////////////////////// Errors //////////////////////////////\\n\\n    /// @dev Error thrown when a user attempts to use a disabled delegation\\n    error CannotUseADisabledDelegation();\\n\\n    /// @dev Error thrown when the authority in a chain of delegations doesn't match the expected authority\\n    error InvalidAuthority();\\n\\n    /// @dev Error thrown when the redeemer doesn't match the approved delegate\\n    error InvalidDelegate();\\n\\n    /// @dev Error thrown when the delegator of a delegation doesn't match the caller\\n    error InvalidDelegator();\\n\\n    /// @dev Error thrown when the EOA signature provided is invalid\\n    error InvalidEOASignature();\\n\\n    /// @dev Error thrown when the ERC1271 signature provided is invalid\\n    error InvalidERC1271Signature();\\n\\n    /// @dev Error thrown when the signature is empty\\n    error EmptySignature();\\n\\n    /// @dev Error thrown when the delegation provided is already disabled\\n    error AlreadyDisabled();\\n\\n    /// @dev Error thrown when the delegation provided is already enabled\\n    error AlreadyEnabled();\\n\\n    /// @dev Error thrown when the batch size doesn't match the execution array size\\n    error BatchDataLengthMismatch();\\n\\n    ////////////////////////////// MM Implementation Methods //////////////////////////////\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function enableDelegation(Delegation calldata _delegation) external;\\n\\n    function disableDelegation(Delegation calldata _delegation) external;\\n\\n    function disabledDelegations(bytes32 _delegationHash) external view returns (bool);\\n\\n    function getDelegationHash(Delegation calldata _delegation) external pure returns (bytes32);\\n\\n    function redeemDelegations(\\n        bytes[] calldata _permissionContexts,\\n        ModeCode[] calldata _modes,\\n        bytes[] calldata _executionCallDatas\\n    )\\n        external;\\n\\n    function getDomainHash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6ba56a87c8770c9ee74142a23a82b476c63024734c92df1b0541da846d4d7fd5\",\"license\":\"MIT AND Apache-2.0\"},\"lib/delegation-framework/src/utils/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT AND Apache-2.0\\npragma solidity 0.8.23;\\n\\nimport { PackedUserOperation } from \\\"@account-abstraction/interfaces/PackedUserOperation.sol\\\";\\nimport { Execution } from \\\"@erc7579/interfaces/IERC7579Account.sol\\\";\\nimport { ModeCode, CallType, ExecType, ModeSelector, ModePayload } from \\\"@erc7579/lib/ModeLib.sol\\\";\\n\\n/**\\n * @title EIP712Domain\\n * @notice Struct representing the EIP712 domain for signature validation.\\n */\\nstruct EIP712Domain {\\n    string name;\\n    string version;\\n    uint256 chainId;\\n    address verifyingContract;\\n}\\n\\n/**\\n * @title Delegation\\n * @notice Struct representing a delegation to give a delegate authority to act on behalf of a delegator.\\n * @dev `signature` is ignored during delegation hashing so it can be manipulated post signing.\\n */\\nstruct Delegation {\\n    address delegate;\\n    address delegator;\\n    bytes32 authority;\\n    Caveat[] caveats;\\n    uint256 salt;\\n    bytes signature;\\n}\\n\\n/**\\n * @title Caveat\\n * @notice Struct representing a caveat to enforce on a delegation.\\n * @dev `args` is ignored during caveat hashing so it can be manipulated post signing.\\n */\\nstruct Caveat {\\n    address enforcer;\\n    bytes terms;\\n    bytes args;\\n}\\n\\n/**\\n * @title P256 Public Key\\n * @notice Struct containing the X and Y coordinates of a P256 public key.\\n */\\nstruct P256PublicKey {\\n    uint256 x;\\n    uint256 y;\\n}\\n\\nstruct DecodedWebAuthnSignature {\\n    uint256 r;\\n    uint256 s;\\n    bytes authenticatorData;\\n    bool requireUserVerification;\\n    string clientDataJSONPrefix;\\n    string clientDataJSONSuffix;\\n    uint256 responseTypeLocation;\\n}\\n\",\"keccak256\":\"0xda4094eb4839087157f34750fb4d1a2d6241fbb8ee0d41fd1f2905209e6a05b0\",\"license\":\"MIT AND Apache-2.0\"},\"lib/erc7579-implementation/src/interfaces/IERC7579Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { CallType, ExecType, ModeCode } from \\\"../lib/ModeLib.sol\\\";\\n\\nstruct Execution {\\n    address target;\\n    uint256 value;\\n    bytes callData;\\n}\\n\\ninterface IERC7579Account {\\n    event ModuleInstalled(uint256 moduleTypeId, address module);\\n    event ModuleUninstalled(uint256 moduleTypeId, address module);\\n\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\\n     * @dev Ensure adequate authorization control: i.e. onlyEntryPointOrSelf\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     */\\n    function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\\n\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     *         This function is intended to be called by Executor Modules\\n     * @dev Ensure adequate authorization control: i.e. onlyExecutorModule\\n     *\\n     * @dev MSA MUST implement this function signature.\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     */\\n    function executeFromExecutor(\\n        ModeCode mode,\\n        bytes calldata executionCalldata\\n    )\\n        external\\n        payable\\n        returns (bytes[] memory returnData);\\n\\n    /**\\n     * @dev ERC-1271 isValidSignature\\n     *         This function is intended to be used to validate a smart account signature\\n     * and may forward the call to a validator module\\n     *\\n     * @param hash The hash of the data that is signed\\n     * @param data The data that is signed\\n     */\\n    function isValidSignature(bytes32 hash, bytes calldata data) external view returns (bytes4);\\n\\n    /**\\n     * @dev installs a Module of a certain type on the smart account\\n     * @dev Implement Authorization control of your chosing\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param initData arbitrary data that may be required on the module during `onInstall`\\n     * initialization.\\n     */\\n    function installModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata initData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @dev uninstalls a Module of a certain type on the smart account\\n     * @dev Implement Authorization control of your chosing\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param deInitData arbitrary data that may be required on the module during `onUninstall`\\n     * de-initialization.\\n     */\\n    function uninstallModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata deInitData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * Function to check if the account supports a certain CallType or ExecType (see ModeLib.sol)\\n     * @param encodedMode the encoded mode\\n     */\\n    function supportsExecutionMode(ModeCode encodedMode) external view returns (bool);\\n\\n    /**\\n     * Function to check if the account supports installation of a certain module type Id\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     */\\n    function supportsModule(uint256 moduleTypeId) external view returns (bool);\\n\\n    /**\\n     * Function to check if the account has a certain module installed\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     *      Note: keep in mind that some contracts can be multiple module types at the same time. It\\n     *            thus may be necessary to query multiple module types\\n     * @param module the module address\\n     * @param additionalContext additional context data that the smart account may interpret to\\n     *                          identifiy conditions under which the module is installed.\\n     *                          usually this is not necessary, but for some special hooks that\\n     *                          are stored in mappings, this param might be needed\\n     */\\n    function isModuleInstalled(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata additionalContext\\n    )\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the account id of the smart account\\n     * @return accountImplementationId the account id of the smart account\\n     * the accountId should be structured like so:\\n     *        \\\"vendorname.accountname.semver\\\"\\n     */\\n    function accountId() external view returns (string memory accountImplementationId);\\n}\\n\",\"keccak256\":\"0x08368aba5f1bb83eb57e9f8d31a04edee4be69159b4844a6443f65100917011c\",\"license\":\"MIT\"},\"lib/erc7579-implementation/src/lib/ExecutionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport { Execution } from \\\"../interfaces/IERC7579Account.sol\\\";\\n\\n/**\\n * Helper Library for decoding Execution calldata\\n * malloc for memory allocation is bad for gas. use this assembly instead\\n */\\nlibrary ExecutionLib {\\n    function decodeBatch(bytes calldata callData)\\n        internal\\n        pure\\n        returns (Execution[] calldata executionBatch)\\n    {\\n        /*\\n         * Batch Call Calldata Layout\\n         * Offset (in bytes)    | Length (in bytes) | Contents\\n         * 0x0                  | 0x4               | bytes4 function selector\\n        *  0x4                  | -                 |\\n        abi.encode(IERC7579Execution.Execution[])\\n         */\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPointer := add(callData.offset, calldataload(callData.offset))\\n\\n            // Extract the ERC7579 Executions\\n            executionBatch.offset := add(dataPointer, 32)\\n            executionBatch.length := calldataload(dataPointer)\\n        }\\n    }\\n\\n    function encodeBatch(Execution[] memory executions)\\n        internal\\n        pure\\n        returns (bytes memory callData)\\n    {\\n        callData = abi.encode(executions);\\n    }\\n\\n    function decodeSingle(bytes calldata executionCalldata)\\n        internal\\n        pure\\n        returns (address target, uint256 value, bytes calldata callData)\\n    {\\n        target = address(bytes20(executionCalldata[0:20]));\\n        value = uint256(bytes32(executionCalldata[20:52]));\\n        callData = executionCalldata[52:];\\n    }\\n\\n    function encodeSingle(\\n        address target,\\n        uint256 value,\\n        bytes memory callData\\n    )\\n        internal\\n        pure\\n        returns (bytes memory userOpCalldata)\\n    {\\n        userOpCalldata = abi.encodePacked(target, value, callData);\\n    }\\n}\\n\",\"keccak256\":\"0xa6d41aa7532a4bff83a8c335a8050ebe0c7a73c456d70594d2123dc293892c5c\",\"license\":\"MIT\"},\"lib/erc7579-implementation/src/lib/ModeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\n/**\\n * @title ModeLib\\n * To allow smart accounts to be very simple, but allow for more complex execution, A custom mode\\n * encoding is used.\\n *    Function Signature of execute function:\\n *           function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\\n * This allows for a single bytes32 to be used to encode the execution mode, calltype, execType and\\n * context.\\n * NOTE: Simple Account implementations only have to scope for the most significant byte. Account  that\\n * implement\\n * more complex execution modes may use the entire bytes32.\\n *\\n * |--------------------------------------------------------------------|\\n * | CALLTYPE  | EXECTYPE  |   UNUSED   | ModeSelector  |  ModePayload  |\\n * |--------------------------------------------------------------------|\\n * | 1 byte    | 1 byte    |   4 bytes  | 4 bytes       |   22 bytes    |\\n * |--------------------------------------------------------------------|\\n *\\n * CALLTYPE: 1 byte\\n * CallType is used to determine how the executeCalldata paramter of the execute function has to be\\n * decoded.\\n * It can be either single, batch or delegatecall. In the future different calls could be added.\\n * CALLTYPE can be used by a validation module to determine how to decode <userOp.callData[36:]>.\\n *\\n * EXECTYPE: 1 byte\\n * ExecType is used to determine how the account should handle the execution.\\n * It can indicate if the execution should revert on failure or continue execution.\\n * In the future more execution modes may be added.\\n * Default Behavior (EXECTYPE = 0x00) is to revert on a single failed execution. If one execution in\\n * a batch fails, the entire batch is reverted\\n *\\n * UNUSED: 4 bytes\\n * Unused bytes are reserved for future use.\\n *\\n * ModeSelector: bytes4\\n * The \\\"optional\\\" mode selector can be used by account vendors, to implement custom behavior in\\n * their accounts.\\n * the way a ModeSelector is to be calculated is bytes4(keccak256(\\\"vendorname.featurename\\\"))\\n * this is to prevent collisions between different vendors, while allowing innovation and the\\n * development of new features without coordination between ERC-7579 implementing accounts\\n *\\n * ModePayload: 22 bytes\\n * Mode payload is used to pass additional data to the smart account execution, this may be\\n * interpreted depending on the ModeSelector\\n *\\n * ExecutionCallData: n bytes\\n * single, delegatecall or batch exec abi.encoded as bytes\\n */\\nimport { Execution } from \\\"../interfaces/IERC7579Account.sol\\\";\\n\\n// Custom type for improved developer experience\\ntype ModeCode is bytes32;\\n\\ntype CallType is bytes1;\\n\\ntype ExecType is bytes1;\\n\\ntype ModeSelector is bytes4;\\n\\ntype ModePayload is bytes22;\\n\\n// Default CallType\\nCallType constant CALLTYPE_SINGLE = CallType.wrap(0x00);\\n// Batched CallType\\nCallType constant CALLTYPE_BATCH = CallType.wrap(0x01);\\n// @dev Implementing delegatecall is OPTIONAL!\\n// implement delegatecall with extreme care.\\nCallType constant CALLTYPE_STATIC = CallType.wrap(0xFE);\\nCallType constant CALLTYPE_DELEGATECALL = CallType.wrap(0xFF);\\n\\n// @dev default behavior is to revert on failure\\n// To allow very simple accounts to use mode encoding, the default behavior is to revert on failure\\n// Since this is value 0x00, no additional encoding is required for simple accounts\\nExecType constant EXECTYPE_DEFAULT = ExecType.wrap(0x00);\\n// @dev account may elect to change execution behavior. For example \\\"try exec\\\" / \\\"allow fail\\\"\\nExecType constant EXECTYPE_TRY = ExecType.wrap(0x01);\\n\\nModeSelector constant MODE_DEFAULT = ModeSelector.wrap(bytes4(0x00000000));\\n// Example declaration of a custom mode selector\\nModeSelector constant MODE_OFFSET = ModeSelector.wrap(bytes4(keccak256(\\\"default.mode.offset\\\")));\\n\\n/**\\n * @dev ModeLib is a helper library to encode/decode ModeCodes\\n */\\nlibrary ModeLib {\\n    function decode(ModeCode mode)\\n        internal\\n        pure\\n        returns (\\n            CallType _calltype,\\n            ExecType _execType,\\n            ModeSelector _modeSelector,\\n            ModePayload _modePayload\\n        )\\n    {\\n        assembly {\\n            _calltype := mode\\n            _execType := shl(8, mode)\\n            _modeSelector := shl(48, mode)\\n            _modePayload := shl(80, mode)\\n        }\\n    }\\n\\n    function encode(\\n        CallType callType,\\n        ExecType execType,\\n        ModeSelector mode,\\n        ModePayload payload\\n    )\\n        internal\\n        pure\\n        returns (ModeCode)\\n    {\\n        return ModeCode.wrap(\\n            bytes32(\\n                abi.encodePacked(callType, execType, bytes4(0), ModeSelector.unwrap(mode), payload)\\n            )\\n        );\\n    }\\n\\n    function encodeSimpleBatch() internal pure returns (ModeCode mode) {\\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\\n    }\\n\\n    function encodeSimpleSingle() internal pure returns (ModeCode mode) {\\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\\n    }\\n\\n    function getCallType(ModeCode mode) internal pure returns (CallType calltype) {\\n        assembly {\\n            calltype := mode\\n        }\\n    }\\n}\\n\\nusing { eqModeSelector as == } for ModeSelector global;\\nusing { eqCallType as == } for CallType global;\\nusing { eqExecType as == } for ExecType global;\\n\\nfunction eqCallType(CallType a, CallType b) pure returns (bool) {\\n    return CallType.unwrap(a) == CallType.unwrap(b);\\n}\\n\\nfunction eqExecType(ExecType a, ExecType b) pure returns (bool) {\\n    return ExecType.unwrap(a) == ExecType.unwrap(b);\\n}\\n\\nfunction eqModeSelector(ModeSelector a, ModeSelector b) pure returns (bool) {\\n    return ModeSelector.unwrap(a) == ModeSelector.unwrap(b);\\n}\\n\",\"keccak256\":\"0x02ce0fc8805d1427841f32e2335157e3fae18e99d5c49ba46d53e12fcd1a5185\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\\n     *\\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\\n     */\\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\\n        return INITIALIZABLE_STORAGE;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        bytes32 slot = _initializableStorageSlot();\\n        assembly {\\n            $.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\\n\\npragma solidity >=0.4.11;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.21;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"src/RebalanceExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./libraries/StrategyLibrary.sol\\\";\\nimport \\\"./StrategyRegistry.sol\\\";\\nimport \\\"./interfaces/IPythOracle.sol\\\";\\nimport \\\"./interfaces/IUniswapHelper.sol\\\";\\nimport \\\"./interfaces/IRebalancerConfig.sol\\\";\\nimport \\\"./delegation/interfaces/IDelegationManager.sol\\\";\\nimport { Delegation, ModeCode, Execution } from \\\"@delegation-framework/utils/Types.sol\\\";\\nimport { ExecutionLib } from \\\"@erc7579/lib/ExecutionLib.sol\\\";\\nimport \\\"./delegation/types/DelegationTypes.sol\\\";\\n\\n/**\\n * @title RebalanceExecutor\\n * @notice Executes portfolio rebalances via MetaMask DelegationManager\\n * @dev SMART ACCOUNT ONLY: All rebalances execute from MetaMask DeleGator accounts\\n *\\n * Flow:\\n * 1. Bot calls rebalance(userAccount, strategyId, delegation)\\n * 2. Read strategy from StrategyRegistry\\n * 3. Validate userAccount is a DeleGator smart account\\n * 4. Verify DeleGator owner matches strategy owner\\n * 5. Calculate swaps using StrategyLibrary\\n * 6. Build swap calldata for each swap\\n * 7. Execute via DelegationManager.redeemDelegations()\\n * 8. DelegationManager calls DeleGator.executeFromExecutor()\\n * 9. Swaps happen IN the DeleGator (funds stay in smart account)\\n * 10. Bot receives gas reimbursement\\n */\\ncontract RebalanceExecutor is Initializable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    IDelegationManager public delegationManager;\\n    StrategyRegistry public registry;\\n    IPythOracle public oracle;\\n    IUniswapHelper public uniswapHelper;\\n    IRebalancerConfig public config;\\n\\n    // SECURITY FIX HIGH-1: DEX whitelist for swap target validation\\n    mapping(address => bool) public approvedDEXs;\\n\\n    // SECURITY FIX MEDIUM-1: Emergency pause mechanism\\n    bool public paused;\\n\\n    // Events\\n    event RebalanceExecuted(\\n        address indexed user, uint256 indexed strategyId, uint256 timestamp, uint256 drift, uint256 gasReimbursed\\n    );\\n    event RebalanceFailed(address indexed user, uint256 indexed strategyId, string reason);\\n    event SwapExecuted(address indexed user, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\\n    event DEXApprovalUpdated(address indexed dex, bool approved);\\n    event EmergencyPaused(address indexed caller);\\n    event EmergencyUnpaused(address indexed caller);\\n\\n    // DEBUG: Detailed logging events for error tracing\\n    event DebugRebalanceStarted(address indexed user, uint256 indexed strategyId, address sender);\\n    event DebugStrategyFetched(address indexed user, uint256 indexed strategyId, bool isActive, address owner);\\n    event DebugDeleGatorValidated(address indexed user, address delegatorOwner);\\n    event DebugDriftCalculated(uint256 drift, uint256 maxDrift, uint256 portfolioValue);\\n    event DebugSwapValidationPassed(uint256 swapCount);\\n    event DebugBeforeDelegationCall(uint256 permissionContextsLength, uint256 modesLength, uint256 executionLength);\\n    event DebugAfterDelegationCall(uint256 driftBefore, uint256 driftAfter, uint256 valueBefore, uint256 valueAfter);\\n\\n    // Errors\\n    error StrategyNotActive();\\n    error TooSoonToRebalance();\\n    error DriftBelowThreshold();\\n    error InvalidDelegation();\\n    error RebalanceExecutionFailed();\\n    error UnapprovedDEX(address dex);\\n    error InsufficientSlippageProtection();\\n    error SwapsDidNotImproveAllocation();\\n    error BalanceValidationFailed();\\n    error ContractPaused();\\n    error NotADeleGator();\\n    error InvalidDeleGatorOwner();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // SECURITY FIX MEDIUM-1: Pause modifier\\n    modifier whenNotPaused() {\\n        if (paused) revert ContractPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialize the executor\\n     * @param _owner Owner address\\n     * @param _delegationManager DelegationManager address\\n     * @param _registry StrategyRegistry address\\n     * @param _oracle Oracle address\\n     * @param _uniswapHelper UniswapHelper address\\n     * @param _config Config address\\n     */\\n    function initialize(\\n        address _owner,\\n        address _delegationManager,\\n        address _registry,\\n        address _oracle,\\n        address _uniswapHelper,\\n        address _config\\n    ) external initializer {\\n        require(_owner != address(0), \\\"Invalid owner\\\");\\n        require(_delegationManager != address(0), \\\"Invalid delegation manager\\\");\\n        require(_registry != address(0), \\\"Invalid registry\\\");\\n        require(_oracle != address(0), \\\"Invalid oracle\\\");\\n        require(_uniswapHelper != address(0), \\\"Invalid uniswap helper\\\");\\n        require(_config != address(0), \\\"Invalid config\\\");\\n\\n        __Ownable_init(_owner);\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n\\n        delegationManager = IDelegationManager(_delegationManager);\\n        registry = StrategyRegistry(_registry);\\n        oracle = IPythOracle(_oracle);\\n        uniswapHelper = IUniswapHelper(_uniswapHelper);\\n        config = IRebalancerConfig(_config);\\n\\n        // SECURITY: Start unpaused\\n        paused = false;\\n    }\\n\\n    /**\\n     * @notice SECURITY FIX HIGH-1: Approve/revoke DEX for swaps\\n     * @param dex DEX contract address\\n     * @param approved Whether to approve or revoke\\n     */\\n    function setDEXApproval(address dex, bool approved) external onlyOwner {\\n        require(dex != address(0), \\\"Invalid DEX address\\\");\\n        approvedDEXs[dex] = approved;\\n        emit DEXApprovalUpdated(dex, approved);\\n    }\\n\\n    /**\\n     * @notice SECURITY FIX HIGH-1: Batch approve multiple DEXs\\n     * @param dexs Array of DEX addresses\\n     * @param approved Whether to approve or revoke\\n     */\\n    function batchSetDEXApproval(address[] calldata dexs, bool approved) external onlyOwner {\\n        for (uint256 i = 0; i < dexs.length; i++) {\\n            require(dexs[i] != address(0), \\\"Invalid DEX address\\\");\\n            approvedDEXs[dexs[i]] = approved;\\n            emit DEXApprovalUpdated(dexs[i], approved);\\n        }\\n    }\\n\\n    /**\\n     * @notice SECURITY FIX MEDIUM-1: Emergency pause\\n     */\\n    function pause() external onlyOwner {\\n        paused = true;\\n        emit EmergencyPaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice SECURITY FIX MEDIUM-1: Unpause after emergency\\n     */\\n    function unpause() external onlyOwner {\\n        paused = false;\\n        emit EmergencyUnpaused(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Update DelegationManager address\\n     * @param _newDelegationManager New DelegationManager contract address\\n     * @dev ADMIN ONLY: Allows owner to update DelegationManager in case of redeployment\\n     */\\n    function setDelegationManager(address _newDelegationManager) external onlyOwner {\\n        require(_newDelegationManager != address(0), \\\"Invalid delegation manager\\\");\\n        delegationManager = IDelegationManager(_newDelegationManager);\\n    }\\n\\n    /**\\n     * @notice Execute a rebalance for a user's strategy\\n     * @param userAccount User's MetaMask DeleGator account address\\n     * @param strategyId Strategy ID to rebalance\\n     * @param tokensIn Tokens being sold in each swap (for approval)\\n     * @param swapTargets Target contracts for each swap (from DEX aggregator)\\n     * @param swapCallDatas Pre-calculated optimal swap calldata (from off-chain DEX aggregator)\\n     * @param minOutputAmounts Minimum output amounts for slippage protection (SECURITY FIX HIGH-2)\\n     * @param nativeValues Native token amounts to send with each swap (for native token swaps/wraps)\\n     * @param permissionContexts Encoded delegations (user's signed delegation)\\n     * @param modes Execution modes for DelegationManager\\n     *\\n     * @dev New architecture: Bot calculates optimal routes OFF-CHAIN via DEX aggregators (1inch/0x/ParaSwap)\\n     *      and passes the pre-calculated swap data here for ON-CHAIN execution.\\n     *      This saves gas and enables better pricing through multi-DEX comparison.\\n     *\\n     * SECURITY ENHANCEMENTS:\\n     * - HIGH-1: Validates swap targets against whitelist\\n     * - HIGH-2: Enforces minimum output amounts for slippage protection\\n     * - HIGH-3: Validates swaps improve portfolio allocation\\n     * - HIGH-5: Validates final balances match expected values\\n     * - MEDIUM-1: Can be paused in emergency\\n     * - NEW: Supports native token swaps via nativeValues parameter\\n     * - NEW: Automatically approves tokens before swaps\\n     */\\n    function rebalance(\\n        address userAccount,\\n        uint256 strategyId,\\n        address[] calldata tokensIn,\\n        address[] calldata swapTargets,\\n        bytes[] calldata swapCallDatas,\\n        uint256[] calldata minOutputAmounts,\\n        uint256[] calldata nativeValues,\\n        bytes[] calldata permissionContexts,\\n        ModeCode[] calldata modes\\n    ) external payable nonReentrant whenNotPaused {\\n        // DEBUG: Log function entry\\n        emit DebugRebalanceStarted(userAccount, strategyId, msg.sender);\\n\\n        // 1. Get strategy from registry\\n        StrategyLibrary.Strategy memory strategy = registry.getStrategy(userAccount, strategyId);\\n        emit DebugStrategyFetched(userAccount, strategyId, strategy.isActive, strategy.owner);\\n\\n        // 2. Validate userAccount is a DeleGator smart account\\n        if (!DelegationTypes.isDeleGator(userAccount)) {\\n            revert NotADeleGator();\\n        }\\n\\n        // 3. Verify strategy owner matches DeleGator owner (security check)\\n        address delegatorOwner = DelegationTypes.getDeleGatorOwner(userAccount);\\n        if (delegatorOwner == address(0) || delegatorOwner != strategy.owner) {\\n            revert InvalidDeleGatorOwner();\\n        }\\n        emit DebugDeleGatorValidated(userAccount, delegatorOwner);\\n\\n        // 4. Validate strategy\\n        if (!strategy.isActive) {\\n            revert StrategyNotActive();\\n        }\\n\\n        if (block.timestamp < strategy.lastRebalanceTime + strategy.rebalanceInterval) {\\n            revert TooSoonToRebalance();\\n        }\\n\\n        // 5. Calculate current drift and portfolio value BEFORE swaps\\n        uint256[] memory currentWeightsBefore =\\n            StrategyLibrary.calculateCurrentWeights(userAccount, strategy.tokens, address(oracle));\\n        uint256 drift = StrategyLibrary.calculateDrift(currentWeightsBefore, strategy.weights);\\n\\n        // SECURITY FIX HIGH-3: Store portfolio value before swaps\\n        uint256 portfolioValueBefore = StrategyLibrary.getPortfolioValue(userAccount, strategy.tokens, address(oracle));\\n\\n        // 6. Check drift exceeds threshold\\n        uint256 maxDrift = config.getMaxAllocationDrift();\\n        if (drift < maxDrift) {\\n            revert DriftBelowThreshold();\\n        }\\n        emit DebugDriftCalculated(drift, maxDrift, portfolioValueBefore);\\n\\n        // 7. Validate swap data\\n        require(tokensIn.length == swapTargets.length, \\\"TokensIn length mismatch\\\");\\n        require(swapTargets.length == swapCallDatas.length, \\\"Swap arrays length mismatch\\\");\\n        require(swapTargets.length == minOutputAmounts.length, \\\"Min output amounts length mismatch\\\");\\n        require(swapTargets.length == nativeValues.length, \\\"Native values length mismatch\\\");\\n        require(swapTargets.length > 0, \\\"No swaps provided\\\");\\n\\n        // SECURITY FIX HIGH-1: Validate all swap targets are approved DEXs\\n        for (uint256 i = 0; i < swapTargets.length; i++) {\\n            if (!approvedDEXs[swapTargets[i]]) {\\n                revert UnapprovedDEX(swapTargets[i]);\\n            }\\n        }\\n\\n        // SECURITY FIX HIGH-2: Validate slippage protection is provided\\n        for (uint256 i = 0; i < minOutputAmounts.length; i++) {\\n            if (minOutputAmounts[i] == 0) {\\n                revert InsufficientSlippageProtection();\\n            }\\n        }\\n        emit DebugSwapValidationPassed(swapTargets.length);\\n\\n        // 8. Build execution calldata for each swap using MetaMask's Execution format\\n        // Bot provides pre-calculated optimal routes from DEX aggregators\\n        // Native values allow DeleGator to send its own native tokens with swaps/wraps\\n\\n        // Build Execution[] array with approval + swap for each token\\n        // MetaMask's DelegationManager expects ERC-7579 Execution format\\n        Execution[] memory executions = new Execution[](swapTargets.length * 2);\\n        uint256 idx = 0;\\n\\n        for (uint256 i = 0; i < swapTargets.length; i++) {\\n            // 1. Approval execution: DeleGator approves DEX to spend tokens\\n            executions[idx++] = Execution({\\n                target: tokensIn[i],        // Token contract address\\n                value: 0,                   // No native value for approval\\n                callData: abi.encodeWithSignature(\\n                    \\\"approve(address,uint256)\\\",\\n                    swapTargets[i],\\n                    type(uint256).max\\n                )\\n            });\\n\\n            // 2. Swap execution: DeleGator calls DEX to execute swap\\n            executions[idx++] = Execution({\\n                target: swapTargets[i],     // DEX contract address\\n                value: nativeValues[i],     // Native token amount (for native swaps/wraps)\\n                callData: swapCallDatas[i]  // Pre-calculated optimal swap route\\n            });\\n        }\\n\\n        // Encode executions using MetaMask's ExecutionLib (ERC-7579 format)\\n        // This produces the correct format for DelegationManager.redeemDelegations()\\n        bytes[] memory executionCallDatas = new bytes[](1);\\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\\n\\n        // 9. Execute via DelegationManager\\n        emit DebugBeforeDelegationCall(permissionContexts.length, modes.length, executionCallDatas.length);\\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\\n            // SECURITY FIX HIGH-3 & HIGH-5: Validate swaps improved allocation\\n            uint256[] memory currentWeightsAfter =\\n                StrategyLibrary.calculateCurrentWeights(userAccount, strategy.tokens, address(oracle));\\n            uint256 driftAfter = StrategyLibrary.calculateDrift(currentWeightsAfter, strategy.weights);\\n\\n            // Drift should be reduced after rebalancing\\n            if (driftAfter >= drift) {\\n                revert SwapsDidNotImproveAllocation();\\n            }\\n\\n            // SECURITY FIX HIGH-3: Portfolio value should not decrease significantly (allowing for slippage)\\n            uint256 portfolioValueAfter =\\n                StrategyLibrary.getPortfolioValue(userAccount, strategy.tokens, address(oracle));\\n            uint256 maxSlippageBps = config.getMaxSlippage();\\n            uint256 minAcceptableValue = (portfolioValueBefore * (10000 - maxSlippageBps)) / 10000;\\n\\n            emit DebugAfterDelegationCall(drift, driftAfter, portfolioValueBefore, portfolioValueAfter);\\n\\n            if (portfolioValueAfter < minAcceptableValue) {\\n                revert BalanceValidationFailed();\\n            }\\n\\n            // 10. Update strategy last rebalance time\\n            registry.updateLastRebalanceTime(userAccount, strategyId);\\n\\n            // 11. Calculate gas reimbursement\\n            uint256 gasReimbursed = msg.value;\\n\\n            emit RebalanceExecuted(userAccount, strategyId, block.timestamp, drift, gasReimbursed);\\n        } catch Error(string memory reason) {\\n            emit RebalanceFailed(userAccount, strategyId, reason);\\n            revert RebalanceExecutionFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Check if a strategy should be rebalanced\\n     * @param userAccount User's account address\\n     * @param strategyId Strategy ID\\n     * @return isShouldRebalance True if rebalance is needed\\n     * @return drift Current drift in basis points\\n     */\\n    function shouldRebalance(address userAccount, uint256 strategyId)\\n        external\\n        view\\n        returns (bool isShouldRebalance, uint256 drift)\\n    {\\n        try registry.getStrategy(userAccount, strategyId) returns (StrategyLibrary.Strategy memory strategy) {\\n            if (!strategy.isActive) {\\n                return (false, 0);\\n            }\\n\\n            if (block.timestamp < strategy.lastRebalanceTime + strategy.rebalanceInterval) {\\n                return (false, 0);\\n            }\\n\\n            try StrategyLibrary.calculateCurrentWeights(userAccount, strategy.tokens, address(oracle)) returns (\\n                uint256[] memory currentWeights\\n            ) {\\n                drift = StrategyLibrary.calculateDrift(currentWeights, strategy.weights);\\n                uint256 maxDrift = config.getMaxAllocationDrift();\\n                isShouldRebalance = drift >= maxDrift;\\n            } catch {\\n                return (false, 0);\\n            }\\n        } catch {\\n            return (false, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get portfolio value for a strategy\\n     * @param userAccount User's account address\\n     * @param strategyId Strategy ID\\n     * @return valueUSD Portfolio value in USD (18 decimals)\\n     */\\n    function getPortfolioValue(address userAccount, uint256 strategyId) external view returns (uint256 valueUSD) {\\n        try registry.getStrategy(userAccount, strategyId) returns (StrategyLibrary.Strategy memory strategy) {\\n            return StrategyLibrary.getPortfolioValue(userAccount, strategy.tokens, address(oracle));\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    // ============================================\\n    // DEBUGGING FUNCTIONS\\n    // ============================================\\n\\n    // Events for debugging\\n    event DebugTestStrategyOwnership(\\n        bool isValid,\\n        address strategyOwner,\\n        address delegatorOwner,\\n        string error\\n    );\\n    event DebugTestDelegationNoOp(bool success, string message);\\n    event DebugTestDelegationTransfer(bool success, string message);\\n    event DebugTestDelegationApproval(bool success, string message);\\n    event DebugTestDelegationSingleSwap(bool success, string message);\\n\\n    /**\\n     * @notice DEBUG: Test strategy ownership validation ONLY\\n     * @param userAccount DeleGator smart account address\\n     * @param strategyId Strategy ID to validate\\n     * @return isValid Whether validation passed\\n     * @return strategyOwner Strategy owner from registry\\n     * @return delegatorOwner DeleGator owner from contract\\n     * @return error Error message if validation failed\\n     * @dev This function ONLY tests registry + ownership checks, NO delegation\\n     */\\n    function testStrategyOwnership(address userAccount, uint256 strategyId)\\n        external\\n        view\\n        returns (\\n            bool isValid,\\n            address strategyOwner,\\n            address delegatorOwner,\\n            string memory error\\n        )\\n    {\\n        // Check if userAccount is a DeleGator\\n        if (!DelegationTypes.isDeleGator(userAccount)) {\\n            return (false, address(0), address(0), \\\"NotADeleGator\\\");\\n        }\\n\\n        // Get DeleGator owner\\n        delegatorOwner = DelegationTypes.getDeleGatorOwner(userAccount);\\n        if (delegatorOwner == address(0)) {\\n            return (false, address(0), delegatorOwner, \\\"DeleGatorOwnerIsZero\\\");\\n        }\\n\\n        // Try to get strategy\\n        try registry.getStrategy(userAccount, strategyId) returns (StrategyLibrary.Strategy memory strategy) {\\n            strategyOwner = strategy.owner;\\n\\n            if (!strategy.isActive) {\\n                return (false, strategyOwner, delegatorOwner, \\\"StrategyNotActive\\\");\\n            }\\n\\n            if (strategyOwner != delegatorOwner) {\\n                return (false, strategyOwner, delegatorOwner, \\\"OwnerMismatch\\\");\\n            }\\n\\n            return (true, strategyOwner, delegatorOwner, \\\"\\\");\\n        } catch {\\n            return (false, address(0), delegatorOwner, \\\"StrategyNotFound\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice DEBUG: Test delegation with NO execution (tests signature + framework only)\\n     * @param userAccount DeleGator smart account address\\n     * @param permissionContext Encoded delegation with signature\\n     * @param mode Execution mode\\n     * @return success Whether delegation executed successfully\\n     * @dev Tests ONLY delegation framework - no swaps, no tokens, just signature validation\\n     */\\n    function testDelegationNoOp(\\n        address userAccount,\\n        bytes calldata permissionContext,\\n        ModeCode mode\\n    ) external returns (bool success) {\\n        // Build truly empty execution (no operations at all)\\n        // This tests ONLY the delegation framework without any actual execution\\n        Execution[] memory executions = new Execution[](0);  // Empty array = no-op\\n\\n        // Encode using ExecutionLib\\n        bytes[] memory executionCallDatas = new bytes[](1);\\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\\n\\n        // Build arrays for redeemDelegations\\n        bytes[] memory permissionContexts = new bytes[](1);\\n        permissionContexts[0] = permissionContext;\\n\\n        ModeCode[] memory modes = new ModeCode[](1);\\n        modes[0] = mode;\\n\\n        // Try to execute\\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\\n            emit DebugTestDelegationNoOp(true, \\\"NoOp delegation succeeded\\\");\\n            return true;\\n        } catch Error(string memory reason) {\\n            emit DebugTestDelegationNoOp(false, reason);\\n            return false;\\n        } catch (bytes memory lowLevelData) {\\n            // Decode low-level revert\\n            string memory decodedError = lowLevelData.length > 0\\n                ? string(abi.encodePacked(\\\"LowLevelRevert:\\\", lowLevelData))\\n                : \\\"LowLevelRevertNoData\\\";\\n            emit DebugTestDelegationNoOp(false, decodedError);\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice DEBUG: Test delegation with token approval ONLY\\n     * @param userAccount DeleGator smart account address\\n     * @param token Token to approve\\n     * @param spender Address to approve\\n     * @param permissionContext Encoded delegation with signature\\n     * @param mode Execution mode\\n     * @return success Whether delegation executed successfully\\n     * @dev Tests delegation + approval (no swaps)\\n     */\\n    function testDelegationApproval(\\n        address userAccount,\\n        address token,\\n        address spender,\\n        bytes calldata permissionContext,\\n        ModeCode mode\\n    ) external returns (bool success) {\\n        // Build approval execution\\n        Execution[] memory executions = new Execution[](1);\\n        executions[0] = Execution({\\n            target: token,\\n            value: 0,\\n            callData: abi.encodeWithSignature(\\\"approve(address,uint256)\\\", spender, type(uint256).max)\\n        });\\n\\n        // Encode using ExecutionLib\\n        bytes[] memory executionCallDatas = new bytes[](1);\\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\\n\\n        // Build arrays for redeemDelegations\\n        bytes[] memory permissionContexts = new bytes[](1);\\n        permissionContexts[0] = permissionContext;\\n\\n        ModeCode[] memory modes = new ModeCode[](1);\\n        modes[0] = mode;\\n\\n        // Try to execute\\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\\n            emit DebugTestDelegationApproval(true, \\\"Approval delegation succeeded\\\");\\n            return true;\\n        } catch Error(string memory reason) {\\n            emit DebugTestDelegationApproval(false, reason);\\n            return false;\\n        } catch (bytes memory lowLevelData) {\\n            string memory decodedError = lowLevelData.length > 0\\n                ? string(abi.encodePacked(\\\"LowLevelRevert:\\\", lowLevelData))\\n                : \\\"LowLevelRevertNoData\\\";\\n            emit DebugTestDelegationApproval(false, decodedError);\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice DEBUG: Test delegation with token transfer\\n     * @param userAccount DeleGator smart account address\\n     * @param token Token to transfer\\n     * @param recipient Recipient address\\n     * @param amount Amount to transfer\\n     * @param permissionContext Encoded delegation with signature\\n     * @param mode Execution mode\\n     * @return success Whether delegation executed successfully\\n     * @dev Tests delegation + token movement (no DEX swaps)\\n     */\\n    function testDelegationTransfer(\\n        address userAccount,\\n        address token,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata permissionContext,\\n        ModeCode mode\\n    ) external returns (bool success) {\\n        // Build transfer execution\\n        Execution[] memory executions = new Execution[](1);\\n        executions[0] = Execution({\\n            target: token,\\n            value: 0,\\n            callData: abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", recipient, amount)\\n        });\\n\\n        // Encode using ExecutionLib\\n        bytes[] memory executionCallDatas = new bytes[](1);\\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\\n\\n        // Build arrays for redeemDelegations\\n        bytes[] memory permissionContexts = new bytes[](1);\\n        permissionContexts[0] = permissionContext;\\n\\n        ModeCode[] memory modes = new ModeCode[](1);\\n        modes[0] = mode;\\n\\n        // Try to execute\\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\\n            emit DebugTestDelegationTransfer(true, \\\"Transfer delegation succeeded\\\");\\n            return true;\\n        } catch Error(string memory reason) {\\n            emit DebugTestDelegationTransfer(false, reason);\\n            return false;\\n        } catch (bytes memory lowLevelData) {\\n            string memory decodedError = lowLevelData.length > 0\\n                ? string(abi.encodePacked(\\\"LowLevelRevert:\\\", lowLevelData))\\n                : \\\"LowLevelRevertNoData\\\";\\n            emit DebugTestDelegationTransfer(false, decodedError);\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice DEBUG: Test delegation with single swap (approval + swap)\\n     * @param userAccount DeleGator smart account address\\n     * @param tokenIn Token being sold\\n     * @param swapTarget DEX contract address\\n     * @param swapCallData Swap calldata\\n     * @param nativeValue Native token amount (for native swaps)\\n     * @param permissionContext Encoded delegation with signature\\n     * @param mode Execution mode\\n     * @return success Whether delegation executed successfully\\n     * @dev Tests delegation + ONE swap (minimal complexity)\\n     */\\n    function testDelegationSingleSwap(\\n        address userAccount,\\n        address tokenIn,\\n        address swapTarget,\\n        bytes calldata swapCallData,\\n        uint256 nativeValue,\\n        bytes calldata permissionContext,\\n        ModeCode mode\\n    ) external returns (bool success) {\\n        // Build approval + swap executions\\n        Execution[] memory executions = new Execution[](2);\\n\\n        // 1. Approval\\n        executions[0] = Execution({\\n            target: tokenIn,\\n            value: 0,\\n            callData: abi.encodeWithSignature(\\\"approve(address,uint256)\\\", swapTarget, type(uint256).max)\\n        });\\n\\n        // 2. Swap\\n        executions[1] = Execution({\\n            target: swapTarget,\\n            value: nativeValue,\\n            callData: swapCallData\\n        });\\n\\n        // Encode using ExecutionLib\\n        bytes[] memory executionCallDatas = new bytes[](1);\\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\\n\\n        // Build arrays for redeemDelegations\\n        bytes[] memory permissionContexts = new bytes[](1);\\n        permissionContexts[0] = permissionContext;\\n\\n        ModeCode[] memory modes = new ModeCode[](1);\\n        modes[0] = mode;\\n\\n        // Try to execute\\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\\n            emit DebugTestDelegationSingleSwap(true, \\\"Single swap delegation succeeded\\\");\\n            return true;\\n        } catch Error(string memory reason) {\\n            emit DebugTestDelegationSingleSwap(false, reason);\\n            return false;\\n        } catch (bytes memory lowLevelData) {\\n            string memory decodedError = lowLevelData.length > 0\\n                ? string(abi.encodePacked(\\\"LowLevelRevert:\\\", lowLevelData))\\n                : \\\"LowLevelRevertNoData\\\";\\n            emit DebugTestDelegationSingleSwap(false, decodedError);\\n            return false;\\n        }\\n    }\\n\\n    // Event for swap-only test\\n    event DebugTestDelegationSwapOnly(bool success, string message);\\n\\n    /**\\n     * @notice DEBUG: Test delegation with ONLY swap (no approval) - Level 5b\\n     * @param userAccount DeleGator smart account address\\n     * @param swapTarget DEX contract address\\n     * @param swapCallData Swap calldata\\n     * @param nativeValue Native token amount (for native swaps)\\n     * @param permissionContext Encoded delegation with signature\\n     * @param mode Execution mode\\n     * @return success Whether delegation executed successfully\\n     * @dev Assumes approval is already set (from Level 3). Tests if swap alone works through delegation.\\n     *      This isolates whether the problem is batch execution or the swap itself.\\n     */\\n    function testDelegationSwapOnly(\\n        address userAccount,\\n        address swapTarget,\\n        bytes calldata swapCallData,\\n        uint256 nativeValue,\\n        bytes calldata permissionContext,\\n        ModeCode mode\\n    ) external returns (bool success) {\\n        // Build ONLY swap execution (approval assumed to be already set)\\n        Execution[] memory executions = new Execution[](1);\\n        executions[0] = Execution({\\n            target: swapTarget,\\n            value: nativeValue,\\n            callData: swapCallData\\n        });\\n\\n        // Encode using ExecutionLib (BATCH mode even for single execution for consistency)\\n        bytes[] memory executionCallDatas = new bytes[](1);\\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\\n\\n        // Build arrays for redeemDelegations\\n        bytes[] memory permissionContexts = new bytes[](1);\\n        permissionContexts[0] = permissionContext;\\n\\n        ModeCode[] memory modes = new ModeCode[](1);\\n        modes[0] = mode;\\n\\n        // Try to execute\\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\\n            emit DebugTestDelegationSwapOnly(true, \\\"Swap-only delegation succeeded\\\");\\n            return true;\\n        } catch Error(string memory reason) {\\n            emit DebugTestDelegationSwapOnly(false, reason);\\n            return false;\\n        } catch (bytes memory lowLevelData) {\\n            string memory decodedError = lowLevelData.length > 0\\n                ? string(abi.encodePacked(\\\"LowLevelRevert:\\\", lowLevelData))\\n                : \\\"LowLevelRevertNoData\\\";\\n            emit DebugTestDelegationSwapOnly(false, decodedError);\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Authorize upgrade (UUPS requirement)\\n     * @param newImplementation New implementation address\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @notice Get contract version\\n     * @return Version string\\n     */\\n    function getVersion() external pure returns (string memory) {\\n        return \\\"1.2.0-debug-delegation\\\";\\n    }\\n\\n    /**\\n     * @notice Allow receiving ETH for gas reimbursement\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xf3d512b06479e85f7f3b70c62cd07b6ccd574c5502ab324b2f862c12cc1cddab\",\"license\":\"MIT\"},\"src/StrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./libraries/StrategyLibrary.sol\\\";\\nimport \\\"./delegation/types/DelegationTypes.sol\\\";\\n\\n/**\\n * @title StrategyRegistry\\n * @notice Shared registry for all DeleGator smart account strategies (non-custodial)\\n * @dev SMART ACCOUNT ONLY: All strategies must use MetaMask DeleGator accounts\\n *\\n * Architecture:\\n * - ONE shared registry for ALL DeleGators\\n * - Each DeleGator can have MULTIPLE strategies\\n * - Data isolated by mapping: DeleGator address => strategy ID => strategy\\n * - No custody: funds stay in DeleGator smart accounts\\n * - Owner verification: EOA that owns the DeleGator must approve strategy creation\\n */\\ncontract StrategyRegistry is Initializable, UUPSUpgradeable, OwnableUpgradeable {\\n    using StrategyLibrary for StrategyLibrary.Strategy;\\n\\n    /// @notice User => Strategy ID => Strategy\\n    mapping(address => mapping(uint256 => StrategyLibrary.Strategy)) public strategies;\\n\\n    /// @notice User => Array of strategy IDs\\n    mapping(address => uint256[]) public userStrategyIds;\\n\\n    /// @notice User => Strategy count\\n    mapping(address => uint256) public userStrategyCount;\\n\\n    /// @notice Address allowed to update lastRebalanceTime (RebalanceExecutor)\\n    address public rebalanceExecutor;\\n\\n    // Events\\n    event StrategyCreated(\\n        address indexed delegator,\\n        address indexed owner,\\n        uint256 indexed strategyId,\\n        string name,\\n        address[] tokens,\\n        uint256[] weights\\n    );\\n    event StrategyUpdated(address indexed delegator, uint256 indexed strategyId, address[] tokens, uint256[] weights);\\n    event StrategyPaused(address indexed delegator, uint256 indexed strategyId);\\n    event StrategyResumed(address indexed delegator, uint256 indexed strategyId);\\n    event StrategyDeleted(address indexed delegator, uint256 indexed strategyId);\\n    event RebalanceExecutorUpdated(address indexed oldExecutor, address indexed newExecutor);\\n    event LastRebalanceTimeUpdated(address indexed delegator, uint256 indexed strategyId, uint256 timestamp);\\n\\n    // Errors\\n    error StrategyAlreadyExists();\\n    error StrategyNotFound();\\n    error InvalidStrategyId();\\n    error OnlyStrategyOwner();\\n    error OnlyRebalanceExecutor();\\n    error NotADeleGator();\\n    error NotAuthorized();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initialize the registry\\n     * @param _owner Owner address\\n     */\\n    function initialize(address _owner) external initializer {\\n        __Ownable_init(_owner);\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /**\\n     * @notice Set rebalance executor address (only owner)\\n     * @param _executor RebalanceExecutor contract address\\n     */\\n    function setRebalanceExecutor(address _executor) external onlyOwner {\\n        require(_executor != address(0), \\\"Invalid executor\\\");\\n        address oldExecutor = rebalanceExecutor;\\n        rebalanceExecutor = _executor;\\n        emit RebalanceExecutorUpdated(oldExecutor, _executor);\\n    }\\n\\n    /**\\n     * @notice Create a new strategy for a DeleGator smart account\\n     * @param delegator DeleGator smart account address (must be a MetaMask DeleGator)\\n     * @param strategyId Unique ID for this strategy (user-defined)\\n     * @param tokens Token addresses in strategy\\n     * @param weights Token weights in basis points (must sum to 10000)\\n     * @param rebalanceInterval Minimum seconds between rebalances\\n     * @param name Human-readable name\\n     *\\n     * @dev SMART ACCOUNT ONLY: delegator must be a MetaMask DeleGator\\n     *      Authorization: Either the DeleGator owner (EOA) or contract owner (backend) can create\\n     */\\n    function createStrategy(\\n        address delegator,\\n        uint256 strategyId,\\n        address[] calldata tokens,\\n        uint256[] calldata weights,\\n        uint256 rebalanceInterval,\\n        string calldata name\\n    ) external {\\n        // CRITICAL: Validate delegator is a DeleGator smart account\\n        if (!DelegationTypes.isDeleGator(delegator)) {\\n            revert NotADeleGator();\\n        }\\n\\n        // Get the EOA owner of the DeleGator\\n        address delegatorOwner = DelegationTypes.getDeleGatorOwner(delegator);\\n        require(delegatorOwner != address(0), \\\"Invalid DeleGator owner\\\");\\n\\n        // Authorization: Either the owner EOA or contract owner (backend) can create\\n        if (msg.sender != delegatorOwner && msg.sender != owner()) {\\n            revert NotAuthorized();\\n        }\\n\\n        // Check strategy doesn't already exist\\n        if (strategies[delegator][strategyId].id != 0 || strategies[delegator][strategyId].tokens.length > 0) {\\n            revert StrategyAlreadyExists();\\n        }\\n\\n        // Validate parameters\\n        StrategyLibrary.validateStrategy(tokens, weights);\\n        require(rebalanceInterval > 0, \\\"Invalid interval\\\");\\n        require(bytes(name).length > 0, \\\"Invalid name\\\");\\n\\n        // Create strategy\\n        strategies[delegator][strategyId] = StrategyLibrary.Strategy({\\n            id: strategyId,\\n            owner: delegatorOwner,\\n            delegator: delegator,\\n            tokens: tokens,\\n            weights: weights,\\n            rebalanceInterval: rebalanceInterval,\\n            lastRebalanceTime: block.timestamp,\\n            isActive: true,\\n            name: name\\n        });\\n\\n        // Track strategy ID\\n        userStrategyIds[delegator].push(strategyId);\\n        userStrategyCount[delegator]++;\\n\\n        emit StrategyCreated(delegator, delegatorOwner, strategyId, name, tokens, weights);\\n    }\\n\\n    /**\\n     * @notice Update an existing strategy\\n     * @param delegator DeleGator address\\n     * @param strategyId Strategy ID to update\\n     * @param tokens New token addresses\\n     * @param weights New token weights\\n     */\\n    function updateStrategy(\\n        address delegator,\\n        uint256 strategyId,\\n        address[] calldata tokens,\\n        uint256[] calldata weights\\n    ) external {\\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\\n\\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\\n            revert StrategyNotFound();\\n        }\\n\\n        // Authorization: Only owner or contract owner\\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\\n            revert NotAuthorized();\\n        }\\n\\n        // Validate new parameters\\n        StrategyLibrary.validateStrategy(tokens, weights);\\n\\n        // Update strategy\\n        strategy.tokens = tokens;\\n        strategy.weights = weights;\\n\\n        emit StrategyUpdated(delegator, strategyId, tokens, weights);\\n    }\\n\\n    /**\\n     * @notice Pause a strategy (stops rebalancing)\\n     * @param delegator DeleGator address\\n     * @param strategyId Strategy ID to pause\\n     */\\n    function pauseStrategy(address delegator, uint256 strategyId) external {\\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\\n\\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\\n            revert StrategyNotFound();\\n        }\\n\\n        // Authorization: Only owner or contract owner\\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\\n            revert NotAuthorized();\\n        }\\n\\n        strategy.isActive = false;\\n\\n        emit StrategyPaused(delegator, strategyId);\\n    }\\n\\n    /**\\n     * @notice Resume a paused strategy\\n     * @param delegator DeleGator address\\n     * @param strategyId Strategy ID to resume\\n     */\\n    function resumeStrategy(address delegator, uint256 strategyId) external {\\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\\n\\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\\n            revert StrategyNotFound();\\n        }\\n\\n        // Authorization: Only owner or contract owner\\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\\n            revert NotAuthorized();\\n        }\\n\\n        strategy.isActive = true;\\n\\n        emit StrategyResumed(delegator, strategyId);\\n    }\\n\\n    /**\\n     * @notice Delete a strategy\\n     * @param delegator DeleGator address\\n     * @param strategyId Strategy ID to delete\\n     */\\n    function deleteStrategy(address delegator, uint256 strategyId) external {\\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\\n\\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\\n            revert StrategyNotFound();\\n        }\\n\\n        // Authorization: Only owner or contract owner\\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\\n            revert NotAuthorized();\\n        }\\n\\n        // Delete strategy\\n        delete strategies[delegator][strategyId];\\n\\n        // Remove from ID array\\n        uint256[] storage ids = userStrategyIds[delegator];\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (ids[i] == strategyId) {\\n                ids[i] = ids[ids.length - 1];\\n                ids.pop();\\n                break;\\n            }\\n        }\\n\\n        userStrategyCount[delegator]--;\\n\\n        emit StrategyDeleted(delegator, strategyId);\\n    }\\n\\n    /**\\n     * @notice Update last rebalance time (only callable by RebalanceExecutor)\\n     * @param user User address\\n     * @param strategyId Strategy ID\\n     */\\n    function updateLastRebalanceTime(address user, uint256 strategyId) external {\\n        if (msg.sender != rebalanceExecutor) {\\n            revert OnlyRebalanceExecutor();\\n        }\\n\\n        StrategyLibrary.Strategy storage strategy = strategies[user][strategyId];\\n\\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\\n            revert StrategyNotFound();\\n        }\\n\\n        strategy.lastRebalanceTime = block.timestamp;\\n\\n        emit LastRebalanceTimeUpdated(user, strategyId, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Get a specific strategy\\n     * @param user User address\\n     * @param strategyId Strategy ID\\n     * @return strategy Strategy data\\n     */\\n    function getStrategy(address user, uint256 strategyId)\\n        external\\n        view\\n        returns (StrategyLibrary.Strategy memory strategy)\\n    {\\n        return strategies[user][strategyId];\\n    }\\n\\n    /**\\n     * @notice Get all strategy IDs for a user\\n     * @param user User address\\n     * @return Strategy IDs\\n     */\\n    function getUserStrategyIds(address user) external view returns (uint256[] memory) {\\n        return userStrategyIds[user];\\n    }\\n\\n    /**\\n     * @notice Get strategy count for a user\\n     * @param user User address\\n     * @return count Number of strategies\\n     */\\n    function getUserStrategyCount(address user) external view returns (uint256 count) {\\n        return userStrategyCount[user];\\n    }\\n\\n    /**\\n     * @notice Get all strategies for a user\\n     * @param user User address\\n     * @return Array of strategies\\n     */\\n    function getAllUserStrategies(address user) external view returns (StrategyLibrary.Strategy[] memory) {\\n        uint256[] memory ids = userStrategyIds[user];\\n        StrategyLibrary.Strategy[] memory userStrategies = new StrategyLibrary.Strategy[](ids.length);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            userStrategies[i] = strategies[user][ids[i]];\\n        }\\n\\n        return userStrategies;\\n    }\\n\\n    /**\\n     * @notice Authorize upgrade (UUPS requirement)\\n     * @param newImplementation New implementation address\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @notice Get contract version\\n     * @return Version string\\n     */\\n    function getVersion() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x1d94beba833d71895050b588b218348b0dab471c17bce02a3c9dd69d8256c575\",\"license\":\"MIT\"},\"src/delegation/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n// Re-export MetaMask Delegation Framework types and interfaces\\nimport { Delegation, Caveat, ModeCode } from \\\"@delegation-framework/utils/Types.sol\\\";\\nimport { IDelegationManager as IMetaMaskDelegationManager } from \\\"@delegation-framework/interfaces/IDelegationManager.sol\\\";\\n\\n/**\\n * @title IDelegationManager\\n * @notice Re-exports MetaMask's IDelegationManager interface\\n * @dev Uses official MetaMask Delegation Framework v1.3.0\\n *\\n * This provides compatibility with our codebase while using MetaMask's battle-tested implementation.\\n * Main method: redeemDelegations() - validates and executes delegations with caveat enforcement\\n */\\ninterface IDelegationManager is IMetaMaskDelegationManager {\\n    // Interface inherits all methods from MetaMask's IDelegationManager:\\n    // - redeemDelegations(bytes[] permissionContexts, ModeCode[] modes, bytes[] executionCallDatas)\\n    // - enableDelegation(Delegation delegation)\\n    // - disableDelegation(Delegation delegation)\\n    // - getDelegationHash(Delegation delegation)\\n    // - getDomainHash()\\n    // - pause()\\n    // - unpause()\\n    //\\n    // Events inherited:\\n    // - RedeemedDelegation\\n    // - EnabledDelegation\\n    // - DisabledDelegation\\n    //\\n    // Errors inherited:\\n    // - CannotUseADisabledDelegation\\n    // - InvalidAuthority\\n    // - InvalidDelegate\\n    // - InvalidDelegator\\n    // - InvalidEOASignature\\n    // - InvalidERC1271Signature\\n}\\n\",\"keccak256\":\"0x80ed5c9387af2d555b32f2417420927342612e03130b3d81f3429469dbdd3759\",\"license\":\"MIT\"},\"src/delegation/types/DelegationTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n// Use MetaMask's official types from Delegation Framework\\nimport { Delegation, Caveat } from \\\"@delegation-framework/utils/Types.sol\\\";\\n\\n/**\\n * @title DelegationTypes\\n * @notice Utility library for working with MetaMask DeleGator smart accounts\\n * @dev Provides helper functions for DeleGator detection and ownership verification\\n *\\n * This library uses MetaMask's official Delegation Framework types and does not\\n * implement custom delegation logic. All delegation validation and execution\\n * is handled by the DelegationManager contract.\\n */\\nlibrary DelegationTypes {\\n    /**\\n     * @notice Check if address has contract code deployed\\n     * @param account Address to check\\n     * @return hasCode True if address has code (is a contract)\\n     */\\n    function isSmartContract(address account) internal view returns (bool hasCode) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @notice Check if address is a MetaMask DeleGator smart account\\n     * @param account Address to check\\n     * @return isDeleGatorAccount True if account is a DeleGator\\n     *\\n     * @dev Attempts to call owner() function which is present on HybridDeleGator\\n     *      and other DeleGator implementations. If the call succeeds, it's a DeleGator.\\n     */\\n    function isDeleGator(address account) internal view returns (bool isDeleGatorAccount) {\\n        // Must be a smart contract\\n        if (!isSmartContract(account)) {\\n            return false;\\n        }\\n\\n        // Try to call owner() function (present on HybridDeleGator)\\n        // Using low-level call to avoid revert if function doesn't exist\\n        (bool success, bytes memory data) = account.staticcall(\\n            abi.encodeWithSignature(\\\"owner()\\\")\\n        );\\n\\n        // If call succeeded and returned data, it's likely a DeleGator\\n        // HybridDeleGator.owner() returns address, which is 32 bytes\\n        return success && data.length == 32;\\n    }\\n\\n    /**\\n     * @notice Get the EOA owner of a DeleGator smart account\\n     * @param delegator DeleGator smart account address\\n     * @return owner EOA address that owns and controls the DeleGator\\n     *\\n     * @dev HybridDeleGator has an owner() function that returns the EOA owner\\n     *      Returns address(0) if not a DeleGator or owner() call fails\\n     */\\n    function getDeleGatorOwner(address delegator) internal view returns (address owner) {\\n        // Validate it's a smart contract first\\n        if (!isSmartContract(delegator)) {\\n            return address(0);\\n        }\\n\\n        // Try to call owner() function\\n        (bool success, bytes memory data) = delegator.staticcall(\\n            abi.encodeWithSignature(\\\"owner()\\\")\\n        );\\n\\n        if (success && data.length == 32) {\\n            return abi.decode(data, (address));\\n        }\\n\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x15a28c4f81f13119012e3e0690b601b4e1df24b956b40e44900cdfab475bf152\",\"license\":\"MIT\"},\"src/interfaces/IPythOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IPythOracle\\n * @notice Interface for PythOracle wrapper contract\\n */\\ninterface IPythOracle {\\n    // Events\\n    event PriceFeedSet(address indexed token, bytes32 indexed feedId);\\n    event PriceFeedRemoved(address indexed token);\\n    event MaxPriceAgeUpdated(uint256 oldValue, uint256 newValue);\\n    event MaxConfidenceRatioUpdated(uint256 oldValue, uint256 newValue);\\n\\n    // Errors\\n    error NoFeedConfigured(address token);\\n    error InvalidPrice(address token, int64 price);\\n    error ConfidenceTooLow(uint64 conf, uint64 price, uint256 ratio);\\n\\n    // Configuration\\n    function setPriceFeed(address token, bytes32 feedId) external;\\n    function removePriceFeed(address token) external;\\n    function setMaxPriceAge(uint256 seconds_) external;\\n    function setMaxConfidenceRatio(uint256 bps) external;\\n\\n    // Price queries\\n    function getPrice(address token) external view returns (uint256 price);\\n    function batchGetPrices(address[] calldata tokens) external view returns (uint256[] memory prices);\\n    function isPriceFresh(address token) external view returns (bool);\\n\\n    // Getters\\n    function getVersion() external pure returns (string memory);\\n    function getPythContract() external view returns (address);\\n    function oracle() external view returns (address);\\n    function pythContract() external view returns (address);\\n    function priceFeeds(address) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4059b66bdd20b817bcc047c2cb6723d2fc56d3eb5152325411b79847d36b14c0\",\"license\":\"MIT\"},\"src/interfaces/IRebalancerConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IRebalancerConfig\\n * @notice Interface for system-wide configuration storage\\n * @dev Manages fees, slippage, intervals, and token whitelist\\n */\\ninterface IRebalancerConfig {\\n    // Events\\n    event MaxSlippageUpdated(uint256 oldValue, uint256 newValue);\\n    event MinRebalanceIntervalUpdated(uint256 oldValue, uint256 newValue);\\n    event MaxAllocationDriftUpdated(uint256 oldValue, uint256 newValue);\\n    event ManagementFeeUpdated(uint256 oldValue, uint256 newValue);\\n    event PerformanceFeeUpdated(uint256 oldValue, uint256 newValue);\\n    event FeeRecipientUpdated(address indexed oldRecipient, address indexed newRecipient);\\n    event TokenWhitelisted(address indexed token);\\n    event TokenRemovedFromWhitelist(address indexed token);\\n\\n    /**\\n     * @notice Get the contract version\\n     * @return Version string\\n     */\\n    function getVersion() external pure returns (string memory);\\n\\n    /**\\n     * @notice Set maximum slippage in basis points\\n     * @param bps Basis points (e.g., 50 = 0.5%)\\n     */\\n    function setMaxSlippage(uint256 bps) external;\\n\\n    /**\\n     * @notice Set minimum rebalance interval in seconds\\n     * @param seconds_ Minimum seconds between rebalances\\n     */\\n    function setMinRebalanceInterval(uint256 seconds_) external;\\n\\n    /**\\n     * @notice Set maximum allocation drift in basis points\\n     * @param bps Basis points (e.g., 500 = 5%)\\n     */\\n    function setMaxAllocationDrift(uint256 bps) external;\\n\\n    /**\\n     * @notice Set management fee in basis points (annual)\\n     * @param bps Basis points (e.g., 50 = 0.5% annual)\\n     */\\n    function setManagementFee(uint256 bps) external;\\n\\n    /**\\n     * @notice Set performance fee in basis points\\n     * @param bps Basis points (e.g., 1000 = 10%)\\n     */\\n    function setPerformanceFee(uint256 bps) external;\\n\\n    /**\\n     * @notice Set fee recipient address\\n     * @param recipient The address to receive fees\\n     */\\n    function setFeeRecipient(address recipient) external;\\n\\n    /**\\n     * @notice Add a token to the whitelist\\n     * @param token The token address to whitelist\\n     */\\n    function addWhitelistedToken(address token) external;\\n\\n    /**\\n     * @notice Remove a token from the whitelist\\n     * @param token The token address to remove\\n     */\\n    function removeWhitelistedToken(address token) external;\\n\\n    /**\\n     * @notice Check if a token is whitelisted\\n     * @param token The token address to check\\n     * @return true if the token is whitelisted\\n     */\\n    function isTokenWhitelisted(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Get maximum slippage in basis points\\n     * @return Basis points\\n     */\\n    function getMaxSlippage() external view returns (uint256);\\n\\n    /**\\n     * @notice Get minimum rebalance interval in seconds\\n     * @return Seconds\\n     */\\n    function getMinRebalanceInterval() external view returns (uint256);\\n\\n    /**\\n     * @notice Get maximum allocation drift in basis points\\n     * @return Basis points\\n     */\\n    function getMaxAllocationDrift() external view returns (uint256);\\n\\n    /**\\n     * @notice Get management fee in basis points\\n     * @return Basis points\\n     */\\n    function getManagementFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Get performance fee in basis points\\n     * @return Basis points\\n     */\\n    function getPerformanceFee() external view returns (uint256);\\n\\n    /**\\n     * @notice Get fee recipient address\\n     * @return The fee recipient address\\n     */\\n    function getFeeRecipient() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdded51ec67afce214db4757206a6f521561725c8a97b80c3ffe3d4eec5a1de0b\",\"license\":\"MIT\"},\"src/interfaces/IUniswapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\n/**\\n * @title IUniswapHelper\\n * @notice Interface for Uniswap V2 interaction helper\\n * @dev Wraps Uniswap V2 Router with slippage protection and quote functions\\n */\\ninterface IUniswapHelper {\\n    // Events\\n    event SwapExecuted(\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address indexed recipient\\n    );\\n\\n    // Errors\\n    error InsufficientOutput(uint256 amountOut, uint256 minAmountOut);\\n    error NoLiquidity(address tokenA, address tokenB);\\n    error InvalidPath();\\n\\n    /**\\n     * @notice Get the contract version\\n     * @return Version string\\n     */\\n    function getVersion() external pure returns (string memory);\\n\\n    /**\\n     * @notice Swap exact tokens for tokens\\n     * @param tokenIn The input token address\\n     * @param tokenOut The output token address\\n     * @param amountIn The input amount\\n     * @param minAmountOut The minimum output amount (slippage protection)\\n     * @param recipient The recipient address\\n     * @param deadline The transaction deadline (unix timestamp)\\n     * @return amountOut The actual output amount\\n     */\\n    function swapExactTokensForTokens(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 deadline  // HIGH-002: Added deadline parameter for MEV protection\\n    ) external returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Get the expected output amount for a given input\\n     * @param amountIn The input amount\\n     * @param tokenIn The input token address\\n     * @param tokenOut The output token address\\n     * @return The expected output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Check if a pair has liquidity\\n     * @param tokenA First token address\\n     * @param tokenB Second token address\\n     * @return true if the pair has liquidity\\n     */\\n    function hasLiquidity(address tokenA, address tokenB) external view returns (bool);\\n\\n    /**\\n     * @notice Calculate minimum output amount with slippage\\n     * @param amountIn The input amount\\n     * @param tokenIn The input token address\\n     * @param tokenOut The output token address\\n     * @param slippageBps Slippage in basis points (e.g., 50 = 0.5%)\\n     * @return The minimum output amount\\n     */\\n    function calculateMinAmountOut(\\n        uint256 amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 slippageBps\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaddece26bbe4a588a1940fb95d52637bc6e96e90aee1c0daa39cafafbaeb18c5\",\"license\":\"MIT\"},\"src/libraries/StrategyLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IPythOracle.sol\\\";\\n\\n/**\\n * @title StrategyLibrary\\n * @notice Pure calculation logic for portfolio strategies (no state)\\n * @dev Used by RebalanceExecutor to calculate rebalance swaps\\n *\\n * Non-custodial: All calculations based on user's MetaMask account balances\\n */\\nlibrary StrategyLibrary {\\n    struct Strategy {\\n        uint256 id;\\n        address owner;        // EOA that owns the DeleGator smart account\\n        address delegator;    // DeleGator smart account address (holds funds)\\n        address[] tokens;\\n        uint256[] weights;  // Basis points (100 = 1%)\\n        uint256 rebalanceInterval;\\n        uint256 lastRebalanceTime;\\n        bool isActive;\\n        string name;\\n    }\\n\\n    error InvalidWeights();\\n    error InvalidTokenCount();\\n    error ZeroAddress();\\n\\n    /**\\n     * @notice Calculate required swaps to rebalance portfolio\\n     * @param account DeleGator smart account address (holds funds)\\n     * @param strategy Strategy configuration\\n     * @param oracle Price oracle address\\n     * @return tokensToSell Tokens that need to be sold\\n     * @return tokensToBuy Tokens that need to be bought\\n     * @return amountsToSell Amounts to sell for each token\\n     */\\n    function calculateRebalanceSwaps(\\n        address account,\\n        Strategy memory strategy,\\n        address oracle\\n    )\\n        external\\n        view\\n        returns (address[] memory tokensToSell, address[] memory tokensToBuy, uint256[] memory amountsToSell)\\n    {\\n        require(account != address(0), \\\"Invalid account\\\");\\n        require(oracle != address(0), \\\"Invalid oracle\\\");\\n\\n        // Get current balances from user's account\\n        uint256[] memory balances = new uint256[](strategy.tokens.length);\\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n            balances[i] = IERC20(strategy.tokens[i]).balanceOf(account);\\n        }\\n\\n        // Get current prices\\n        uint256[] memory prices = IPythOracle(oracle).batchGetPrices(strategy.tokens);\\n\\n        // Calculate total portfolio value\\n        uint256 totalValueUSD = 0;\\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n            // Adjust for token decimals\\n            uint8 decimals = IERC20Metadata(strategy.tokens[i]).decimals();\\n            uint256 valueUSD = (balances[i] * prices[i]) / (10 ** decimals);\\n            totalValueUSD += valueUSD;\\n        }\\n\\n        // Calculate target values for each token\\n        uint256[] memory targetValuesUSD = new uint256[](strategy.tokens.length);\\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n            targetValuesUSD[i] = (totalValueUSD * strategy.weights[i]) / 10000;\\n        }\\n\\n        // Calculate current values for each token\\n        uint256[] memory currentValuesUSD = new uint256[](strategy.tokens.length);\\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n            uint8 decimals = IERC20Metadata(strategy.tokens[i]).decimals();\\n            currentValuesUSD[i] = (balances[i] * prices[i]) / (10 ** decimals);\\n        }\\n\\n        // Determine which tokens to sell and buy\\n        uint256 sellCount = 0;\\n        uint256 buyCount = 0;\\n\\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n            if (currentValuesUSD[i] > targetValuesUSD[i]) {\\n                sellCount++;\\n            } else if (currentValuesUSD[i] < targetValuesUSD[i]) {\\n                buyCount++;\\n            }\\n        }\\n\\n        tokensToSell = new address[](sellCount);\\n        tokensToBuy = new address[](buyCount);\\n        amountsToSell = new uint256[](sellCount);\\n\\n        uint256 sellIndex = 0;\\n        uint256 buyIndex = 0;\\n\\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\\n            if (currentValuesUSD[i] > targetValuesUSD[i]) {\\n                tokensToSell[sellIndex] = strategy.tokens[i];\\n\\n                // Calculate amount to sell (in token units)\\n                uint256 excessValueUSD = currentValuesUSD[i] - targetValuesUSD[i];\\n                uint8 decimals = IERC20Metadata(strategy.tokens[i]).decimals();\\n                amountsToSell[sellIndex] = (excessValueUSD * (10 ** decimals)) / prices[i];\\n\\n                sellIndex++;\\n            } else if (currentValuesUSD[i] < targetValuesUSD[i]) {\\n                tokensToBuy[buyIndex] = strategy.tokens[i];\\n                buyIndex++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate current allocation weights\\n     * @param account DeleGator smart account address (holds funds)\\n     * @param tokens Token addresses\\n     * @param oracle Price oracle address\\n     * @return weights Current weights in basis points\\n     */\\n    function calculateCurrentWeights(address account, address[] memory tokens, address oracle)\\n        external\\n        view\\n        returns (uint256[] memory weights)\\n    {\\n        require(account != address(0), \\\"Invalid account\\\");\\n        require(oracle != address(0), \\\"Invalid oracle\\\");\\n\\n        uint256[] memory balances = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            balances[i] = IERC20(tokens[i]).balanceOf(account);\\n        }\\n\\n        uint256[] memory prices = IPythOracle(oracle).batchGetPrices(tokens);\\n\\n        uint256 totalValueUSD = 0;\\n        uint256[] memory valuesUSD = new uint256[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint8 decimals = IERC20Metadata(tokens[i]).decimals();\\n            valuesUSD[i] = (balances[i] * prices[i]) / (10 ** decimals);\\n            totalValueUSD += valuesUSD[i];\\n        }\\n\\n        weights = new uint256[](tokens.length);\\n        if (totalValueUSD == 0) {\\n            return weights; // All zeros if no balance\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            weights[i] = (valuesUSD[i] * 10000) / totalValueUSD;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate drift between current and target weights\\n     * @param currentWeights Current allocation in basis points\\n     * @param targetWeights Target allocation in basis points\\n     * @return drift Maximum deviation in basis points\\n     */\\n    function calculateDrift(uint256[] memory currentWeights, uint256[] memory targetWeights)\\n        external\\n        pure\\n        returns (uint256 drift)\\n    {\\n        require(currentWeights.length == targetWeights.length, \\\"Length mismatch\\\");\\n\\n        drift = 0;\\n        for (uint256 i = 0; i < currentWeights.length; i++) {\\n            uint256 deviation = currentWeights[i] > targetWeights[i]\\n                ? currentWeights[i] - targetWeights[i]\\n                : targetWeights[i] - currentWeights[i];\\n\\n            if (deviation > drift) {\\n                drift = deviation;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get total portfolio value in USD\\n     * @param account DeleGator smart account address (holds funds)\\n     * @param tokens Token addresses\\n     * @param oracle Price oracle address\\n     * @return totalValueUSD Portfolio value scaled to 18 decimals\\n     */\\n    function getPortfolioValue(address account, address[] memory tokens, address oracle)\\n        external\\n        view\\n        returns (uint256 totalValueUSD)\\n    {\\n        require(account != address(0), \\\"Invalid account\\\");\\n        require(oracle != address(0), \\\"Invalid oracle\\\");\\n\\n        uint256[] memory balances = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            balances[i] = IERC20(tokens[i]).balanceOf(account);\\n        }\\n\\n        uint256[] memory prices = IPythOracle(oracle).batchGetPrices(tokens);\\n\\n        totalValueUSD = 0;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint8 decimals = IERC20Metadata(tokens[i]).decimals();\\n            uint256 valueUSD = (balances[i] * prices[i]) / (10 ** decimals);\\n            totalValueUSD += valueUSD;\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate strategy parameters\\n     * @param tokens Token addresses\\n     * @param weights Token weights in basis points\\n     */\\n    function validateStrategy(address[] memory tokens, uint256[] memory weights) external pure {\\n        if (tokens.length == 0 || tokens.length > 10) {\\n            revert InvalidTokenCount();\\n        }\\n\\n        if (tokens.length != weights.length) {\\n            revert InvalidTokenCount();\\n        }\\n\\n        // Check no zero addresses\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == address(0)) {\\n                revert ZeroAddress();\\n            }\\n        }\\n\\n        // Check weights sum to 10000 (100%)\\n        uint256 totalWeight = 0;\\n        for (uint256 i = 0; i < weights.length; i++) {\\n            totalWeight += weights[i];\\n        }\\n\\n        if (totalWeight != 10000) {\\n            revert InvalidWeights();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc35a0ae821b47e89d941c2e201722988bb3b992d3f034706838f6de194340f9\",\"license\":\"MIT\"}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"type":"error","name":"AddressEmptyCode"},{"inputs":[],"type":"error","name":"BalanceValidationFailed"},{"inputs":[],"type":"error","name":"ContractPaused"},{"inputs":[],"type":"error","name":"DriftBelowThreshold"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"type":"error","name":"ERC1967InvalidImplementation"},{"inputs":[],"type":"error","name":"ERC1967NonPayable"},{"inputs":[],"type":"error","name":"FailedCall"},{"inputs":[],"type":"error","name":"InsufficientSlippageProtection"},{"inputs":[],"type":"error","name":"InvalidDeleGatorOwner"},{"inputs":[],"type":"error","name":"InvalidDelegation"},{"inputs":[],"type":"error","name":"InvalidInitialization"},{"inputs":[],"type":"error","name":"NotADeleGator"},{"inputs":[],"type":"error","name":"NotInitializing"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"type":"error","name":"OwnableInvalidOwner"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"type":"error","name":"OwnableUnauthorizedAccount"},{"inputs":[],"type":"error","name":"RebalanceExecutionFailed"},{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"},{"inputs":[],"type":"error","name":"StrategyNotActive"},{"inputs":[],"type":"error","name":"SwapsDidNotImproveAllocation"},{"inputs":[],"type":"error","name":"TooSoonToRebalance"},{"inputs":[],"type":"error","name":"UUPSUnauthorizedCallContext"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"type":"error","name":"UUPSUnsupportedProxiableUUID"},{"inputs":[{"internalType":"address","name":"dex","type":"address"}],"type":"error","name":"UnapprovedDEX"},{"inputs":[{"internalType":"address","name":"dex","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"DEXApprovalUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"driftBefore","type":"uint256","indexed":false},{"internalType":"uint256","name":"driftAfter","type":"uint256","indexed":false},{"internalType":"uint256","name":"valueBefore","type":"uint256","indexed":false},{"internalType":"uint256","name":"valueAfter","type":"uint256","indexed":false}],"type":"event","name":"DebugAfterDelegationCall","anonymous":false},{"inputs":[{"internalType":"uint256","name":"permissionContextsLength","type":"uint256","indexed":false},{"internalType":"uint256","name":"modesLength","type":"uint256","indexed":false},{"internalType":"uint256","name":"executionLength","type":"uint256","indexed":false}],"type":"event","name":"DebugBeforeDelegationCall","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"address","name":"delegatorOwner","type":"address","indexed":false}],"type":"event","name":"DebugDeleGatorValidated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"drift","type":"uint256","indexed":false},{"internalType":"uint256","name":"maxDrift","type":"uint256","indexed":false},{"internalType":"uint256","name":"portfolioValue","type":"uint256","indexed":false}],"type":"event","name":"DebugDriftCalculated","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"strategyId","type":"uint256","indexed":true},{"internalType":"address","name":"sender","type":"address","indexed":false}],"type":"event","name":"DebugRebalanceStarted","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"strategyId","type":"uint256","indexed":true},{"internalType":"bool","name":"isActive","type":"bool","indexed":false},{"internalType":"address","name":"owner","type":"address","indexed":false}],"type":"event","name":"DebugStrategyFetched","anonymous":false},{"inputs":[{"internalType":"uint256","name":"swapCount","type":"uint256","indexed":false}],"type":"event","name":"DebugSwapValidationPassed","anonymous":false},{"inputs":[{"internalType":"bool","name":"success","type":"bool","indexed":false},{"internalType":"string","name":"message","type":"string","indexed":false}],"type":"event","name":"DebugTestDelegationApproval","anonymous":false},{"inputs":[{"internalType":"bool","name":"success","type":"bool","indexed":false},{"internalType":"string","name":"message","type":"string","indexed":false}],"type":"event","name":"DebugTestDelegationNoOp","anonymous":false},{"inputs":[{"internalType":"bool","name":"success","type":"bool","indexed":false},{"internalType":"string","name":"message","type":"string","indexed":false}],"type":"event","name":"DebugTestDelegationSingleSwap","anonymous":false},{"inputs":[{"internalType":"bool","name":"success","type":"bool","indexed":false},{"internalType":"string","name":"message","type":"string","indexed":false}],"type":"event","name":"DebugTestDelegationSwapOnly","anonymous":false},{"inputs":[{"internalType":"bool","name":"success","type":"bool","indexed":false},{"internalType":"string","name":"message","type":"string","indexed":false}],"type":"event","name":"DebugTestDelegationTransfer","anonymous":false},{"inputs":[{"internalType":"bool","name":"isValid","type":"bool","indexed":false},{"internalType":"address","name":"strategyOwner","type":"address","indexed":false},{"internalType":"address","name":"delegatorOwner","type":"address","indexed":false},{"internalType":"string","name":"error","type":"string","indexed":false}],"type":"event","name":"DebugTestStrategyOwnership","anonymous":false},{"inputs":[{"internalType":"address","name":"caller","type":"address","indexed":true}],"type":"event","name":"EmergencyPaused","anonymous":false},{"inputs":[{"internalType":"address","name":"caller","type":"address","indexed":true}],"type":"event","name":"EmergencyUnpaused","anonymous":false},{"inputs":[{"internalType":"uint64","name":"version","type":"uint64","indexed":false}],"type":"event","name":"Initialized","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"strategyId","type":"uint256","indexed":true},{"internalType":"uint256","name":"timestamp","type":"uint256","indexed":false},{"internalType":"uint256","name":"drift","type":"uint256","indexed":false},{"internalType":"uint256","name":"gasReimbursed","type":"uint256","indexed":false}],"type":"event","name":"RebalanceExecuted","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"uint256","name":"strategyId","type":"uint256","indexed":true},{"internalType":"string","name":"reason","type":"string","indexed":false}],"type":"event","name":"RebalanceFailed","anonymous":false},{"inputs":[{"internalType":"address","name":"user","type":"address","indexed":true},{"internalType":"address","name":"tokenIn","type":"address","indexed":false},{"internalType":"address","name":"tokenOut","type":"address","indexed":false},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false}],"type":"event","name":"SwapExecuted","anonymous":false},{"inputs":[{"internalType":"address","name":"implementation","type":"address","indexed":true}],"type":"event","name":"Upgraded","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"approvedDEXs","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address[]","name":"dexs","type":"address[]"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"batchSetDEXApproval"},{"inputs":[],"stateMutability":"view","type":"function","name":"config","outputs":[{"internalType":"contract IRebalancerConfig","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"delegationManager","outputs":[{"internalType":"contract IDelegationManager","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"uint256","name":"strategyId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getPortfolioValue","outputs":[{"internalType":"uint256","name":"valueUSD","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"getVersion","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_delegationManager","type":"address"},{"internalType":"address","name":"_registry","type":"address"},{"internalType":"address","name":"_oracle","type":"address"},{"internalType":"address","name":"_uniswapHelper","type":"address"},{"internalType":"address","name":"_config","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"view","type":"function","name":"oracle","outputs":[{"internalType":"contract IPythOracle","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pause"},{"inputs":[],"stateMutability":"view","type":"function","name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"uint256","name":"strategyId","type":"uint256"},{"internalType":"address[]","name":"tokensIn","type":"address[]"},{"internalType":"address[]","name":"swapTargets","type":"address[]"},{"internalType":"bytes[]","name":"swapCallDatas","type":"bytes[]"},{"internalType":"uint256[]","name":"minOutputAmounts","type":"uint256[]"},{"internalType":"uint256[]","name":"nativeValues","type":"uint256[]"},{"internalType":"bytes[]","name":"permissionContexts","type":"bytes[]"},{"internalType":"ModeCode[]","name":"modes","type":"bytes32[]"}],"stateMutability":"payable","type":"function","name":"rebalance"},{"inputs":[],"stateMutability":"view","type":"function","name":"registry","outputs":[{"internalType":"contract StrategyRegistry","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"renounceOwnership"},{"inputs":[{"internalType":"address","name":"dex","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setDEXApproval"},{"inputs":[{"internalType":"address","name":"_newDelegationManager","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setDelegationManager"},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"uint256","name":"strategyId","type":"uint256"}],"stateMutability":"view","type":"function","name":"shouldRebalance","outputs":[{"internalType":"bool","name":"isShouldRebalance","type":"bool"},{"internalType":"uint256","name":"drift","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"bytes","name":"permissionContext","type":"bytes"},{"internalType":"ModeCode","name":"mode","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"testDelegationApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"bytes","name":"permissionContext","type":"bytes"},{"internalType":"ModeCode","name":"mode","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"testDelegationNoOp","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"swapTarget","type":"address"},{"internalType":"bytes","name":"swapCallData","type":"bytes"},{"internalType":"uint256","name":"nativeValue","type":"uint256"},{"internalType":"bytes","name":"permissionContext","type":"bytes"},{"internalType":"ModeCode","name":"mode","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"testDelegationSingleSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"address","name":"swapTarget","type":"address"},{"internalType":"bytes","name":"swapCallData","type":"bytes"},{"internalType":"uint256","name":"nativeValue","type":"uint256"},{"internalType":"bytes","name":"permissionContext","type":"bytes"},{"internalType":"ModeCode","name":"mode","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"testDelegationSwapOnly","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"permissionContext","type":"bytes"},{"internalType":"ModeCode","name":"mode","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"testDelegationTransfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"address","name":"userAccount","type":"address"},{"internalType":"uint256","name":"strategyId","type":"uint256"}],"stateMutability":"view","type":"function","name":"testStrategyOwnership","outputs":[{"internalType":"bool","name":"isValid","type":"bool"},{"internalType":"address","name":"strategyOwner","type":"address"},{"internalType":"address","name":"delegatorOwner","type":"address"},{"internalType":"string","name":"error","type":"string"}]},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[],"stateMutability":"view","type":"function","name":"uniswapHelper","outputs":[{"internalType":"contract IUniswapHelper","name":"","type":"address"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"unpause"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"upgradeToAndCall"},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"batchSetDEXApproval(address[],bool)":{"params":{"approved":"Whether to approve or revoke","dexs":"Array of DEX addresses"}},"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"getPortfolioValue(address,uint256)":{"params":{"strategyId":"Strategy ID","userAccount":"User's account address"},"returns":{"valueUSD":"Portfolio value in USD (18 decimals)"}},"getVersion()":{"returns":{"_0":"Version string"}},"initialize(address,address,address,address,address,address)":{"params":{"_config":"Config address","_delegationManager":"DelegationManager address","_oracle":"Oracle address","_owner":"Owner address","_registry":"StrategyRegistry address","_uniswapHelper":"UniswapHelper address"}},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"rebalance(address,uint256,address[],address[],bytes[],uint256[],uint256[],bytes[],bytes32[])":{"details":"New architecture: Bot calculates optimal routes OFF-CHAIN via DEX aggregators (1inch/0x/ParaSwap)      and passes the pre-calculated swap data here for ON-CHAIN execution.      This saves gas and enables better pricing through multi-DEX comparison. SECURITY ENHANCEMENTS: - HIGH-1: Validates swap targets against whitelist - HIGH-2: Enforces minimum output amounts for slippage protection - HIGH-3: Validates swaps improve portfolio allocation - HIGH-5: Validates final balances match expected values - MEDIUM-1: Can be paused in emergency - NEW: Supports native token swaps via nativeValues parameter - NEW: Automatically approves tokens before swaps","params":{"minOutputAmounts":"Minimum output amounts for slippage protection (SECURITY FIX HIGH-2)","modes":"Execution modes for DelegationManager","nativeValues":"Native token amounts to send with each swap (for native token swaps/wraps)","permissionContexts":"Encoded delegations (user's signed delegation)","strategyId":"Strategy ID to rebalance","swapCallDatas":"Pre-calculated optimal swap calldata (from off-chain DEX aggregator)","swapTargets":"Target contracts for each swap (from DEX aggregator)","tokensIn":"Tokens being sold in each swap (for approval)","userAccount":"User's MetaMask DeleGator account address"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setDEXApproval(address,bool)":{"params":{"approved":"Whether to approve or revoke","dex":"DEX contract address"}},"setDelegationManager(address)":{"details":"ADMIN ONLY: Allows owner to update DelegationManager in case of redeployment","params":{"_newDelegationManager":"New DelegationManager contract address"}},"shouldRebalance(address,uint256)":{"params":{"strategyId":"Strategy ID","userAccount":"User's account address"},"returns":{"drift":"Current drift in basis points","isShouldRebalance":"True if rebalance is needed"}},"testDelegationApproval(address,address,address,bytes,bytes32)":{"details":"Tests delegation + approval (no swaps)","params":{"mode":"Execution mode","permissionContext":"Encoded delegation with signature","spender":"Address to approve","token":"Token to approve","userAccount":"DeleGator smart account address"},"returns":{"success":"Whether delegation executed successfully"}},"testDelegationNoOp(address,bytes,bytes32)":{"details":"Tests ONLY delegation framework - no swaps, no tokens, just signature validation","params":{"mode":"Execution mode","permissionContext":"Encoded delegation with signature","userAccount":"DeleGator smart account address"},"returns":{"success":"Whether delegation executed successfully"}},"testDelegationSingleSwap(address,address,address,bytes,uint256,bytes,bytes32)":{"details":"Tests delegation + ONE swap (minimal complexity)","params":{"mode":"Execution mode","nativeValue":"Native token amount (for native swaps)","permissionContext":"Encoded delegation with signature","swapCallData":"Swap calldata","swapTarget":"DEX contract address","tokenIn":"Token being sold","userAccount":"DeleGator smart account address"},"returns":{"success":"Whether delegation executed successfully"}},"testDelegationSwapOnly(address,address,bytes,uint256,bytes,bytes32)":{"details":"Assumes approval is already set (from Level 3). Tests if swap alone works through delegation.      This isolates whether the problem is batch execution or the swap itself.","params":{"mode":"Execution mode","nativeValue":"Native token amount (for native swaps)","permissionContext":"Encoded delegation with signature","swapCallData":"Swap calldata","swapTarget":"DEX contract address","userAccount":"DeleGator smart account address"},"returns":{"success":"Whether delegation executed successfully"}},"testDelegationTransfer(address,address,address,uint256,bytes,bytes32)":{"details":"Tests delegation + token movement (no DEX swaps)","params":{"amount":"Amount to transfer","mode":"Execution mode","permissionContext":"Encoded delegation with signature","recipient":"Recipient address","token":"Token to transfer","userAccount":"DeleGator smart account address"},"returns":{"success":"Whether delegation executed successfully"}},"testStrategyOwnership(address,uint256)":{"details":"This function ONLY tests registry + ownership checks, NO delegation","params":{"strategyId":"Strategy ID to validate","userAccount":"DeleGator smart account address"},"returns":{"delegatorOwner":"DeleGator owner from contract","error":"Error message if validation failed","isValid":"Whether validation passed","strategyOwner":"Strategy owner from registry"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"userdoc":{"kind":"user","methods":{"batchSetDEXApproval(address[],bool)":{"notice":"SECURITY FIX HIGH-1: Batch approve multiple DEXs"},"getPortfolioValue(address,uint256)":{"notice":"Get portfolio value for a strategy"},"getVersion()":{"notice":"Get contract version"},"initialize(address,address,address,address,address,address)":{"notice":"Initialize the executor"},"pause()":{"notice":"SECURITY FIX MEDIUM-1: Emergency pause"},"rebalance(address,uint256,address[],address[],bytes[],uint256[],uint256[],bytes[],bytes32[])":{"notice":"Execute a rebalance for a user's strategy"},"setDEXApproval(address,bool)":{"notice":"SECURITY FIX HIGH-1: Approve/revoke DEX for swaps"},"setDelegationManager(address)":{"notice":"Update DelegationManager address"},"shouldRebalance(address,uint256)":{"notice":"Check if a strategy should be rebalanced"},"testDelegationApproval(address,address,address,bytes,bytes32)":{"notice":"DEBUG: Test delegation with token approval ONLY"},"testDelegationNoOp(address,bytes,bytes32)":{"notice":"DEBUG: Test delegation with NO execution (tests signature + framework only)"},"testDelegationSingleSwap(address,address,address,bytes,uint256,bytes,bytes32)":{"notice":"DEBUG: Test delegation with single swap (approval + swap)"},"testDelegationSwapOnly(address,address,bytes,uint256,bytes,bytes32)":{"notice":"DEBUG: Test delegation with ONLY swap (no approval) - Level 5b"},"testDelegationTransfer(address,address,address,uint256,bytes,bytes32)":{"notice":"DEBUG: Test delegation with token transfer"},"testStrategyOwnership(address,uint256)":{"notice":"DEBUG: Test strategy ownership validation ONLY"},"unpause()":{"notice":"SECURITY FIX MEDIUM-1: Unpause after emergency"}},"version":1}},"settings":{"remappings":["@FCL/=lib/delegation-framework/lib/FCL/solidity/src/","@SCL/=lib/delegation-framework/lib/SCL/src/","@account-abstraction/=lib/delegation-framework/lib/account-abstraction/contracts/","@bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/","@delegation-framework/=lib/delegation-framework/src/","@erc7579/=lib/erc7579-implementation/src/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@pythnetwork/pyth-sdk-solidity/=lib/pyth-sdk-solidity/","@solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/src/","@solidity/=lib/delegation-framework/lib/SCL/src/","FCL/=lib/delegation-framework/lib/FCL/solidity/src/","FreshCryptoLib/=lib/delegation-framework/lib/FreshCryptoLib/solidity/src/","SCL/=lib/delegation-framework/lib/SCL/","account-abstraction/=lib/account-abstraction/contracts/","delegation-framework/=lib/delegation-framework/","ds-test/=lib/erc7579-implementation/node_modules/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc7579-implementation/=lib/erc7579-implementation/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","pyth-sdk-solidity/=lib/pyth-sdk-solidity/","sentinellist/=lib/erc7579-implementation/node_modules/@rhinestone/sentinellist/src/","solady/=lib/erc7579-implementation/node_modules/solady/src/","solidity-bytes-utils/=lib/delegation-framework/lib/solidity-bytes-utils/contracts/","solidity-stringutils/=lib/delegation-framework/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":true,"bytecodeHash":"ipfs"},"compilationTarget":{"src/RebalanceExecutor.sol":"RebalanceExecutor"},"evmVersion":"shanghai","libraries":{},"viaIR":true},"sources":{"lib/delegation-framework/lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359","urls":[],"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.5;\n\n/**\n * User Operation struct\n * @param sender                - The sender account of this request.\n * @param nonce                 - Unique value the sender uses to verify it is not a replay.\n * @param initCode              - If set, the account contract will be created by this constructor/\n * @param callData              - The method call to execute on this account.\n * @param accountGasLimits      - Packed gas limits for validateUserOp and gas limit passed to the callData method call.\n * @param preVerificationGas    - Gas not calculated by the handleOps method, but added to the gas paid.\n *                                Covers batch overhead.\n * @param gasFees               - packed gas fields maxPriorityFeePerGas and maxFeePerGas - Same as EIP-1559 gas parameters.\n * @param paymasterAndData      - If set, this field holds the paymaster address, verification gas limit, postOp gas limit and paymaster-specific extra data\n *                                The paymaster will pay for the transaction instead of the sender.\n * @param signature             - Sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n */\nstruct PackedUserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    bytes32 accountGasLimits;\n    uint256 preVerificationGas;\n    bytes32 gasFees;\n    bytes paymasterAndData;\n    bytes signature;\n}\n","license":"GPL-3.0"},"lib/delegation-framework/src/interfaces/IDelegationManager.sol":{"keccak256":"0x6ba56a87c8770c9ee74142a23a82b476c63024734c92df1b0541da846d4d7fd5","urls":[],"content":"// SPDX-License-Identifier: MIT AND Apache-2.0\npragma solidity 0.8.23;\n\nimport { Delegation, Execution, ModeCode } from \"../utils/Types.sol\";\n\n/**\n * @title IDelegationManager\n * @notice Interface that exposes methods of a custom DelegationManager implementation.\n */\ninterface IDelegationManager {\n    ////////////////////////////// Events //////////////////////////////\n\n    /// @dev Emitted when a delegation is redeemed\n    event RedeemedDelegation(address indexed rootDelegator, address indexed redeemer, Delegation delegation);\n\n    /// @dev Emitted when a delegation is enabled after being disabled\n    event EnabledDelegation(\n        bytes32 indexed delegationHash, address indexed delegator, address indexed delegate, Delegation delegation\n    );\n\n    /// @dev Emitted when a delegation is disabled\n    event DisabledDelegation(\n        bytes32 indexed delegationHash, address indexed delegator, address indexed delegate, Delegation delegation\n    );\n\n    /// @dev Emitted when the domain hash is set\n    event SetDomain(\n        bytes32 indexed domainHash, string name, string domainVersion, uint256 chainId, address indexed contractAddress\n    );\n\n    ////////////////////////////// Errors //////////////////////////////\n\n    /// @dev Error thrown when a user attempts to use a disabled delegation\n    error CannotUseADisabledDelegation();\n\n    /// @dev Error thrown when the authority in a chain of delegations doesn't match the expected authority\n    error InvalidAuthority();\n\n    /// @dev Error thrown when the redeemer doesn't match the approved delegate\n    error InvalidDelegate();\n\n    /// @dev Error thrown when the delegator of a delegation doesn't match the caller\n    error InvalidDelegator();\n\n    /// @dev Error thrown when the EOA signature provided is invalid\n    error InvalidEOASignature();\n\n    /// @dev Error thrown when the ERC1271 signature provided is invalid\n    error InvalidERC1271Signature();\n\n    /// @dev Error thrown when the signature is empty\n    error EmptySignature();\n\n    /// @dev Error thrown when the delegation provided is already disabled\n    error AlreadyDisabled();\n\n    /// @dev Error thrown when the delegation provided is already enabled\n    error AlreadyEnabled();\n\n    /// @dev Error thrown when the batch size doesn't match the execution array size\n    error BatchDataLengthMismatch();\n\n    ////////////////////////////// MM Implementation Methods //////////////////////////////\n\n    function pause() external;\n\n    function unpause() external;\n\n    function enableDelegation(Delegation calldata _delegation) external;\n\n    function disableDelegation(Delegation calldata _delegation) external;\n\n    function disabledDelegations(bytes32 _delegationHash) external view returns (bool);\n\n    function getDelegationHash(Delegation calldata _delegation) external pure returns (bytes32);\n\n    function redeemDelegations(\n        bytes[] calldata _permissionContexts,\n        ModeCode[] calldata _modes,\n        bytes[] calldata _executionCallDatas\n    )\n        external;\n\n    function getDomainHash() external view returns (bytes32);\n}\n","license":"MIT AND Apache-2.0"},"lib/delegation-framework/src/utils/Types.sol":{"keccak256":"0xda4094eb4839087157f34750fb4d1a2d6241fbb8ee0d41fd1f2905209e6a05b0","urls":[],"content":"// SPDX-License-Identifier: MIT AND Apache-2.0\npragma solidity 0.8.23;\n\nimport { PackedUserOperation } from \"@account-abstraction/interfaces/PackedUserOperation.sol\";\nimport { Execution } from \"@erc7579/interfaces/IERC7579Account.sol\";\nimport { ModeCode, CallType, ExecType, ModeSelector, ModePayload } from \"@erc7579/lib/ModeLib.sol\";\n\n/**\n * @title EIP712Domain\n * @notice Struct representing the EIP712 domain for signature validation.\n */\nstruct EIP712Domain {\n    string name;\n    string version;\n    uint256 chainId;\n    address verifyingContract;\n}\n\n/**\n * @title Delegation\n * @notice Struct representing a delegation to give a delegate authority to act on behalf of a delegator.\n * @dev `signature` is ignored during delegation hashing so it can be manipulated post signing.\n */\nstruct Delegation {\n    address delegate;\n    address delegator;\n    bytes32 authority;\n    Caveat[] caveats;\n    uint256 salt;\n    bytes signature;\n}\n\n/**\n * @title Caveat\n * @notice Struct representing a caveat to enforce on a delegation.\n * @dev `args` is ignored during caveat hashing so it can be manipulated post signing.\n */\nstruct Caveat {\n    address enforcer;\n    bytes terms;\n    bytes args;\n}\n\n/**\n * @title P256 Public Key\n * @notice Struct containing the X and Y coordinates of a P256 public key.\n */\nstruct P256PublicKey {\n    uint256 x;\n    uint256 y;\n}\n\nstruct DecodedWebAuthnSignature {\n    uint256 r;\n    uint256 s;\n    bytes authenticatorData;\n    bool requireUserVerification;\n    string clientDataJSONPrefix;\n    string clientDataJSONSuffix;\n    uint256 responseTypeLocation;\n}\n","license":"MIT AND Apache-2.0"},"lib/erc7579-implementation/src/interfaces/IERC7579Account.sol":{"keccak256":"0x08368aba5f1bb83eb57e9f8d31a04edee4be69159b4844a6443f65100917011c","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport { CallType, ExecType, ModeCode } from \"../lib/ModeLib.sol\";\n\nstruct Execution {\n    address target;\n    uint256 value;\n    bytes callData;\n}\n\ninterface IERC7579Account {\n    event ModuleInstalled(uint256 moduleTypeId, address module);\n    event ModuleUninstalled(uint256 moduleTypeId, address module);\n\n    /**\n     * @dev Executes a transaction on behalf of the account.\n     *         This function is intended to be called by ERC-4337 EntryPoint.sol\n     * @dev Ensure adequate authorization control: i.e. onlyEntryPointOrSelf\n     *\n     * @dev MSA MUST implement this function signature.\n     * If a mode is requested that is not supported by the Account, it MUST revert\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\n     * @param executionCalldata The encoded execution call data\n     */\n    function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\n\n    /**\n     * @dev Executes a transaction on behalf of the account.\n     *         This function is intended to be called by Executor Modules\n     * @dev Ensure adequate authorization control: i.e. onlyExecutorModule\n     *\n     * @dev MSA MUST implement this function signature.\n     * If a mode is requested that is not supported by the Account, it MUST revert\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\n     * @param executionCalldata The encoded execution call data\n     */\n    function executeFromExecutor(\n        ModeCode mode,\n        bytes calldata executionCalldata\n    )\n        external\n        payable\n        returns (bytes[] memory returnData);\n\n    /**\n     * @dev ERC-1271 isValidSignature\n     *         This function is intended to be used to validate a smart account signature\n     * and may forward the call to a validator module\n     *\n     * @param hash The hash of the data that is signed\n     * @param data The data that is signed\n     */\n    function isValidSignature(bytes32 hash, bytes calldata data) external view returns (bytes4);\n\n    /**\n     * @dev installs a Module of a certain type on the smart account\n     * @dev Implement Authorization control of your chosing\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\n     * @param module the module address\n     * @param initData arbitrary data that may be required on the module during `onInstall`\n     * initialization.\n     */\n    function installModule(\n        uint256 moduleTypeId,\n        address module,\n        bytes calldata initData\n    )\n        external\n        payable;\n\n    /**\n     * @dev uninstalls a Module of a certain type on the smart account\n     * @dev Implement Authorization control of your chosing\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\n     * @param module the module address\n     * @param deInitData arbitrary data that may be required on the module during `onUninstall`\n     * de-initialization.\n     */\n    function uninstallModule(\n        uint256 moduleTypeId,\n        address module,\n        bytes calldata deInitData\n    )\n        external\n        payable;\n\n    /**\n     * Function to check if the account supports a certain CallType or ExecType (see ModeLib.sol)\n     * @param encodedMode the encoded mode\n     */\n    function supportsExecutionMode(ModeCode encodedMode) external view returns (bool);\n\n    /**\n     * Function to check if the account supports installation of a certain module type Id\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\n     */\n    function supportsModule(uint256 moduleTypeId) external view returns (bool);\n\n    /**\n     * Function to check if the account has a certain module installed\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\n     *      Note: keep in mind that some contracts can be multiple module types at the same time. It\n     *            thus may be necessary to query multiple module types\n     * @param module the module address\n     * @param additionalContext additional context data that the smart account may interpret to\n     *                          identifiy conditions under which the module is installed.\n     *                          usually this is not necessary, but for some special hooks that\n     *                          are stored in mappings, this param might be needed\n     */\n    function isModuleInstalled(\n        uint256 moduleTypeId,\n        address module,\n        bytes calldata additionalContext\n    )\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Returns the account id of the smart account\n     * @return accountImplementationId the account id of the smart account\n     * the accountId should be structured like so:\n     *        \"vendorname.accountname.semver\"\n     */\n    function accountId() external view returns (string memory accountImplementationId);\n}\n","license":"MIT"},"lib/erc7579-implementation/src/lib/ExecutionLib.sol":{"keccak256":"0xa6d41aa7532a4bff83a8c335a8050ebe0c7a73c456d70594d2123dc293892c5c","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\nimport { Execution } from \"../interfaces/IERC7579Account.sol\";\n\n/**\n * Helper Library for decoding Execution calldata\n * malloc for memory allocation is bad for gas. use this assembly instead\n */\nlibrary ExecutionLib {\n    function decodeBatch(bytes calldata callData)\n        internal\n        pure\n        returns (Execution[] calldata executionBatch)\n    {\n        /*\n         * Batch Call Calldata Layout\n         * Offset (in bytes)    | Length (in bytes) | Contents\n         * 0x0                  | 0x4               | bytes4 function selector\n        *  0x4                  | -                 |\n        abi.encode(IERC7579Execution.Execution[])\n         */\n        // solhint-disable-next-line no-inline-assembly\n        assembly (\"memory-safe\") {\n            let dataPointer := add(callData.offset, calldataload(callData.offset))\n\n            // Extract the ERC7579 Executions\n            executionBatch.offset := add(dataPointer, 32)\n            executionBatch.length := calldataload(dataPointer)\n        }\n    }\n\n    function encodeBatch(Execution[] memory executions)\n        internal\n        pure\n        returns (bytes memory callData)\n    {\n        callData = abi.encode(executions);\n    }\n\n    function decodeSingle(bytes calldata executionCalldata)\n        internal\n        pure\n        returns (address target, uint256 value, bytes calldata callData)\n    {\n        target = address(bytes20(executionCalldata[0:20]));\n        value = uint256(bytes32(executionCalldata[20:52]));\n        callData = executionCalldata[52:];\n    }\n\n    function encodeSingle(\n        address target,\n        uint256 value,\n        bytes memory callData\n    )\n        internal\n        pure\n        returns (bytes memory userOpCalldata)\n    {\n        userOpCalldata = abi.encodePacked(target, value, callData);\n    }\n}\n","license":"MIT"},"lib/erc7579-implementation/src/lib/ModeLib.sol":{"keccak256":"0x02ce0fc8805d1427841f32e2335157e3fae18e99d5c49ba46d53e12fcd1a5185","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.23;\n\n/**\n * @title ModeLib\n * To allow smart accounts to be very simple, but allow for more complex execution, A custom mode\n * encoding is used.\n *    Function Signature of execute function:\n *           function execute(ModeCode mode, bytes calldata executionCalldata) external payable;\n * This allows for a single bytes32 to be used to encode the execution mode, calltype, execType and\n * context.\n * NOTE: Simple Account implementations only have to scope for the most significant byte. Account  that\n * implement\n * more complex execution modes may use the entire bytes32.\n *\n * |--------------------------------------------------------------------|\n * | CALLTYPE  | EXECTYPE  |   UNUSED   | ModeSelector  |  ModePayload  |\n * |--------------------------------------------------------------------|\n * | 1 byte    | 1 byte    |   4 bytes  | 4 bytes       |   22 bytes    |\n * |--------------------------------------------------------------------|\n *\n * CALLTYPE: 1 byte\n * CallType is used to determine how the executeCalldata paramter of the execute function has to be\n * decoded.\n * It can be either single, batch or delegatecall. In the future different calls could be added.\n * CALLTYPE can be used by a validation module to determine how to decode <userOp.callData[36:]>.\n *\n * EXECTYPE: 1 byte\n * ExecType is used to determine how the account should handle the execution.\n * It can indicate if the execution should revert on failure or continue execution.\n * In the future more execution modes may be added.\n * Default Behavior (EXECTYPE = 0x00) is to revert on a single failed execution. If one execution in\n * a batch fails, the entire batch is reverted\n *\n * UNUSED: 4 bytes\n * Unused bytes are reserved for future use.\n *\n * ModeSelector: bytes4\n * The \"optional\" mode selector can be used by account vendors, to implement custom behavior in\n * their accounts.\n * the way a ModeSelector is to be calculated is bytes4(keccak256(\"vendorname.featurename\"))\n * this is to prevent collisions between different vendors, while allowing innovation and the\n * development of new features without coordination between ERC-7579 implementing accounts\n *\n * ModePayload: 22 bytes\n * Mode payload is used to pass additional data to the smart account execution, this may be\n * interpreted depending on the ModeSelector\n *\n * ExecutionCallData: n bytes\n * single, delegatecall or batch exec abi.encoded as bytes\n */\nimport { Execution } from \"../interfaces/IERC7579Account.sol\";\n\n// Custom type for improved developer experience\ntype ModeCode is bytes32;\n\ntype CallType is bytes1;\n\ntype ExecType is bytes1;\n\ntype ModeSelector is bytes4;\n\ntype ModePayload is bytes22;\n\n// Default CallType\nCallType constant CALLTYPE_SINGLE = CallType.wrap(0x00);\n// Batched CallType\nCallType constant CALLTYPE_BATCH = CallType.wrap(0x01);\n// @dev Implementing delegatecall is OPTIONAL!\n// implement delegatecall with extreme care.\nCallType constant CALLTYPE_STATIC = CallType.wrap(0xFE);\nCallType constant CALLTYPE_DELEGATECALL = CallType.wrap(0xFF);\n\n// @dev default behavior is to revert on failure\n// To allow very simple accounts to use mode encoding, the default behavior is to revert on failure\n// Since this is value 0x00, no additional encoding is required for simple accounts\nExecType constant EXECTYPE_DEFAULT = ExecType.wrap(0x00);\n// @dev account may elect to change execution behavior. For example \"try exec\" / \"allow fail\"\nExecType constant EXECTYPE_TRY = ExecType.wrap(0x01);\n\nModeSelector constant MODE_DEFAULT = ModeSelector.wrap(bytes4(0x00000000));\n// Example declaration of a custom mode selector\nModeSelector constant MODE_OFFSET = ModeSelector.wrap(bytes4(keccak256(\"default.mode.offset\")));\n\n/**\n * @dev ModeLib is a helper library to encode/decode ModeCodes\n */\nlibrary ModeLib {\n    function decode(ModeCode mode)\n        internal\n        pure\n        returns (\n            CallType _calltype,\n            ExecType _execType,\n            ModeSelector _modeSelector,\n            ModePayload _modePayload\n        )\n    {\n        assembly {\n            _calltype := mode\n            _execType := shl(8, mode)\n            _modeSelector := shl(48, mode)\n            _modePayload := shl(80, mode)\n        }\n    }\n\n    function encode(\n        CallType callType,\n        ExecType execType,\n        ModeSelector mode,\n        ModePayload payload\n    )\n        internal\n        pure\n        returns (ModeCode)\n    {\n        return ModeCode.wrap(\n            bytes32(\n                abi.encodePacked(callType, execType, bytes4(0), ModeSelector.unwrap(mode), payload)\n            )\n        );\n    }\n\n    function encodeSimpleBatch() internal pure returns (ModeCode mode) {\n        mode = encode(CALLTYPE_BATCH, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function encodeSimpleSingle() internal pure returns (ModeCode mode) {\n        mode = encode(CALLTYPE_SINGLE, EXECTYPE_DEFAULT, MODE_DEFAULT, ModePayload.wrap(0x00));\n    }\n\n    function getCallType(ModeCode mode) internal pure returns (CallType calltype) {\n        assembly {\n            calltype := mode\n        }\n    }\n}\n\nusing { eqModeSelector as == } for ModeSelector global;\nusing { eqCallType as == } for CallType global;\nusing { eqExecType as == } for ExecType global;\n\nfunction eqCallType(CallType a, CallType b) pure returns (bool) {\n    return CallType.unwrap(a) == CallType.unwrap(b);\n}\n\nfunction eqExecType(ExecType a, ExecType b) pure returns (bool) {\n    return ExecType.unwrap(a) == ExecType.unwrap(b);\n}\n\nfunction eqModeSelector(ModeSelector a, ModeSelector b) pure returns (bool) {\n    return ModeSelector.unwrap(a) == ModeSelector.unwrap(b);\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"keccak256":"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"keccak256":"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol":{"keccak256":"0x574a7451e42724f7de29e2855c392a8a5020acd695169466a18459467d719d63","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.22;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC-1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"keccak256":"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol":{"keccak256":"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\n        assembly {\n            $.slot := ReentrancyGuardStorageLocation\n        }\n    }\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if ($._status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        $._status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        $._status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\n        return $._status == ENTERED;\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"keccak256":"0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1967.sol)\n\npragma solidity >=0.4.11;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"keccak256":"0x82f757819bf2429a0d4db141b99a4bbe5039e4ef86dfb94e2e6d40577ed5b28b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"keccak256":"0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.21;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This library provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\n */\nlibrary ERC1967Utils {\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit IERC1967.Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the ERC-1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit IERC1967.BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"keccak256":"0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                revert(add(returndata, 0x20), mload(returndata))\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"keccak256":"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n","license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"keccak256":"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97","urls":[],"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n","license":"MIT"},"src/RebalanceExecutor.sol":{"keccak256":"0xf3d512b06479e85f7f3b70c62cd07b6ccd574c5502ab324b2f862c12cc1cddab","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\nimport \"./libraries/StrategyLibrary.sol\";\nimport \"./StrategyRegistry.sol\";\nimport \"./interfaces/IPythOracle.sol\";\nimport \"./interfaces/IUniswapHelper.sol\";\nimport \"./interfaces/IRebalancerConfig.sol\";\nimport \"./delegation/interfaces/IDelegationManager.sol\";\nimport { Delegation, ModeCode, Execution } from \"@delegation-framework/utils/Types.sol\";\nimport { ExecutionLib } from \"@erc7579/lib/ExecutionLib.sol\";\nimport \"./delegation/types/DelegationTypes.sol\";\n\n/**\n * @title RebalanceExecutor\n * @notice Executes portfolio rebalances via MetaMask DelegationManager\n * @dev SMART ACCOUNT ONLY: All rebalances execute from MetaMask DeleGator accounts\n *\n * Flow:\n * 1. Bot calls rebalance(userAccount, strategyId, delegation)\n * 2. Read strategy from StrategyRegistry\n * 3. Validate userAccount is a DeleGator smart account\n * 4. Verify DeleGator owner matches strategy owner\n * 5. Calculate swaps using StrategyLibrary\n * 6. Build swap calldata for each swap\n * 7. Execute via DelegationManager.redeemDelegations()\n * 8. DelegationManager calls DeleGator.executeFromExecutor()\n * 9. Swaps happen IN the DeleGator (funds stay in smart account)\n * 10. Bot receives gas reimbursement\n */\ncontract RebalanceExecutor is Initializable, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n    IDelegationManager public delegationManager;\n    StrategyRegistry public registry;\n    IPythOracle public oracle;\n    IUniswapHelper public uniswapHelper;\n    IRebalancerConfig public config;\n\n    // SECURITY FIX HIGH-1: DEX whitelist for swap target validation\n    mapping(address => bool) public approvedDEXs;\n\n    // SECURITY FIX MEDIUM-1: Emergency pause mechanism\n    bool public paused;\n\n    // Events\n    event RebalanceExecuted(\n        address indexed user, uint256 indexed strategyId, uint256 timestamp, uint256 drift, uint256 gasReimbursed\n    );\n    event RebalanceFailed(address indexed user, uint256 indexed strategyId, string reason);\n    event SwapExecuted(address indexed user, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);\n    event DEXApprovalUpdated(address indexed dex, bool approved);\n    event EmergencyPaused(address indexed caller);\n    event EmergencyUnpaused(address indexed caller);\n\n    // DEBUG: Detailed logging events for error tracing\n    event DebugRebalanceStarted(address indexed user, uint256 indexed strategyId, address sender);\n    event DebugStrategyFetched(address indexed user, uint256 indexed strategyId, bool isActive, address owner);\n    event DebugDeleGatorValidated(address indexed user, address delegatorOwner);\n    event DebugDriftCalculated(uint256 drift, uint256 maxDrift, uint256 portfolioValue);\n    event DebugSwapValidationPassed(uint256 swapCount);\n    event DebugBeforeDelegationCall(uint256 permissionContextsLength, uint256 modesLength, uint256 executionLength);\n    event DebugAfterDelegationCall(uint256 driftBefore, uint256 driftAfter, uint256 valueBefore, uint256 valueAfter);\n\n    // Errors\n    error StrategyNotActive();\n    error TooSoonToRebalance();\n    error DriftBelowThreshold();\n    error InvalidDelegation();\n    error RebalanceExecutionFailed();\n    error UnapprovedDEX(address dex);\n    error InsufficientSlippageProtection();\n    error SwapsDidNotImproveAllocation();\n    error BalanceValidationFailed();\n    error ContractPaused();\n    error NotADeleGator();\n    error InvalidDeleGatorOwner();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // SECURITY FIX MEDIUM-1: Pause modifier\n    modifier whenNotPaused() {\n        if (paused) revert ContractPaused();\n        _;\n    }\n\n    /**\n     * @notice Initialize the executor\n     * @param _owner Owner address\n     * @param _delegationManager DelegationManager address\n     * @param _registry StrategyRegistry address\n     * @param _oracle Oracle address\n     * @param _uniswapHelper UniswapHelper address\n     * @param _config Config address\n     */\n    function initialize(\n        address _owner,\n        address _delegationManager,\n        address _registry,\n        address _oracle,\n        address _uniswapHelper,\n        address _config\n    ) external initializer {\n        require(_owner != address(0), \"Invalid owner\");\n        require(_delegationManager != address(0), \"Invalid delegation manager\");\n        require(_registry != address(0), \"Invalid registry\");\n        require(_oracle != address(0), \"Invalid oracle\");\n        require(_uniswapHelper != address(0), \"Invalid uniswap helper\");\n        require(_config != address(0), \"Invalid config\");\n\n        __Ownable_init(_owner);\n        __UUPSUpgradeable_init();\n        __ReentrancyGuard_init();\n\n        delegationManager = IDelegationManager(_delegationManager);\n        registry = StrategyRegistry(_registry);\n        oracle = IPythOracle(_oracle);\n        uniswapHelper = IUniswapHelper(_uniswapHelper);\n        config = IRebalancerConfig(_config);\n\n        // SECURITY: Start unpaused\n        paused = false;\n    }\n\n    /**\n     * @notice SECURITY FIX HIGH-1: Approve/revoke DEX for swaps\n     * @param dex DEX contract address\n     * @param approved Whether to approve or revoke\n     */\n    function setDEXApproval(address dex, bool approved) external onlyOwner {\n        require(dex != address(0), \"Invalid DEX address\");\n        approvedDEXs[dex] = approved;\n        emit DEXApprovalUpdated(dex, approved);\n    }\n\n    /**\n     * @notice SECURITY FIX HIGH-1: Batch approve multiple DEXs\n     * @param dexs Array of DEX addresses\n     * @param approved Whether to approve or revoke\n     */\n    function batchSetDEXApproval(address[] calldata dexs, bool approved) external onlyOwner {\n        for (uint256 i = 0; i < dexs.length; i++) {\n            require(dexs[i] != address(0), \"Invalid DEX address\");\n            approvedDEXs[dexs[i]] = approved;\n            emit DEXApprovalUpdated(dexs[i], approved);\n        }\n    }\n\n    /**\n     * @notice SECURITY FIX MEDIUM-1: Emergency pause\n     */\n    function pause() external onlyOwner {\n        paused = true;\n        emit EmergencyPaused(msg.sender);\n    }\n\n    /**\n     * @notice SECURITY FIX MEDIUM-1: Unpause after emergency\n     */\n    function unpause() external onlyOwner {\n        paused = false;\n        emit EmergencyUnpaused(msg.sender);\n    }\n\n    /**\n     * @notice Update DelegationManager address\n     * @param _newDelegationManager New DelegationManager contract address\n     * @dev ADMIN ONLY: Allows owner to update DelegationManager in case of redeployment\n     */\n    function setDelegationManager(address _newDelegationManager) external onlyOwner {\n        require(_newDelegationManager != address(0), \"Invalid delegation manager\");\n        delegationManager = IDelegationManager(_newDelegationManager);\n    }\n\n    /**\n     * @notice Execute a rebalance for a user's strategy\n     * @param userAccount User's MetaMask DeleGator account address\n     * @param strategyId Strategy ID to rebalance\n     * @param tokensIn Tokens being sold in each swap (for approval)\n     * @param swapTargets Target contracts for each swap (from DEX aggregator)\n     * @param swapCallDatas Pre-calculated optimal swap calldata (from off-chain DEX aggregator)\n     * @param minOutputAmounts Minimum output amounts for slippage protection (SECURITY FIX HIGH-2)\n     * @param nativeValues Native token amounts to send with each swap (for native token swaps/wraps)\n     * @param permissionContexts Encoded delegations (user's signed delegation)\n     * @param modes Execution modes for DelegationManager\n     *\n     * @dev New architecture: Bot calculates optimal routes OFF-CHAIN via DEX aggregators (1inch/0x/ParaSwap)\n     *      and passes the pre-calculated swap data here for ON-CHAIN execution.\n     *      This saves gas and enables better pricing through multi-DEX comparison.\n     *\n     * SECURITY ENHANCEMENTS:\n     * - HIGH-1: Validates swap targets against whitelist\n     * - HIGH-2: Enforces minimum output amounts for slippage protection\n     * - HIGH-3: Validates swaps improve portfolio allocation\n     * - HIGH-5: Validates final balances match expected values\n     * - MEDIUM-1: Can be paused in emergency\n     * - NEW: Supports native token swaps via nativeValues parameter\n     * - NEW: Automatically approves tokens before swaps\n     */\n    function rebalance(\n        address userAccount,\n        uint256 strategyId,\n        address[] calldata tokensIn,\n        address[] calldata swapTargets,\n        bytes[] calldata swapCallDatas,\n        uint256[] calldata minOutputAmounts,\n        uint256[] calldata nativeValues,\n        bytes[] calldata permissionContexts,\n        ModeCode[] calldata modes\n    ) external payable nonReentrant whenNotPaused {\n        // DEBUG: Log function entry\n        emit DebugRebalanceStarted(userAccount, strategyId, msg.sender);\n\n        // 1. Get strategy from registry\n        StrategyLibrary.Strategy memory strategy = registry.getStrategy(userAccount, strategyId);\n        emit DebugStrategyFetched(userAccount, strategyId, strategy.isActive, strategy.owner);\n\n        // 2. Validate userAccount is a DeleGator smart account\n        if (!DelegationTypes.isDeleGator(userAccount)) {\n            revert NotADeleGator();\n        }\n\n        // 3. Verify strategy owner matches DeleGator owner (security check)\n        address delegatorOwner = DelegationTypes.getDeleGatorOwner(userAccount);\n        if (delegatorOwner == address(0) || delegatorOwner != strategy.owner) {\n            revert InvalidDeleGatorOwner();\n        }\n        emit DebugDeleGatorValidated(userAccount, delegatorOwner);\n\n        // 4. Validate strategy\n        if (!strategy.isActive) {\n            revert StrategyNotActive();\n        }\n\n        if (block.timestamp < strategy.lastRebalanceTime + strategy.rebalanceInterval) {\n            revert TooSoonToRebalance();\n        }\n\n        // 5. Calculate current drift and portfolio value BEFORE swaps\n        uint256[] memory currentWeightsBefore =\n            StrategyLibrary.calculateCurrentWeights(userAccount, strategy.tokens, address(oracle));\n        uint256 drift = StrategyLibrary.calculateDrift(currentWeightsBefore, strategy.weights);\n\n        // SECURITY FIX HIGH-3: Store portfolio value before swaps\n        uint256 portfolioValueBefore = StrategyLibrary.getPortfolioValue(userAccount, strategy.tokens, address(oracle));\n\n        // 6. Check drift exceeds threshold\n        uint256 maxDrift = config.getMaxAllocationDrift();\n        if (drift < maxDrift) {\n            revert DriftBelowThreshold();\n        }\n        emit DebugDriftCalculated(drift, maxDrift, portfolioValueBefore);\n\n        // 7. Validate swap data\n        require(tokensIn.length == swapTargets.length, \"TokensIn length mismatch\");\n        require(swapTargets.length == swapCallDatas.length, \"Swap arrays length mismatch\");\n        require(swapTargets.length == minOutputAmounts.length, \"Min output amounts length mismatch\");\n        require(swapTargets.length == nativeValues.length, \"Native values length mismatch\");\n        require(swapTargets.length > 0, \"No swaps provided\");\n\n        // SECURITY FIX HIGH-1: Validate all swap targets are approved DEXs\n        for (uint256 i = 0; i < swapTargets.length; i++) {\n            if (!approvedDEXs[swapTargets[i]]) {\n                revert UnapprovedDEX(swapTargets[i]);\n            }\n        }\n\n        // SECURITY FIX HIGH-2: Validate slippage protection is provided\n        for (uint256 i = 0; i < minOutputAmounts.length; i++) {\n            if (minOutputAmounts[i] == 0) {\n                revert InsufficientSlippageProtection();\n            }\n        }\n        emit DebugSwapValidationPassed(swapTargets.length);\n\n        // 8. Build execution calldata for each swap using MetaMask's Execution format\n        // Bot provides pre-calculated optimal routes from DEX aggregators\n        // Native values allow DeleGator to send its own native tokens with swaps/wraps\n\n        // Build Execution[] array with approval + swap for each token\n        // MetaMask's DelegationManager expects ERC-7579 Execution format\n        Execution[] memory executions = new Execution[](swapTargets.length * 2);\n        uint256 idx = 0;\n\n        for (uint256 i = 0; i < swapTargets.length; i++) {\n            // 1. Approval execution: DeleGator approves DEX to spend tokens\n            executions[idx++] = Execution({\n                target: tokensIn[i],        // Token contract address\n                value: 0,                   // No native value for approval\n                callData: abi.encodeWithSignature(\n                    \"approve(address,uint256)\",\n                    swapTargets[i],\n                    type(uint256).max\n                )\n            });\n\n            // 2. Swap execution: DeleGator calls DEX to execute swap\n            executions[idx++] = Execution({\n                target: swapTargets[i],     // DEX contract address\n                value: nativeValues[i],     // Native token amount (for native swaps/wraps)\n                callData: swapCallDatas[i]  // Pre-calculated optimal swap route\n            });\n        }\n\n        // Encode executions using MetaMask's ExecutionLib (ERC-7579 format)\n        // This produces the correct format for DelegationManager.redeemDelegations()\n        bytes[] memory executionCallDatas = new bytes[](1);\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\n\n        // 9. Execute via DelegationManager\n        emit DebugBeforeDelegationCall(permissionContexts.length, modes.length, executionCallDatas.length);\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\n            // SECURITY FIX HIGH-3 & HIGH-5: Validate swaps improved allocation\n            uint256[] memory currentWeightsAfter =\n                StrategyLibrary.calculateCurrentWeights(userAccount, strategy.tokens, address(oracle));\n            uint256 driftAfter = StrategyLibrary.calculateDrift(currentWeightsAfter, strategy.weights);\n\n            // Drift should be reduced after rebalancing\n            if (driftAfter >= drift) {\n                revert SwapsDidNotImproveAllocation();\n            }\n\n            // SECURITY FIX HIGH-3: Portfolio value should not decrease significantly (allowing for slippage)\n            uint256 portfolioValueAfter =\n                StrategyLibrary.getPortfolioValue(userAccount, strategy.tokens, address(oracle));\n            uint256 maxSlippageBps = config.getMaxSlippage();\n            uint256 minAcceptableValue = (portfolioValueBefore * (10000 - maxSlippageBps)) / 10000;\n\n            emit DebugAfterDelegationCall(drift, driftAfter, portfolioValueBefore, portfolioValueAfter);\n\n            if (portfolioValueAfter < minAcceptableValue) {\n                revert BalanceValidationFailed();\n            }\n\n            // 10. Update strategy last rebalance time\n            registry.updateLastRebalanceTime(userAccount, strategyId);\n\n            // 11. Calculate gas reimbursement\n            uint256 gasReimbursed = msg.value;\n\n            emit RebalanceExecuted(userAccount, strategyId, block.timestamp, drift, gasReimbursed);\n        } catch Error(string memory reason) {\n            emit RebalanceFailed(userAccount, strategyId, reason);\n            revert RebalanceExecutionFailed();\n        }\n    }\n\n    /**\n     * @notice Check if a strategy should be rebalanced\n     * @param userAccount User's account address\n     * @param strategyId Strategy ID\n     * @return isShouldRebalance True if rebalance is needed\n     * @return drift Current drift in basis points\n     */\n    function shouldRebalance(address userAccount, uint256 strategyId)\n        external\n        view\n        returns (bool isShouldRebalance, uint256 drift)\n    {\n        try registry.getStrategy(userAccount, strategyId) returns (StrategyLibrary.Strategy memory strategy) {\n            if (!strategy.isActive) {\n                return (false, 0);\n            }\n\n            if (block.timestamp < strategy.lastRebalanceTime + strategy.rebalanceInterval) {\n                return (false, 0);\n            }\n\n            try StrategyLibrary.calculateCurrentWeights(userAccount, strategy.tokens, address(oracle)) returns (\n                uint256[] memory currentWeights\n            ) {\n                drift = StrategyLibrary.calculateDrift(currentWeights, strategy.weights);\n                uint256 maxDrift = config.getMaxAllocationDrift();\n                isShouldRebalance = drift >= maxDrift;\n            } catch {\n                return (false, 0);\n            }\n        } catch {\n            return (false, 0);\n        }\n    }\n\n    /**\n     * @notice Get portfolio value for a strategy\n     * @param userAccount User's account address\n     * @param strategyId Strategy ID\n     * @return valueUSD Portfolio value in USD (18 decimals)\n     */\n    function getPortfolioValue(address userAccount, uint256 strategyId) external view returns (uint256 valueUSD) {\n        try registry.getStrategy(userAccount, strategyId) returns (StrategyLibrary.Strategy memory strategy) {\n            return StrategyLibrary.getPortfolioValue(userAccount, strategy.tokens, address(oracle));\n        } catch {\n            return 0;\n        }\n    }\n\n    // ============================================\n    // DEBUGGING FUNCTIONS\n    // ============================================\n\n    // Events for debugging\n    event DebugTestStrategyOwnership(\n        bool isValid,\n        address strategyOwner,\n        address delegatorOwner,\n        string error\n    );\n    event DebugTestDelegationNoOp(bool success, string message);\n    event DebugTestDelegationTransfer(bool success, string message);\n    event DebugTestDelegationApproval(bool success, string message);\n    event DebugTestDelegationSingleSwap(bool success, string message);\n\n    /**\n     * @notice DEBUG: Test strategy ownership validation ONLY\n     * @param userAccount DeleGator smart account address\n     * @param strategyId Strategy ID to validate\n     * @return isValid Whether validation passed\n     * @return strategyOwner Strategy owner from registry\n     * @return delegatorOwner DeleGator owner from contract\n     * @return error Error message if validation failed\n     * @dev This function ONLY tests registry + ownership checks, NO delegation\n     */\n    function testStrategyOwnership(address userAccount, uint256 strategyId)\n        external\n        view\n        returns (\n            bool isValid,\n            address strategyOwner,\n            address delegatorOwner,\n            string memory error\n        )\n    {\n        // Check if userAccount is a DeleGator\n        if (!DelegationTypes.isDeleGator(userAccount)) {\n            return (false, address(0), address(0), \"NotADeleGator\");\n        }\n\n        // Get DeleGator owner\n        delegatorOwner = DelegationTypes.getDeleGatorOwner(userAccount);\n        if (delegatorOwner == address(0)) {\n            return (false, address(0), delegatorOwner, \"DeleGatorOwnerIsZero\");\n        }\n\n        // Try to get strategy\n        try registry.getStrategy(userAccount, strategyId) returns (StrategyLibrary.Strategy memory strategy) {\n            strategyOwner = strategy.owner;\n\n            if (!strategy.isActive) {\n                return (false, strategyOwner, delegatorOwner, \"StrategyNotActive\");\n            }\n\n            if (strategyOwner != delegatorOwner) {\n                return (false, strategyOwner, delegatorOwner, \"OwnerMismatch\");\n            }\n\n            return (true, strategyOwner, delegatorOwner, \"\");\n        } catch {\n            return (false, address(0), delegatorOwner, \"StrategyNotFound\");\n        }\n    }\n\n    /**\n     * @notice DEBUG: Test delegation with NO execution (tests signature + framework only)\n     * @param userAccount DeleGator smart account address\n     * @param permissionContext Encoded delegation with signature\n     * @param mode Execution mode\n     * @return success Whether delegation executed successfully\n     * @dev Tests ONLY delegation framework - no swaps, no tokens, just signature validation\n     */\n    function testDelegationNoOp(\n        address userAccount,\n        bytes calldata permissionContext,\n        ModeCode mode\n    ) external returns (bool success) {\n        // Build truly empty execution (no operations at all)\n        // This tests ONLY the delegation framework without any actual execution\n        Execution[] memory executions = new Execution[](0);  // Empty array = no-op\n\n        // Encode using ExecutionLib\n        bytes[] memory executionCallDatas = new bytes[](1);\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\n\n        // Build arrays for redeemDelegations\n        bytes[] memory permissionContexts = new bytes[](1);\n        permissionContexts[0] = permissionContext;\n\n        ModeCode[] memory modes = new ModeCode[](1);\n        modes[0] = mode;\n\n        // Try to execute\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\n            emit DebugTestDelegationNoOp(true, \"NoOp delegation succeeded\");\n            return true;\n        } catch Error(string memory reason) {\n            emit DebugTestDelegationNoOp(false, reason);\n            return false;\n        } catch (bytes memory lowLevelData) {\n            // Decode low-level revert\n            string memory decodedError = lowLevelData.length > 0\n                ? string(abi.encodePacked(\"LowLevelRevert:\", lowLevelData))\n                : \"LowLevelRevertNoData\";\n            emit DebugTestDelegationNoOp(false, decodedError);\n            return false;\n        }\n    }\n\n    /**\n     * @notice DEBUG: Test delegation with token approval ONLY\n     * @param userAccount DeleGator smart account address\n     * @param token Token to approve\n     * @param spender Address to approve\n     * @param permissionContext Encoded delegation with signature\n     * @param mode Execution mode\n     * @return success Whether delegation executed successfully\n     * @dev Tests delegation + approval (no swaps)\n     */\n    function testDelegationApproval(\n        address userAccount,\n        address token,\n        address spender,\n        bytes calldata permissionContext,\n        ModeCode mode\n    ) external returns (bool success) {\n        // Build approval execution\n        Execution[] memory executions = new Execution[](1);\n        executions[0] = Execution({\n            target: token,\n            value: 0,\n            callData: abi.encodeWithSignature(\"approve(address,uint256)\", spender, type(uint256).max)\n        });\n\n        // Encode using ExecutionLib\n        bytes[] memory executionCallDatas = new bytes[](1);\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\n\n        // Build arrays for redeemDelegations\n        bytes[] memory permissionContexts = new bytes[](1);\n        permissionContexts[0] = permissionContext;\n\n        ModeCode[] memory modes = new ModeCode[](1);\n        modes[0] = mode;\n\n        // Try to execute\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\n            emit DebugTestDelegationApproval(true, \"Approval delegation succeeded\");\n            return true;\n        } catch Error(string memory reason) {\n            emit DebugTestDelegationApproval(false, reason);\n            return false;\n        } catch (bytes memory lowLevelData) {\n            string memory decodedError = lowLevelData.length > 0\n                ? string(abi.encodePacked(\"LowLevelRevert:\", lowLevelData))\n                : \"LowLevelRevertNoData\";\n            emit DebugTestDelegationApproval(false, decodedError);\n            return false;\n        }\n    }\n\n    /**\n     * @notice DEBUG: Test delegation with token transfer\n     * @param userAccount DeleGator smart account address\n     * @param token Token to transfer\n     * @param recipient Recipient address\n     * @param amount Amount to transfer\n     * @param permissionContext Encoded delegation with signature\n     * @param mode Execution mode\n     * @return success Whether delegation executed successfully\n     * @dev Tests delegation + token movement (no DEX swaps)\n     */\n    function testDelegationTransfer(\n        address userAccount,\n        address token,\n        address recipient,\n        uint256 amount,\n        bytes calldata permissionContext,\n        ModeCode mode\n    ) external returns (bool success) {\n        // Build transfer execution\n        Execution[] memory executions = new Execution[](1);\n        executions[0] = Execution({\n            target: token,\n            value: 0,\n            callData: abi.encodeWithSignature(\"transfer(address,uint256)\", recipient, amount)\n        });\n\n        // Encode using ExecutionLib\n        bytes[] memory executionCallDatas = new bytes[](1);\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\n\n        // Build arrays for redeemDelegations\n        bytes[] memory permissionContexts = new bytes[](1);\n        permissionContexts[0] = permissionContext;\n\n        ModeCode[] memory modes = new ModeCode[](1);\n        modes[0] = mode;\n\n        // Try to execute\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\n            emit DebugTestDelegationTransfer(true, \"Transfer delegation succeeded\");\n            return true;\n        } catch Error(string memory reason) {\n            emit DebugTestDelegationTransfer(false, reason);\n            return false;\n        } catch (bytes memory lowLevelData) {\n            string memory decodedError = lowLevelData.length > 0\n                ? string(abi.encodePacked(\"LowLevelRevert:\", lowLevelData))\n                : \"LowLevelRevertNoData\";\n            emit DebugTestDelegationTransfer(false, decodedError);\n            return false;\n        }\n    }\n\n    /**\n     * @notice DEBUG: Test delegation with single swap (approval + swap)\n     * @param userAccount DeleGator smart account address\n     * @param tokenIn Token being sold\n     * @param swapTarget DEX contract address\n     * @param swapCallData Swap calldata\n     * @param nativeValue Native token amount (for native swaps)\n     * @param permissionContext Encoded delegation with signature\n     * @param mode Execution mode\n     * @return success Whether delegation executed successfully\n     * @dev Tests delegation + ONE swap (minimal complexity)\n     */\n    function testDelegationSingleSwap(\n        address userAccount,\n        address tokenIn,\n        address swapTarget,\n        bytes calldata swapCallData,\n        uint256 nativeValue,\n        bytes calldata permissionContext,\n        ModeCode mode\n    ) external returns (bool success) {\n        // Build approval + swap executions\n        Execution[] memory executions = new Execution[](2);\n\n        // 1. Approval\n        executions[0] = Execution({\n            target: tokenIn,\n            value: 0,\n            callData: abi.encodeWithSignature(\"approve(address,uint256)\", swapTarget, type(uint256).max)\n        });\n\n        // 2. Swap\n        executions[1] = Execution({\n            target: swapTarget,\n            value: nativeValue,\n            callData: swapCallData\n        });\n\n        // Encode using ExecutionLib\n        bytes[] memory executionCallDatas = new bytes[](1);\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\n\n        // Build arrays for redeemDelegations\n        bytes[] memory permissionContexts = new bytes[](1);\n        permissionContexts[0] = permissionContext;\n\n        ModeCode[] memory modes = new ModeCode[](1);\n        modes[0] = mode;\n\n        // Try to execute\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\n            emit DebugTestDelegationSingleSwap(true, \"Single swap delegation succeeded\");\n            return true;\n        } catch Error(string memory reason) {\n            emit DebugTestDelegationSingleSwap(false, reason);\n            return false;\n        } catch (bytes memory lowLevelData) {\n            string memory decodedError = lowLevelData.length > 0\n                ? string(abi.encodePacked(\"LowLevelRevert:\", lowLevelData))\n                : \"LowLevelRevertNoData\";\n            emit DebugTestDelegationSingleSwap(false, decodedError);\n            return false;\n        }\n    }\n\n    // Event for swap-only test\n    event DebugTestDelegationSwapOnly(bool success, string message);\n\n    /**\n     * @notice DEBUG: Test delegation with ONLY swap (no approval) - Level 5b\n     * @param userAccount DeleGator smart account address\n     * @param swapTarget DEX contract address\n     * @param swapCallData Swap calldata\n     * @param nativeValue Native token amount (for native swaps)\n     * @param permissionContext Encoded delegation with signature\n     * @param mode Execution mode\n     * @return success Whether delegation executed successfully\n     * @dev Assumes approval is already set (from Level 3). Tests if swap alone works through delegation.\n     *      This isolates whether the problem is batch execution or the swap itself.\n     */\n    function testDelegationSwapOnly(\n        address userAccount,\n        address swapTarget,\n        bytes calldata swapCallData,\n        uint256 nativeValue,\n        bytes calldata permissionContext,\n        ModeCode mode\n    ) external returns (bool success) {\n        // Build ONLY swap execution (approval assumed to be already set)\n        Execution[] memory executions = new Execution[](1);\n        executions[0] = Execution({\n            target: swapTarget,\n            value: nativeValue,\n            callData: swapCallData\n        });\n\n        // Encode using ExecutionLib (BATCH mode even for single execution for consistency)\n        bytes[] memory executionCallDatas = new bytes[](1);\n        executionCallDatas[0] = ExecutionLib.encodeBatch(executions);\n\n        // Build arrays for redeemDelegations\n        bytes[] memory permissionContexts = new bytes[](1);\n        permissionContexts[0] = permissionContext;\n\n        ModeCode[] memory modes = new ModeCode[](1);\n        modes[0] = mode;\n\n        // Try to execute\n        try delegationManager.redeemDelegations(permissionContexts, modes, executionCallDatas) {\n            emit DebugTestDelegationSwapOnly(true, \"Swap-only delegation succeeded\");\n            return true;\n        } catch Error(string memory reason) {\n            emit DebugTestDelegationSwapOnly(false, reason);\n            return false;\n        } catch (bytes memory lowLevelData) {\n            string memory decodedError = lowLevelData.length > 0\n                ? string(abi.encodePacked(\"LowLevelRevert:\", lowLevelData))\n                : \"LowLevelRevertNoData\";\n            emit DebugTestDelegationSwapOnly(false, decodedError);\n            return false;\n        }\n    }\n\n    /**\n     * @notice Authorize upgrade (UUPS requirement)\n     * @param newImplementation New implementation address\n     */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    /**\n     * @notice Get contract version\n     * @return Version string\n     */\n    function getVersion() external pure returns (string memory) {\n        return \"1.2.0-debug-delegation\";\n    }\n\n    /**\n     * @notice Allow receiving ETH for gas reimbursement\n     */\n    receive() external payable {}\n}\n","license":"MIT"},"src/StrategyRegistry.sol":{"keccak256":"0x1d94beba833d71895050b588b218348b0dab471c17bce02a3c9dd69d8256c575","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./libraries/StrategyLibrary.sol\";\nimport \"./delegation/types/DelegationTypes.sol\";\n\n/**\n * @title StrategyRegistry\n * @notice Shared registry for all DeleGator smart account strategies (non-custodial)\n * @dev SMART ACCOUNT ONLY: All strategies must use MetaMask DeleGator accounts\n *\n * Architecture:\n * - ONE shared registry for ALL DeleGators\n * - Each DeleGator can have MULTIPLE strategies\n * - Data isolated by mapping: DeleGator address => strategy ID => strategy\n * - No custody: funds stay in DeleGator smart accounts\n * - Owner verification: EOA that owns the DeleGator must approve strategy creation\n */\ncontract StrategyRegistry is Initializable, UUPSUpgradeable, OwnableUpgradeable {\n    using StrategyLibrary for StrategyLibrary.Strategy;\n\n    /// @notice User => Strategy ID => Strategy\n    mapping(address => mapping(uint256 => StrategyLibrary.Strategy)) public strategies;\n\n    /// @notice User => Array of strategy IDs\n    mapping(address => uint256[]) public userStrategyIds;\n\n    /// @notice User => Strategy count\n    mapping(address => uint256) public userStrategyCount;\n\n    /// @notice Address allowed to update lastRebalanceTime (RebalanceExecutor)\n    address public rebalanceExecutor;\n\n    // Events\n    event StrategyCreated(\n        address indexed delegator,\n        address indexed owner,\n        uint256 indexed strategyId,\n        string name,\n        address[] tokens,\n        uint256[] weights\n    );\n    event StrategyUpdated(address indexed delegator, uint256 indexed strategyId, address[] tokens, uint256[] weights);\n    event StrategyPaused(address indexed delegator, uint256 indexed strategyId);\n    event StrategyResumed(address indexed delegator, uint256 indexed strategyId);\n    event StrategyDeleted(address indexed delegator, uint256 indexed strategyId);\n    event RebalanceExecutorUpdated(address indexed oldExecutor, address indexed newExecutor);\n    event LastRebalanceTimeUpdated(address indexed delegator, uint256 indexed strategyId, uint256 timestamp);\n\n    // Errors\n    error StrategyAlreadyExists();\n    error StrategyNotFound();\n    error InvalidStrategyId();\n    error OnlyStrategyOwner();\n    error OnlyRebalanceExecutor();\n    error NotADeleGator();\n    error NotAuthorized();\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Initialize the registry\n     * @param _owner Owner address\n     */\n    function initialize(address _owner) external initializer {\n        __Ownable_init(_owner);\n        __UUPSUpgradeable_init();\n    }\n\n    /**\n     * @notice Set rebalance executor address (only owner)\n     * @param _executor RebalanceExecutor contract address\n     */\n    function setRebalanceExecutor(address _executor) external onlyOwner {\n        require(_executor != address(0), \"Invalid executor\");\n        address oldExecutor = rebalanceExecutor;\n        rebalanceExecutor = _executor;\n        emit RebalanceExecutorUpdated(oldExecutor, _executor);\n    }\n\n    /**\n     * @notice Create a new strategy for a DeleGator smart account\n     * @param delegator DeleGator smart account address (must be a MetaMask DeleGator)\n     * @param strategyId Unique ID for this strategy (user-defined)\n     * @param tokens Token addresses in strategy\n     * @param weights Token weights in basis points (must sum to 10000)\n     * @param rebalanceInterval Minimum seconds between rebalances\n     * @param name Human-readable name\n     *\n     * @dev SMART ACCOUNT ONLY: delegator must be a MetaMask DeleGator\n     *      Authorization: Either the DeleGator owner (EOA) or contract owner (backend) can create\n     */\n    function createStrategy(\n        address delegator,\n        uint256 strategyId,\n        address[] calldata tokens,\n        uint256[] calldata weights,\n        uint256 rebalanceInterval,\n        string calldata name\n    ) external {\n        // CRITICAL: Validate delegator is a DeleGator smart account\n        if (!DelegationTypes.isDeleGator(delegator)) {\n            revert NotADeleGator();\n        }\n\n        // Get the EOA owner of the DeleGator\n        address delegatorOwner = DelegationTypes.getDeleGatorOwner(delegator);\n        require(delegatorOwner != address(0), \"Invalid DeleGator owner\");\n\n        // Authorization: Either the owner EOA or contract owner (backend) can create\n        if (msg.sender != delegatorOwner && msg.sender != owner()) {\n            revert NotAuthorized();\n        }\n\n        // Check strategy doesn't already exist\n        if (strategies[delegator][strategyId].id != 0 || strategies[delegator][strategyId].tokens.length > 0) {\n            revert StrategyAlreadyExists();\n        }\n\n        // Validate parameters\n        StrategyLibrary.validateStrategy(tokens, weights);\n        require(rebalanceInterval > 0, \"Invalid interval\");\n        require(bytes(name).length > 0, \"Invalid name\");\n\n        // Create strategy\n        strategies[delegator][strategyId] = StrategyLibrary.Strategy({\n            id: strategyId,\n            owner: delegatorOwner,\n            delegator: delegator,\n            tokens: tokens,\n            weights: weights,\n            rebalanceInterval: rebalanceInterval,\n            lastRebalanceTime: block.timestamp,\n            isActive: true,\n            name: name\n        });\n\n        // Track strategy ID\n        userStrategyIds[delegator].push(strategyId);\n        userStrategyCount[delegator]++;\n\n        emit StrategyCreated(delegator, delegatorOwner, strategyId, name, tokens, weights);\n    }\n\n    /**\n     * @notice Update an existing strategy\n     * @param delegator DeleGator address\n     * @param strategyId Strategy ID to update\n     * @param tokens New token addresses\n     * @param weights New token weights\n     */\n    function updateStrategy(\n        address delegator,\n        uint256 strategyId,\n        address[] calldata tokens,\n        uint256[] calldata weights\n    ) external {\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\n\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\n            revert StrategyNotFound();\n        }\n\n        // Authorization: Only owner or contract owner\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\n            revert NotAuthorized();\n        }\n\n        // Validate new parameters\n        StrategyLibrary.validateStrategy(tokens, weights);\n\n        // Update strategy\n        strategy.tokens = tokens;\n        strategy.weights = weights;\n\n        emit StrategyUpdated(delegator, strategyId, tokens, weights);\n    }\n\n    /**\n     * @notice Pause a strategy (stops rebalancing)\n     * @param delegator DeleGator address\n     * @param strategyId Strategy ID to pause\n     */\n    function pauseStrategy(address delegator, uint256 strategyId) external {\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\n\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\n            revert StrategyNotFound();\n        }\n\n        // Authorization: Only owner or contract owner\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\n            revert NotAuthorized();\n        }\n\n        strategy.isActive = false;\n\n        emit StrategyPaused(delegator, strategyId);\n    }\n\n    /**\n     * @notice Resume a paused strategy\n     * @param delegator DeleGator address\n     * @param strategyId Strategy ID to resume\n     */\n    function resumeStrategy(address delegator, uint256 strategyId) external {\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\n\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\n            revert StrategyNotFound();\n        }\n\n        // Authorization: Only owner or contract owner\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\n            revert NotAuthorized();\n        }\n\n        strategy.isActive = true;\n\n        emit StrategyResumed(delegator, strategyId);\n    }\n\n    /**\n     * @notice Delete a strategy\n     * @param delegator DeleGator address\n     * @param strategyId Strategy ID to delete\n     */\n    function deleteStrategy(address delegator, uint256 strategyId) external {\n        StrategyLibrary.Strategy storage strategy = strategies[delegator][strategyId];\n\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\n            revert StrategyNotFound();\n        }\n\n        // Authorization: Only owner or contract owner\n        if (msg.sender != strategy.owner && msg.sender != owner()) {\n            revert NotAuthorized();\n        }\n\n        // Delete strategy\n        delete strategies[delegator][strategyId];\n\n        // Remove from ID array\n        uint256[] storage ids = userStrategyIds[delegator];\n        for (uint256 i = 0; i < ids.length; i++) {\n            if (ids[i] == strategyId) {\n                ids[i] = ids[ids.length - 1];\n                ids.pop();\n                break;\n            }\n        }\n\n        userStrategyCount[delegator]--;\n\n        emit StrategyDeleted(delegator, strategyId);\n    }\n\n    /**\n     * @notice Update last rebalance time (only callable by RebalanceExecutor)\n     * @param user User address\n     * @param strategyId Strategy ID\n     */\n    function updateLastRebalanceTime(address user, uint256 strategyId) external {\n        if (msg.sender != rebalanceExecutor) {\n            revert OnlyRebalanceExecutor();\n        }\n\n        StrategyLibrary.Strategy storage strategy = strategies[user][strategyId];\n\n        if (strategy.id == 0 && strategy.tokens.length == 0) {\n            revert StrategyNotFound();\n        }\n\n        strategy.lastRebalanceTime = block.timestamp;\n\n        emit LastRebalanceTimeUpdated(user, strategyId, block.timestamp);\n    }\n\n    /**\n     * @notice Get a specific strategy\n     * @param user User address\n     * @param strategyId Strategy ID\n     * @return strategy Strategy data\n     */\n    function getStrategy(address user, uint256 strategyId)\n        external\n        view\n        returns (StrategyLibrary.Strategy memory strategy)\n    {\n        return strategies[user][strategyId];\n    }\n\n    /**\n     * @notice Get all strategy IDs for a user\n     * @param user User address\n     * @return Strategy IDs\n     */\n    function getUserStrategyIds(address user) external view returns (uint256[] memory) {\n        return userStrategyIds[user];\n    }\n\n    /**\n     * @notice Get strategy count for a user\n     * @param user User address\n     * @return count Number of strategies\n     */\n    function getUserStrategyCount(address user) external view returns (uint256 count) {\n        return userStrategyCount[user];\n    }\n\n    /**\n     * @notice Get all strategies for a user\n     * @param user User address\n     * @return Array of strategies\n     */\n    function getAllUserStrategies(address user) external view returns (StrategyLibrary.Strategy[] memory) {\n        uint256[] memory ids = userStrategyIds[user];\n        StrategyLibrary.Strategy[] memory userStrategies = new StrategyLibrary.Strategy[](ids.length);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            userStrategies[i] = strategies[user][ids[i]];\n        }\n\n        return userStrategies;\n    }\n\n    /**\n     * @notice Authorize upgrade (UUPS requirement)\n     * @param newImplementation New implementation address\n     */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n    /**\n     * @notice Get contract version\n     * @return Version string\n     */\n    function getVersion() external pure returns (string memory) {\n        return \"1.0.0\";\n    }\n}\n","license":"MIT"},"src/delegation/interfaces/IDelegationManager.sol":{"keccak256":"0x80ed5c9387af2d555b32f2417420927342612e03130b3d81f3429469dbdd3759","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n// Re-export MetaMask Delegation Framework types and interfaces\nimport { Delegation, Caveat, ModeCode } from \"@delegation-framework/utils/Types.sol\";\nimport { IDelegationManager as IMetaMaskDelegationManager } from \"@delegation-framework/interfaces/IDelegationManager.sol\";\n\n/**\n * @title IDelegationManager\n * @notice Re-exports MetaMask's IDelegationManager interface\n * @dev Uses official MetaMask Delegation Framework v1.3.0\n *\n * This provides compatibility with our codebase while using MetaMask's battle-tested implementation.\n * Main method: redeemDelegations() - validates and executes delegations with caveat enforcement\n */\ninterface IDelegationManager is IMetaMaskDelegationManager {\n    // Interface inherits all methods from MetaMask's IDelegationManager:\n    // - redeemDelegations(bytes[] permissionContexts, ModeCode[] modes, bytes[] executionCallDatas)\n    // - enableDelegation(Delegation delegation)\n    // - disableDelegation(Delegation delegation)\n    // - getDelegationHash(Delegation delegation)\n    // - getDomainHash()\n    // - pause()\n    // - unpause()\n    //\n    // Events inherited:\n    // - RedeemedDelegation\n    // - EnabledDelegation\n    // - DisabledDelegation\n    //\n    // Errors inherited:\n    // - CannotUseADisabledDelegation\n    // - InvalidAuthority\n    // - InvalidDelegate\n    // - InvalidDelegator\n    // - InvalidEOASignature\n    // - InvalidERC1271Signature\n}\n","license":"MIT"},"src/delegation/types/DelegationTypes.sol":{"keccak256":"0x15a28c4f81f13119012e3e0690b601b4e1df24b956b40e44900cdfab475bf152","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n// Use MetaMask's official types from Delegation Framework\nimport { Delegation, Caveat } from \"@delegation-framework/utils/Types.sol\";\n\n/**\n * @title DelegationTypes\n * @notice Utility library for working with MetaMask DeleGator smart accounts\n * @dev Provides helper functions for DeleGator detection and ownership verification\n *\n * This library uses MetaMask's official Delegation Framework types and does not\n * implement custom delegation logic. All delegation validation and execution\n * is handled by the DelegationManager contract.\n */\nlibrary DelegationTypes {\n    /**\n     * @notice Check if address has contract code deployed\n     * @param account Address to check\n     * @return hasCode True if address has code (is a contract)\n     */\n    function isSmartContract(address account) internal view returns (bool hasCode) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @notice Check if address is a MetaMask DeleGator smart account\n     * @param account Address to check\n     * @return isDeleGatorAccount True if account is a DeleGator\n     *\n     * @dev Attempts to call owner() function which is present on HybridDeleGator\n     *      and other DeleGator implementations. If the call succeeds, it's a DeleGator.\n     */\n    function isDeleGator(address account) internal view returns (bool isDeleGatorAccount) {\n        // Must be a smart contract\n        if (!isSmartContract(account)) {\n            return false;\n        }\n\n        // Try to call owner() function (present on HybridDeleGator)\n        // Using low-level call to avoid revert if function doesn't exist\n        (bool success, bytes memory data) = account.staticcall(\n            abi.encodeWithSignature(\"owner()\")\n        );\n\n        // If call succeeded and returned data, it's likely a DeleGator\n        // HybridDeleGator.owner() returns address, which is 32 bytes\n        return success && data.length == 32;\n    }\n\n    /**\n     * @notice Get the EOA owner of a DeleGator smart account\n     * @param delegator DeleGator smart account address\n     * @return owner EOA address that owns and controls the DeleGator\n     *\n     * @dev HybridDeleGator has an owner() function that returns the EOA owner\n     *      Returns address(0) if not a DeleGator or owner() call fails\n     */\n    function getDeleGatorOwner(address delegator) internal view returns (address owner) {\n        // Validate it's a smart contract first\n        if (!isSmartContract(delegator)) {\n            return address(0);\n        }\n\n        // Try to call owner() function\n        (bool success, bytes memory data) = delegator.staticcall(\n            abi.encodeWithSignature(\"owner()\")\n        );\n\n        if (success && data.length == 32) {\n            return abi.decode(data, (address));\n        }\n\n        return address(0);\n    }\n}\n","license":"MIT"},"src/interfaces/IPythOracle.sol":{"keccak256":"0x4059b66bdd20b817bcc047c2cb6723d2fc56d3eb5152325411b79847d36b14c0","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/**\n * @title IPythOracle\n * @notice Interface for PythOracle wrapper contract\n */\ninterface IPythOracle {\n    // Events\n    event PriceFeedSet(address indexed token, bytes32 indexed feedId);\n    event PriceFeedRemoved(address indexed token);\n    event MaxPriceAgeUpdated(uint256 oldValue, uint256 newValue);\n    event MaxConfidenceRatioUpdated(uint256 oldValue, uint256 newValue);\n\n    // Errors\n    error NoFeedConfigured(address token);\n    error InvalidPrice(address token, int64 price);\n    error ConfidenceTooLow(uint64 conf, uint64 price, uint256 ratio);\n\n    // Configuration\n    function setPriceFeed(address token, bytes32 feedId) external;\n    function removePriceFeed(address token) external;\n    function setMaxPriceAge(uint256 seconds_) external;\n    function setMaxConfidenceRatio(uint256 bps) external;\n\n    // Price queries\n    function getPrice(address token) external view returns (uint256 price);\n    function batchGetPrices(address[] calldata tokens) external view returns (uint256[] memory prices);\n    function isPriceFresh(address token) external view returns (bool);\n\n    // Getters\n    function getVersion() external pure returns (string memory);\n    function getPythContract() external view returns (address);\n    function oracle() external view returns (address);\n    function pythContract() external view returns (address);\n    function priceFeeds(address) external view returns (bytes32);\n}\n","license":"MIT"},"src/interfaces/IRebalancerConfig.sol":{"keccak256":"0xdded51ec67afce214db4757206a6f521561725c8a97b80c3ffe3d4eec5a1de0b","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/**\n * @title IRebalancerConfig\n * @notice Interface for system-wide configuration storage\n * @dev Manages fees, slippage, intervals, and token whitelist\n */\ninterface IRebalancerConfig {\n    // Events\n    event MaxSlippageUpdated(uint256 oldValue, uint256 newValue);\n    event MinRebalanceIntervalUpdated(uint256 oldValue, uint256 newValue);\n    event MaxAllocationDriftUpdated(uint256 oldValue, uint256 newValue);\n    event ManagementFeeUpdated(uint256 oldValue, uint256 newValue);\n    event PerformanceFeeUpdated(uint256 oldValue, uint256 newValue);\n    event FeeRecipientUpdated(address indexed oldRecipient, address indexed newRecipient);\n    event TokenWhitelisted(address indexed token);\n    event TokenRemovedFromWhitelist(address indexed token);\n\n    /**\n     * @notice Get the contract version\n     * @return Version string\n     */\n    function getVersion() external pure returns (string memory);\n\n    /**\n     * @notice Set maximum slippage in basis points\n     * @param bps Basis points (e.g., 50 = 0.5%)\n     */\n    function setMaxSlippage(uint256 bps) external;\n\n    /**\n     * @notice Set minimum rebalance interval in seconds\n     * @param seconds_ Minimum seconds between rebalances\n     */\n    function setMinRebalanceInterval(uint256 seconds_) external;\n\n    /**\n     * @notice Set maximum allocation drift in basis points\n     * @param bps Basis points (e.g., 500 = 5%)\n     */\n    function setMaxAllocationDrift(uint256 bps) external;\n\n    /**\n     * @notice Set management fee in basis points (annual)\n     * @param bps Basis points (e.g., 50 = 0.5% annual)\n     */\n    function setManagementFee(uint256 bps) external;\n\n    /**\n     * @notice Set performance fee in basis points\n     * @param bps Basis points (e.g., 1000 = 10%)\n     */\n    function setPerformanceFee(uint256 bps) external;\n\n    /**\n     * @notice Set fee recipient address\n     * @param recipient The address to receive fees\n     */\n    function setFeeRecipient(address recipient) external;\n\n    /**\n     * @notice Add a token to the whitelist\n     * @param token The token address to whitelist\n     */\n    function addWhitelistedToken(address token) external;\n\n    /**\n     * @notice Remove a token from the whitelist\n     * @param token The token address to remove\n     */\n    function removeWhitelistedToken(address token) external;\n\n    /**\n     * @notice Check if a token is whitelisted\n     * @param token The token address to check\n     * @return true if the token is whitelisted\n     */\n    function isTokenWhitelisted(address token) external view returns (bool);\n\n    /**\n     * @notice Get maximum slippage in basis points\n     * @return Basis points\n     */\n    function getMaxSlippage() external view returns (uint256);\n\n    /**\n     * @notice Get minimum rebalance interval in seconds\n     * @return Seconds\n     */\n    function getMinRebalanceInterval() external view returns (uint256);\n\n    /**\n     * @notice Get maximum allocation drift in basis points\n     * @return Basis points\n     */\n    function getMaxAllocationDrift() external view returns (uint256);\n\n    /**\n     * @notice Get management fee in basis points\n     * @return Basis points\n     */\n    function getManagementFee() external view returns (uint256);\n\n    /**\n     * @notice Get performance fee in basis points\n     * @return Basis points\n     */\n    function getPerformanceFee() external view returns (uint256);\n\n    /**\n     * @notice Get fee recipient address\n     * @return The fee recipient address\n     */\n    function getFeeRecipient() external view returns (address);\n}\n","license":"MIT"},"src/interfaces/IUniswapHelper.sol":{"keccak256":"0xaddece26bbe4a588a1940fb95d52637bc6e96e90aee1c0daa39cafafbaeb18c5","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\n/**\n * @title IUniswapHelper\n * @notice Interface for Uniswap V2 interaction helper\n * @dev Wraps Uniswap V2 Router with slippage protection and quote functions\n */\ninterface IUniswapHelper {\n    // Events\n    event SwapExecuted(\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut,\n        address indexed recipient\n    );\n\n    // Errors\n    error InsufficientOutput(uint256 amountOut, uint256 minAmountOut);\n    error NoLiquidity(address tokenA, address tokenB);\n    error InvalidPath();\n\n    /**\n     * @notice Get the contract version\n     * @return Version string\n     */\n    function getVersion() external pure returns (string memory);\n\n    /**\n     * @notice Swap exact tokens for tokens\n     * @param tokenIn The input token address\n     * @param tokenOut The output token address\n     * @param amountIn The input amount\n     * @param minAmountOut The minimum output amount (slippage protection)\n     * @param recipient The recipient address\n     * @param deadline The transaction deadline (unix timestamp)\n     * @return amountOut The actual output amount\n     */\n    function swapExactTokensForTokens(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 minAmountOut,\n        address recipient,\n        uint256 deadline  // HIGH-002: Added deadline parameter for MEV protection\n    ) external returns (uint256 amountOut);\n\n    /**\n     * @notice Get the expected output amount for a given input\n     * @param amountIn The input amount\n     * @param tokenIn The input token address\n     * @param tokenOut The output token address\n     * @return The expected output amount\n     */\n    function getAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256);\n\n    /**\n     * @notice Check if a pair has liquidity\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @return true if the pair has liquidity\n     */\n    function hasLiquidity(address tokenA, address tokenB) external view returns (bool);\n\n    /**\n     * @notice Calculate minimum output amount with slippage\n     * @param amountIn The input amount\n     * @param tokenIn The input token address\n     * @param tokenOut The output token address\n     * @param slippageBps Slippage in basis points (e.g., 50 = 0.5%)\n     * @return The minimum output amount\n     */\n    function calculateMinAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut,\n        uint256 slippageBps\n    ) external view returns (uint256);\n}\n","license":"MIT"},"src/libraries/StrategyLibrary.sol":{"keccak256":"0xbc35a0ae821b47e89d941c2e201722988bb3b992d3f034706838f6de194340f9","urls":[],"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/IPythOracle.sol\";\n\n/**\n * @title StrategyLibrary\n * @notice Pure calculation logic for portfolio strategies (no state)\n * @dev Used by RebalanceExecutor to calculate rebalance swaps\n *\n * Non-custodial: All calculations based on user's MetaMask account balances\n */\nlibrary StrategyLibrary {\n    struct Strategy {\n        uint256 id;\n        address owner;        // EOA that owns the DeleGator smart account\n        address delegator;    // DeleGator smart account address (holds funds)\n        address[] tokens;\n        uint256[] weights;  // Basis points (100 = 1%)\n        uint256 rebalanceInterval;\n        uint256 lastRebalanceTime;\n        bool isActive;\n        string name;\n    }\n\n    error InvalidWeights();\n    error InvalidTokenCount();\n    error ZeroAddress();\n\n    /**\n     * @notice Calculate required swaps to rebalance portfolio\n     * @param account DeleGator smart account address (holds funds)\n     * @param strategy Strategy configuration\n     * @param oracle Price oracle address\n     * @return tokensToSell Tokens that need to be sold\n     * @return tokensToBuy Tokens that need to be bought\n     * @return amountsToSell Amounts to sell for each token\n     */\n    function calculateRebalanceSwaps(\n        address account,\n        Strategy memory strategy,\n        address oracle\n    )\n        external\n        view\n        returns (address[] memory tokensToSell, address[] memory tokensToBuy, uint256[] memory amountsToSell)\n    {\n        require(account != address(0), \"Invalid account\");\n        require(oracle != address(0), \"Invalid oracle\");\n\n        // Get current balances from user's account\n        uint256[] memory balances = new uint256[](strategy.tokens.length);\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\n            balances[i] = IERC20(strategy.tokens[i]).balanceOf(account);\n        }\n\n        // Get current prices\n        uint256[] memory prices = IPythOracle(oracle).batchGetPrices(strategy.tokens);\n\n        // Calculate total portfolio value\n        uint256 totalValueUSD = 0;\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\n            // Adjust for token decimals\n            uint8 decimals = IERC20Metadata(strategy.tokens[i]).decimals();\n            uint256 valueUSD = (balances[i] * prices[i]) / (10 ** decimals);\n            totalValueUSD += valueUSD;\n        }\n\n        // Calculate target values for each token\n        uint256[] memory targetValuesUSD = new uint256[](strategy.tokens.length);\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\n            targetValuesUSD[i] = (totalValueUSD * strategy.weights[i]) / 10000;\n        }\n\n        // Calculate current values for each token\n        uint256[] memory currentValuesUSD = new uint256[](strategy.tokens.length);\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\n            uint8 decimals = IERC20Metadata(strategy.tokens[i]).decimals();\n            currentValuesUSD[i] = (balances[i] * prices[i]) / (10 ** decimals);\n        }\n\n        // Determine which tokens to sell and buy\n        uint256 sellCount = 0;\n        uint256 buyCount = 0;\n\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\n            if (currentValuesUSD[i] > targetValuesUSD[i]) {\n                sellCount++;\n            } else if (currentValuesUSD[i] < targetValuesUSD[i]) {\n                buyCount++;\n            }\n        }\n\n        tokensToSell = new address[](sellCount);\n        tokensToBuy = new address[](buyCount);\n        amountsToSell = new uint256[](sellCount);\n\n        uint256 sellIndex = 0;\n        uint256 buyIndex = 0;\n\n        for (uint256 i = 0; i < strategy.tokens.length; i++) {\n            if (currentValuesUSD[i] > targetValuesUSD[i]) {\n                tokensToSell[sellIndex] = strategy.tokens[i];\n\n                // Calculate amount to sell (in token units)\n                uint256 excessValueUSD = currentValuesUSD[i] - targetValuesUSD[i];\n                uint8 decimals = IERC20Metadata(strategy.tokens[i]).decimals();\n                amountsToSell[sellIndex] = (excessValueUSD * (10 ** decimals)) / prices[i];\n\n                sellIndex++;\n            } else if (currentValuesUSD[i] < targetValuesUSD[i]) {\n                tokensToBuy[buyIndex] = strategy.tokens[i];\n                buyIndex++;\n            }\n        }\n    }\n\n    /**\n     * @notice Calculate current allocation weights\n     * @param account DeleGator smart account address (holds funds)\n     * @param tokens Token addresses\n     * @param oracle Price oracle address\n     * @return weights Current weights in basis points\n     */\n    function calculateCurrentWeights(address account, address[] memory tokens, address oracle)\n        external\n        view\n        returns (uint256[] memory weights)\n    {\n        require(account != address(0), \"Invalid account\");\n        require(oracle != address(0), \"Invalid oracle\");\n\n        uint256[] memory balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            balances[i] = IERC20(tokens[i]).balanceOf(account);\n        }\n\n        uint256[] memory prices = IPythOracle(oracle).batchGetPrices(tokens);\n\n        uint256 totalValueUSD = 0;\n        uint256[] memory valuesUSD = new uint256[](tokens.length);\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint8 decimals = IERC20Metadata(tokens[i]).decimals();\n            valuesUSD[i] = (balances[i] * prices[i]) / (10 ** decimals);\n            totalValueUSD += valuesUSD[i];\n        }\n\n        weights = new uint256[](tokens.length);\n        if (totalValueUSD == 0) {\n            return weights; // All zeros if no balance\n        }\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            weights[i] = (valuesUSD[i] * 10000) / totalValueUSD;\n        }\n    }\n\n    /**\n     * @notice Calculate drift between current and target weights\n     * @param currentWeights Current allocation in basis points\n     * @param targetWeights Target allocation in basis points\n     * @return drift Maximum deviation in basis points\n     */\n    function calculateDrift(uint256[] memory currentWeights, uint256[] memory targetWeights)\n        external\n        pure\n        returns (uint256 drift)\n    {\n        require(currentWeights.length == targetWeights.length, \"Length mismatch\");\n\n        drift = 0;\n        for (uint256 i = 0; i < currentWeights.length; i++) {\n            uint256 deviation = currentWeights[i] > targetWeights[i]\n                ? currentWeights[i] - targetWeights[i]\n                : targetWeights[i] - currentWeights[i];\n\n            if (deviation > drift) {\n                drift = deviation;\n            }\n        }\n    }\n\n    /**\n     * @notice Get total portfolio value in USD\n     * @param account DeleGator smart account address (holds funds)\n     * @param tokens Token addresses\n     * @param oracle Price oracle address\n     * @return totalValueUSD Portfolio value scaled to 18 decimals\n     */\n    function getPortfolioValue(address account, address[] memory tokens, address oracle)\n        external\n        view\n        returns (uint256 totalValueUSD)\n    {\n        require(account != address(0), \"Invalid account\");\n        require(oracle != address(0), \"Invalid oracle\");\n\n        uint256[] memory balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            balances[i] = IERC20(tokens[i]).balanceOf(account);\n        }\n\n        uint256[] memory prices = IPythOracle(oracle).batchGetPrices(tokens);\n\n        totalValueUSD = 0;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            uint8 decimals = IERC20Metadata(tokens[i]).decimals();\n            uint256 valueUSD = (balances[i] * prices[i]) / (10 ** decimals);\n            totalValueUSD += valueUSD;\n        }\n    }\n\n    /**\n     * @notice Validate strategy parameters\n     * @param tokens Token addresses\n     * @param weights Token weights in basis points\n     */\n    function validateStrategy(address[] memory tokens, uint256[] memory weights) external pure {\n        if (tokens.length == 0 || tokens.length > 10) {\n            revert InvalidTokenCount();\n        }\n\n        if (tokens.length != weights.length) {\n            revert InvalidTokenCount();\n        }\n\n        // Check no zero addresses\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokens[i] == address(0)) {\n                revert ZeroAddress();\n            }\n        }\n\n        // Check weights sum to 10000 (100%)\n        uint256 totalWeight = 0;\n        for (uint256 i = 0; i < weights.length; i++) {\n            totalWeight += weights[i];\n        }\n\n        if (totalWeight != 10000) {\n            revert InvalidWeights();\n        }\n    }\n}\n","license":"MIT"}},"version":1},"id":79}